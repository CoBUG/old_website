erlsrv(1)                        User Commands                       erlsrv(1)



NNAAMMEE
       erlsrv - Run the Erlang emulator as a service on Windows NT(R)

DDEESSCCRRIIPPTTIIOONN
       This utility is specific to Windows NT/2000/XP(R) (and subsequent
       versions of Windows) It allows Erlang emulators to run as services on
       the Windows system, allowing embedded systems to start without any user
       needing to log in. The emulator started in this way can be manipulated
       through the Windows(R) services applet in a manner similar to other
       services.

       Note that erlsrv is not a general service utility for Windows, but
       designed for embedded Erlang systems.

       As well as being the actual service, erlsrv also provides a command
       line interface for registering, changing, starting and stopping
       services.

       To manipulate services, the logged in user should have Administrator
       privileges on the machine. The Erlang machine itself is (default) run
       as the local administrator. This can be changed with the Services
       applet in Windows (R).

       The processes created by the service can, as opposed to normal
       services, be "killed" with the task manager. Killing a emulator that is
       started by a service will trigger the "OnFail" action specified for
       that service, which may be a reboot.

       The following parameters may be specified for each Erlang service:

         * _S_t_o_p_A_c_t_i_o_n: This tells _e_r_l_s_r_v how to stop the Erlang emulator.
           Default is to kill it (Win32 TerminateProcess), but this action can
           specify any Erlang shell command that will be executed in the
           emulator to make it stop. The emulator is expected to stop within
           30 seconds after the command is issued in the shell. If the
           emulator is not stopped, it will report a running state to the
           service manager.

         * _O_n_F_a_i_l: This can be either of _r_e_b_o_o_t, _r_e_s_t_a_r_t, _r_e_s_t_a_r_t___a_l_w_a_y_s or
           _i_g_n_o_r_e (the default). In case of _r_e_b_o_o_t, the NT system is rebooted
           whenever the emulator stops (a more simple form of watchdog), this
           could be useful for less critical systems, otherwise use the heart
           functionality to accomplish this. The restart value makes the
           Erlang emulator be restarted (with whatever parameters are
           registered for the service at the occasion) when it stops. If the
           emulator stops again within 10 seconds, it is not restarted to
           avoid an infinite loop which could completely hang the NT system.
           _r_e_s_t_a_r_t___a_l_w_a_y_s is similar to restart, but does not try to detect
           cyclic restarts, it is expected that some other mechanism is
           present to avoid the problem. The default (ignore) just reports the
           service as stopped to the service manager whenever it fails, it has
           to be manually restarted.

           On a system where release handling is used, this should always be
           set to _i_g_n_o_r_e. Use _h_e_a_r_t to restart the service on failure instead.

         * _M_a_c_h_i_n_e: The location of the Erlang emulator. The default is the
           _e_r_l_._e_x_e located in the same directory as erlsrv.exe. Do not specify
           _w_e_r_l_._e_x_e as this emulator, it will not work.

           If the system uses release handling, this should be set to a
           program similar to _s_t_a_r_t___e_r_l_._e_x_e.

         * _E_n_v: Specifies an _a_d_d_i_t_i_o_n_a_l environment for the emulator. The
           environment variables specified here are added to the system wide
           environment block that is normally present when a service starts
           up. Variables present in both the system wide environment and in
           the service environment specification will be set to the value
           specified in the service.

         * _W_o_r_k_D_i_r: The working directory for the Erlang emulator, has to be
           on a local drive (there are no network drives mounted when a
           service starts). Default working directory for services is
           _%_S_y_s_t_e_m_D_r_i_v_e_%_%_S_y_s_t_e_m_P_a_t_h_%. Debug log files will be placed in this
           directory.

         * _P_r_i_o_r_i_t_y: The process priority of the emulator, this can be one of
           _r_e_a_l_t_i_m_e, _h_i_g_h, _l_o_w or _d_e_f_a_u_l_t (the default). Real-time priority is
           not recommended, the machine will possibly be inaccessible to
           interactive users. High priority could be used if two Erlang nodes
           should reside on one dedicated system and one should have
           precedence over the other. Low process priority may be used if
           interactive performance should not be affected by the emulator
           process.

         * _S_N_a_m_e _o_r _N_a_m_e: Specifies the short or long node-name of the Erlang
           emulator. The Erlang services are always distributed, default is to
           use the service name as (short) node-name.

         * _D_e_b_u_g_T_y_p_e: Can be one of _n_o_n_e (default), _n_e_w, _r_e_u_s_e or _c_o_n_s_o_l_e.
           Specifies that output from the Erlang shell should be sent to a
           "debug log". The log file is named <servicename>_._d_e_b_u_g or
           <servicename>_._d_e_b_u_g_.<N>, where <N> is an integer between 1 and 99.
           The log-file is placed in the working directory of the service (as
           specified in WorkDir). The _r_e_u_s_e option always reuses the same log
           file (<servicename>_._d_e_b_u_g) and the _n_e_w option uses a separate log
           file for every invocation of the service (<servicename>_._d_e_b_u_g_.<N>).
           The _c_o_n_s_o_l_e option opens an interactive Windows(R) console window
           for the Erlang shell of the service. The _c_o_n_s_o_l_e option
           automatically disables the _S_t_o_p_A_c_t_i_o_n and a service started with an
           interactive console window will not survive logouts, _O_n_F_a_i_l actions
           do not work with debug-consoles either. If no _D_e_b_u_g_T_y_p_e is
           specified (_n_o_n_e), the output of the Erlang shell is discarded.

           The _c_o_n_s_o_l_e_D_e_b_u_g_T_y_p_e is _n_o_t _i_n _a_n_y _w_a_y intended for production. It
           is _o_n_l_y a convenient way to debug Erlang services during
           development. The _n_e_w and _r_e_u_s_e options might seem convenient to
           have in a production system, but one has to take into account that
           the logs will grow indefinitely during the systems lifetime and
           there is no way, short of restarting the service, to truncate those
           logs. In short, the _D_e_b_u_g_T_y_p_e is intended for debugging only. Logs
           during production are better produced with the standard Erlang
           logging facilities.

         * _A_r_g_s: Additional arguments passed to the emulator startup program
           _e_r_l_._e_x_e (or _s_t_a_r_t___e_r_l_._e_x_e). Arguments that cannot be specified here
           are _-_n_o_i_n_p_u_t (StopActions would not work), _-_n_a_m_e and _-_s_n_a_m_e (they
           are specified in any way. The most common use is for specifying
           cookies and flags to be passed to init:boot() (_-_s).

         * _I_n_t_e_r_n_a_l_S_e_r_v_i_c_e_N_a_m_e: Specifies the Windows(R) internal service name
           (not the display name, which is the one _e_r_l_s_r_v uses to identify the
           service).

           This internal name can not be changed, it is fixed even if the
           service is renamed. _E_r_l_s_r_v generates a unique internal name when a
           service is created, it is recommended to keep to the defaut if
           release-handling is to be used for the application.

           The internal service name can be seen in the Windows(R) service
           manager if viewing _P_r_o_p_e_r_t_i_e_s for an erlang service.

         * _C_o_m_m_e_n_t: A textual comment describing the service. Not mandatory,
           but shows up as the service description in the Windows(R) service
           manager.

       The naming of the service in a system that uses release handling has to
       follow the convention _N_o_d_e_N_a_m_e__R_e_l_e_a_s_e, where _N_o_d_e_N_a_m_e is the first
       part of the Erlang nodename (up to, but not including the "@") and
       _R_e_l_e_a_s_e is the current release of the application.

EEXXPPOORRTTSS
       eerrllssrrvv {{sseett || aadddd}} <<sseerrvviiccee--nnaammee>> [[<<sseerrvviiccee ooppttiioonnss>>]]

              The set and add commands adds or modifies a Erlang service
              respectively. The simplest form of an add command would be
              completely without options in which case all default values
              (described above) apply. The service name is mandatory.

              Every option can be given without parameters, in which case the
              default value is applied. Values to the options are supplied
              _o_n_l_y when the default should not be used (i.e. _e_r_l_s_r_v _s_e_t
              _m_y_s_e_r_v_i_c_e _-_p_r_i_o _-_a_r_g sets the default priority and removes all
              arguments).

              The following service options are currently available:

                --sstt[[ooppaaccttiioonn]] [[<<eerrllaanngg sshheellll ccoommmmaanndd>>]]::
                  Defines the StopAction, the command given to the Erlang
                  shell when the service is stopped. Default is none.

                --oonn[[ffaaiill]] [[{{rreebboooott || rreessttaarrtt || rreessttaarrtt__aallwwaayyss}}]]::
                  Specifies the action to take when the Erlang emulator stops
                  unexpectedly. Default is to ignore.

                --mm[[aacchhiinnee]] [[<<eerrll--ccoommmmaanndd>>]]::
                  The complete path to the Erlang emulator, never use the werl
                  program for this. Default is the _e_r_l_._e_x_e in the same
                  directory as _e_r_l_s_r_v_._e_x_e. When release handling is used, this
                  should be set to a program similar to _s_t_a_r_t___e_r_l_._e_x_e.

                --ee[[nnvv]] [[<<vvaarriiaabbllee>>[[==<<vvaalluuee>>]]]] ......::
                  Edits the environment block for the service. Every
                  environment variable specified will add to the system
                  environment block. If a variable specified here has the same
                  name as a system wide environment variable, the specified
                  value overrides the system wide. Environment variables are
                  added to this list by specifying <variable>=<value> and
                  deleted from the list by specifying <variable> alone. The
                  environment block is automatically sorted. Any number of
                  _-_e_n_v options can be specified in one command. Default is to
                  use the system environment block unmodified (except for two
                  additions, see bbeellooww).

                --ww[[oorrkkddiirr]] [[<<ddiirreeccttoorryy>>]]::
                  The initial working directory of the Erlang emulator.
                  Default is the system directory.

                --pp[[rriioorriittyy]] [[{{llooww||hhiigghh||rreeaallttiimmee}}]]::
                  The priority of the Erlang emulator. The default is the
                  Windows(R) default priority.

                {{--ssnn[[aammee]] || --nn[[aammee]]}} [[<<nnooddee--nnaammee>>]]::
                  The node-name of the Erlang machine, distribution is
                  mandatory. Default is _-_s_n_a_m_e _<_s_e_r_v_i_c_e _n_a_m_e_>.

                --dd[[eebbuuggttyyppee]] [[{{nneeww||rreeuussee||ccoonnssoollee}}]]::
                  Specifies where shell output should be sent, default is that
                  shell output is discarded. To be used only for debugging.

                --aarr[[ggss]] [[<<lliimmiitteedd eerrll aarrgguummeennttss>>]]::
                  Additional arguments to the Erlang emulator, avoid _-_n_o_i_n_p_u_t,
                  _-_n_o_s_h_e_l_l and _-_s_n_a_m_e/_-_n_a_m_e. Default is no additional
                  arguments. Remember that the services cookie file is not
                  necessarily the same as the interactive users. The service
                  runs as the local administrator. All arguments should be
                  given together in one string, use double quotes (") to give
                  an argument string containing spaces and use quoted quotes
                  (\") to give an quote within the argument string if
                  necessary.

                --ii[[nntteerrnnaallsseerrvviicceennaammee]] [[<<iinntteerrnnaall nnaammee>>]]::
                  _O_n_l_y allowed for _a_d_d. Specifies a Windows(R) internal
                  service name for the service, which by default is set to
                  something unique (prefixed with the original service name)
                  by erlsrv when adding a new service. Specifying this is a
                  purely cosmethic action and is _n_o_t recommended if release
                  handling is to be performed. The internal service name
                  cannot be changed once the service is created. The internal
                  name is _n_o_t to be confused with the ordinary service name,
                  which is the name used to identify a service to erlsrv.

                --cc[[oommmmeenntt]] [[<<sshhoorrtt ddeessccrriippttiioonn>>]]::
                  Specifies a textual comment describing the service. This
                  comment will show upp as the service description in the
                  Windows(R) service manager.

       eerrllssrrvv {{ssttaarrtt || ssttaarrtt__ddiissaabblleedd || ssttoopp || ddiissaabbllee || eennaabbllee}} <<sseerrvviiccee--
       nnaammee>>

              These commands are only added for convenience, the normal way to
              manipulate the state of a service is through the control panels
              services applet. The _s_t_a_r_t and _s_t_o_p commands communicates with
              the service manager for stopping and starting a service. The
              commands wait until the service is actually stopped or started.
              When disabling a service, it is not stopped, the disabled state
              will not take effect until the service actually is stopped.
              Enabling a service sets it in automatic mode, that is started at
              boot. This command cannot set the service to manual.

              The _s_t_a_r_t___d_i_s_a_b_l_e_d command operates on a service regardless of
              if it's enabled/disabled or started/stopped. It does this by
              first enabling it (regardless of if it's enabled or not), then
              starting it (if it's not already started) and then disabling it.
              The result will be a disabled but started service, regardless of
              its earlier state. This is useful for starting services
              temporarily during a release upgrade. The difference between
              using _s_t_a_r_t___d_i_s_a_b_l_e_d and the sequence _e_n_a_b_l_e, _s_t_a_r_t and _d_i_s_a_b_l_e
              is that all other _e_r_l_s_r_v commands are locked out during the
              sequence of operations in _s_t_a_r_t___d_i_s_a_b_l_e, making the operation
              atomic from an _e_r_l_s_r_v user's point of view.

       eerrllssrrvv rreemmoovvee <<sseerrvviiccee--nnaammee>>

              This command removes the service completely with all its
              registered options. It will be stopped before it is removed.

       eerrllssrrvv lliisstt [[<<sseerrvviiccee--nnaammee>>]]

              If no service name is supplied, a brief listing of all Erlang
              services is presented. If a service-name is supplied, all
              options for that service are presented.

       eerrllssrrvv hheellpp

EENNVVIIRROONNMMEENNTT
       The environment of an Erlang machine started as a service will contain
       two special variables, _E_R_L_S_R_V___S_E_R_V_I_C_E___N_A_M_E, which is the name of the
       service that started the machine and _E_R_L_S_R_V___E_X_E_C_U_T_A_B_L_E which is the
       full path to the _e_r_l_s_r_v_._e_x_e that can be used to manipulate the service.
       This will come in handy when defining a heart command for your service.
       A command file for restarting a service will simply look like this:

       @echo off
       %ERLSRV_EXECUTABLE% stop %ERLSRV_SERVICE_NAME%
       %ERLSRV_EXECUTABLE% start %ERLSRV_SERVICE_NAME%

       This command file is then set as heart command.

       The environment variables can also be used to detect that we are
       running as a service and make port programs react correctly to the
       control events generated on logout (see below).

PPOORRTT PPRROOGGRRAAMMSS
       When a program runs in the service context, it has to handle the
       control events that is sent to every program in the system when the
       interactive user logs off. This is done in different ways for programs
       running in the console subsystem and programs running as window
       applications. An application which runs in the console subsystem
       (normal for port programs) uses the win32 function
       _S_e_t_C_o_n_s_o_l_e_C_t_r_l_H_a_n_d_l_e_r to register a control handler that returns TRUE
       in answer to the _C_T_R_L___L_O_G_O_F_F___E_V_E_N_T and _C_T_R_L___S_H_U_T_D_O_W_N___E_V_E_N_T events.
       Other applications just forward _W_M___E_N_D_S_E_S_S_I_O_N and _W_M___Q_U_E_R_Y_E_N_D_S_E_S_S_I_O_N to
       the default window procedure. Here is a brief example in C of how to
       set the console control handler:

       #include <windows.h>
       /*
       ** A Console control handler that ignores the log off events,
       ** and lets the default handler take care of other events.
       */
       BOOL WINAPI service_aware_handler(DWORD ctrl){
           if(ctrl == CTRL_LOGOFF_EVENT)
               return TRUE;
           if(ctrl == CTRL_SHUTDOWN_EVENT)
               return TRUE;
           return FALSE;
       }

       void initialize_handler(void){
           char buffer[2];
           /*
            * We assume we are running as a service if this
            * environment variable is defined
            */
           if(GetEnvironmentVariable("ERLSRV_SERVICE_NAME",buffer,
                                     (DWORD) 2)){
               /*
               ** Actually set the control handler
               */
               SetConsoleCtrlHandler(&service_aware_handler, TRUE);
           }
       }

NNOOTTEESS
       Even though the options are described in a Unix-like format, the case
       of the options or commands is not relevant, and the "/" character for
       options can be used as well as the "-" character.

       Note that the program resides in the emulators _b_i_n-directory, not in
       the _b_i_n-directory directly under the Erlang root. The reasons for this
       are the subtle problem of upgrading the emulator on a running system,
       where a new version of the runtime system should not need to overwrite
       existing (and probably used) executables.

       To easily manipulate the Erlang services, put the
       _<_e_r_l_a_n_g___r_o_o_t_>_\_e_r_t_s_-_<_v_e_r_s_i_o_n_>_\_b_i_n directory in the path instead of
       _<_e_r_l_a_n_g___r_o_o_t_>_\_b_i_n. The erlsrv program can be found from inside Erlang
       by using the _o_s_:_f_i_n_d___e_x_e_c_u_t_a_b_l_e_/_1 Erlang function.

       For release handling to work, use _s_t_a_r_t___e_r_l as the Erlang machine. It
       is also worth mentioning again that the name of the service is
       significant (see aabboovvee).

SSEEEE AALLSSOO
       start_erl(1), release_handler(3)



Ericsson AB                       erts 5.9.2                         erlsrv(1)
