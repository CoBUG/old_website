run_erl(1)                       User Commands                      run_erl(1)



NNAAMMEE
       run_erl - Redirect Erlang input and output streams on Solaris(R)

DDEESSCCRRIIPPTTIIOONN
       This describes the _r_u_n___e_r_l program specific to Solaris/Linux. This
       program redirect the standard input and standard output streams so that
       all output can be logged. It also let the program _t_o___e_r_l connect to the
       Erlang console making it possible to monitor and debug an embedded
       system remotely.

       You can read more about the use in the _E_m_b_e_d_d_e_d _S_y_s_t_e_m _U_s_e_r_'_s _G_u_i_d_e.

EEXXPPOORRTTSS
       rruunn__eerrll [[--ddaaeemmoonn]] ppiippee__ddiirr// lloogg__ddiirr ""eexxeecc ccoommmmaanndd [[ccoommmmaanndd__aarrgguummeennttss]]""

              The _r_u_n___e_r_l program arguments are:

                --ddaaeemmoonn::
                  This option is highly recommended. It makes run_erl run in
                  the background completely detached from any controlling
                  terminal and the command returns to the caller immediately.
                  Without this option, run_erl must be started using several
                  tricks in the shell to detach it completely from the
                  terminal in use when starting it. The option must be the
                  first argument to run_erl on the command line.

                ppiippee__ddiirr::
                  This is where to put the named pipe, usually _/_t_m_p_/. It shall
                  be suffixed by a _/ (slash), i.e. not _/_t_m_p_/_e_p_i_p_i_e_s, but
                  _/_t_m_p_/_e_p_i_p_e_s_/.

                lloogg__ddiirr::
                  This is where the log files are written. There will be one
                  log file, _r_u_n___e_r_l_._l_o_g that log progress and warnings from
                  the _r_u_n___e_r_l program itself and there will be up to five log
                  files at maximum 100KB each (both number of logs and sizes
                  can be changed by environment variables, see below) with the
                  content of the standard streams from and to the command.
                  When the logs are full _r_u_n___e_r_l will delete and reuse the
                  oldest log file.

                ""eexxeecc ccoommmmaanndd [[ccoommmmaanndd__aarrgguummeennttss]]""::
                  In the third argument _c_o_m_m_a_n_d is the to execute where
                  everything written to stdin and stdout is logged to _l_o_g___d_i_r.

NNOOTTEESS CCOONNCCEERRNNIINNGG TTHHEE LLOOGG FFIILLEESS
       While running, run_erl (as stated earlier) sends all output,
       uninterpreted, to a log file. The file is called _e_r_l_a_n_g_._l_o_g_._N, where N
       is a number. When the log is "full", default after 100KB, run_erl
       starts to log in file _e_r_l_a_n_g_._l_o_g_._(_N_+_1_), until N reaches a certain
       number (default 5), where after N starts at 1 again and the oldest
       files start getting overwritten. If no output comes from the erlang
       shell, but the erlang machine still seems to be alive, an "ALIVE"
       message is written to the log, it is a timestamp and is written, by
       default, after 15 minutes of inactivity. Also, if output from erlang is
       logged but it's been more than 5 minutes (default) since last time we
       got anything from erlang, a timestamp is written in the log. The
       "ALIVE" messages look like this:

             ===== ALIVE <date-time-string>


       while the other timestamps look like this:

             ===== <date-time-string>


       The _d_a_t_e_-_t_i_m_e_-_s_t_r_i_n_g is the date and time the message is written,
       default in local time (can be changed to GMT if one wants to) and is
       formatted with the ANSI-C function _s_t_r_f_t_i_m_e using the format string _%_a
       _%_b _%_e _%_T _%_Z _%_Y, which produces messages on the line of _=_=_=_=_= _A_L_I_V_E _T_h_u
       _M_a_y _1_5 _1_0_:_1_3_:_3_6 _M_E_S_T _2_0_0_3, this can be changed, see below.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The following environment variables are recognized by run_erl and
       change the logging behavior. Also see the notes above to get more info
       on how the log behaves.

         RRUUNN__EERRLL__LLOOGG__AALLIIVVEE__MMIINNUUTTEESS::
           How long to wait for output (in minutes) before writing an "ALIVE"
           message to the log. Default is 15, can never be less than 1.

         RRUUNN__EERRLL__LLOOGG__AACCTTIIVVIITTYY__MMIINNUUTTEESS::
           How long erlang need to be inactive before output will be preceded
           with a timestamp. Default is RUN_ERL_LOG_ALIVE_MINUTES div 3, but
           never less than 1.

         RRUUNN__EERRLL__LLOOGG__AALLIIVVEE__FFOORRMMAATT::
           Specifies another format string to be used in the strftime C
           library call. i.e specifying this to _"_%_e_-_%_b_-_%_Y_, _%_T _%_Z_" will give
           log messages with timestamps looking like _1_5_-_M_a_y_-_2_0_0_3_, _1_0_:_2_3_:_0_4 _M_E_T
           etc. See the documentation for the C library function strftime for
           more information. Default is _"_%_a _%_b _%_e _%_T _%_Z _%_Y_".

         RRUUNN__EERRLL__LLOOGG__AALLIIVVEE__IINN__UUTTCC::
           If set to anything else than "0", it will make all times displayed
           by run_erl to be in UTC (GMT,CET,MET, without DST), rather than in
           local time. This does not affect data coming from erlang, only the
           logs output directly by run_erl. The application _s_a_s_l can be
           modified accordingly by setting the erlang application variable
           _u_t_c___l_o_g to _t_r_u_e.

         RRUUNN__EERRLL__LLOOGG__GGEENNEERRAATTIIOONNSS::
           Controls the number of log files written before older files are
           being reused. Default is 5, minimum is 2, maximum is 1000.

         RRUUNN__EERRLL__LLOOGG__MMAAXXSSIIZZEE::
           The size (in bytes) of a log file before switching to a new log
           file. Default is 100000, minimum is 1000 and maximum is
           approximately 2^30.

         RRUUNN__EERRLL__DDIISSAABBLLEE__FFLLOOWWCCNNTTRRLL::
           If defined, disables input and output flow control for the pty
           opend by run_erl. Useful if you want to remove any risk of
           accidentally blocking the flow control by hit Ctrl-S (instead of
           Ctrl-D to detach). Which may result in blocking of the entire beam
           process and in the case of running heart as supervisor even the
           heart process will be blocked when writing log message to terminal.
           Leaving the heart process unable to do its work.

SSEEEE AALLSSOO
       start(1), start_erl(1)



Ericsson AB                       erts 5.9.2                        run_erl(1)
