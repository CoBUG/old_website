escript(1)                       User Commands                      escript(1)



NNAAMMEE
       escript - Erlang scripting support

DDEESSCCRRIIPPTTIIOONN
       _e_s_c_r_i_p_t provides support for running short Erlang programs without
       having to compile them first and an easy way to retrieve the command
       line arguments.

EEXXPPOORRTTSS
       ssccrriipptt--nnaammee ssccrriipptt--aarrgg11 ssccrriipptt--aarrgg22......
       eessccrriipptt eessccrriipptt--ffllaaggss ssccrriipptt--nnaammee ssccrriipptt--aarrgg11 ssccrriipptt--aarrgg22......

              _e_s_c_r_i_p_t runs a script written in Erlang.

              Here follows an example.

              $ cat factorial
              #!/usr/bin/env escript
              %% -*- erlang -*-
              %%! -smp enable -sname factorial -mnesia debug verbose
              main([String]) ->
                  try
                      N = list_to_integer(String),
                      F = fac(N),
                      io:format("factorial ~w = ~w\n", [N,F])
                  catch
                      _:_ ->
                          usage()
                  end;
              main(_) ->
                  usage().

              usage() ->
                  io:format("usage: factorial integer\n"),
                  halt(1).

              fac(0) -> 1;
              fac(N) -> N * fac(N-1).
              $ factorial 5
              factorial 5 = 120
              $ factorial
              usage: factorial integer
              $ factorial five
              usage: factorial integer

              The header of the Erlang script in the example differs from a
              normal Erlang module. The first line is intended to be the
              interpreter line, which invokes _e_s_c_r_i_p_t. However if you invoke
              the _e_s_c_r_i_p_t like this

              $ escript factorial 5

              the contents of the first line does not matter, but it cannot
              contain Erlang code as it will be ignored.

              The second line in the example, contains an optional directive
              to the _E_m_a_c_s editor which causes it to enter the major mode for
              editing Erlang source files. If the directive is present it must
              be located on the second line.

              On the third line (or second line depending on the presence of
              the Emacs directive), it is possible to give arguments to the
              emulator, such as

              %%! -smp enable -sname factorial -mnesia debug verbose

              Such an argument line must start with _%_%_! and the rest of the
              line will interpreted as arguments to the emulator.

              If you know the location of the _e_s_c_r_i_p_t executable, the first
              line can directly give the path to _e_s_c_r_i_p_t. For instance:

              #!/usr/local/bin/escript

              As any other kind of scripts, Erlang scripts will not work on
              Unix platforms if the execution bit for the script file is not
              set. (Use _c_h_m_o_d _+_x _s_c_r_i_p_t_-_n_a_m_e to turn on the execution bit.)

              The rest of the Erlang script file may either contain Erlang
              _s_o_u_r_c_e _c_o_d_e, an _i_n_l_i_n_e_d _b_e_a_m _f_i_l_e or an _i_n_l_i_n_e_d _a_r_c_h_i_v_e _f_i_l_e.

              An Erlang script file must always contain the function _m_a_i_n_/_1.
              When the script is run, the _m_a_i_n_/_1 function will be called with
              a list of strings representing the arguments given to the script
              (not changed or interpreted in any way).

              If the _m_a_i_n_/_1 function in the script returns successfully, the
              exit status for the script will be 0. If an exception is
              generated during execution, a short message will be printed and
              the script terminated with exit status 127.

              To return your own non-zero exit code, call _h_a_l_t_(_E_x_i_t_C_o_d_e_); for
              instance:

              halt(1).

              Call eessccrriipptt::ssccrriipptt__nnaammee(()) from your to script to retrieve the
              pathname of the script (the pathname is usually, but not always,
              absolute).

              If the file contains source code (as in the example above), it
              will be processed by the preprocessor _e_p_p. This means that you
              for example may use pre-defined macros (such as _?_M_O_D_U_L_E) as well
              as include directives like the _-_i_n_c_l_u_d_e___l_i_b directive. For
              instance, use

              -include_lib("kernel/include/file.hrl").

              to include the record definitions for the records used by the
              _f_i_l_e_:_r_e_a_d___l_i_n_k___i_n_f_o_/_1 function.

              The script will be checked for syntactic and semantic
              correctness before being run. If there are warnings (such as
              unused variables), they will be printed and the script will
              still be run. If there are errors, they will be printed and the
              script will not be run and its exit status will be 127.

              Both the module declaration and the export declaration of the
              _m_a_i_n_/_1 function are optional.

              By default, the script will be interpreted. You can force it to
              be compiled by including the following line somewhere in the
              script file:

              -mode(compile).

              Execution of interpreted code is slower than compiled code. If
              much of the execution takes place in interpreted code it may be
              worthwhile to compile it, even though the compilation itself
              will take a little while. It is also possible to supply _n_a_t_i_v_e
              instead of compile, this will compile the script using the
              native flag, again depending on the characteristics of the
              escript this could or could not be worth while.

              As mentioned earlier, it is possible to have a script which
              contains precompiled _b_e_a_m code. In a precompiled script, the
              interpretation of the script header is exactly the same as in a
              script containing source code. That means that you can make a
              _b_e_a_m file executable by prepending the file with the lines
              starting with _#_! and _%_%_! mentioned above. In a precompiled
              script, the function _m_a_i_n_/_1 must be exported.

              As yet another option it is possible to have an entire Erlang
              archive in the script. In a archive script, the interpretation
              of the script header is exactly the same as in a script
              containing source code. That means that you can make an archive
              file executable by prepending the file with the lines starting
              with _#_! and _%_%_! mentioned above. In an archive script, the
              function _m_a_i_n_/_1 must be exported. By default the _m_a_i_n_/_1 function
              in the module with the same name as the basename of the _e_s_c_r_i_p_t
              file will be invoked. This behavior can be overridden by setting
              the flag _-_e_s_c_r_i_p_t _m_a_i_n _M_o_d_u_l_e as one of the emulator flags. The
              _M_o_d_u_l_e must be the name of a module which has an exported _m_a_i_n_/_1
              function. See ccooddee((33)) for more information about archives and
              code loading.

              In many cases it is very convenient to have a header in the
              escript, especially on Unix platforms. But the header is in fact
              optional. This means that you directly can "execute" an Erlang
              module, beam file or archive file without adding any header to
              them. But then you have to invoke the script like this:

              $ escript factorial.erl 5
              factorial 5 = 120
              $ escript factorial.beam 5
              factorial 5 = 120
              $ escript factorial.zip 5
              factorial 5 = 120


       eessccrriipptt::ccrreeaattee((FFiilleeOOrrBBiinn,, SSeeccttiioonnss)) -->> ookk || {{ookk,, bbiinnaarryy(())}} || {{eerrrroorr,,
       tteerrmm(())}}

              Types:

                 FileOrBin = filename() | 'binary'
                 Sections = [Header] Body | Body
                 Header = shebang | {shebang, Shebang} | comment | {comment,
                 Comment} | {emu_args, EmuArgs}
                 Shebang = string() | 'default' | 'undefined'
                 Comment = string() | 'default' | 'undefined'
                 EmuArgs = string() | 'undefined'
                 Body = {source, SourceCode} | {beam, BeamCode} | {archive,
                 ZipArchive}
                 SourceCode = BeamCode = ZipArchive = binary()

              The _c_r_e_a_t_e_/_2 function creates an escript from a list of
              sections. The sections can be given in any order. An escript
              begins with an optional _H_e_a_d_e_r followed by a mandatory _B_o_d_y. If
              the header is present, it does always begin with a _s_h_e_b_a_n_g,
              possibly followed by a _c_o_m_m_e_n_t and _e_m_u___a_r_g_s. The _s_h_e_b_a_n_g
              defaults to _"_/_u_s_r_/_b_i_n_/_e_n_v _e_s_c_r_i_p_t_". The comment defaults to
              _"_T_h_i_s _i_s _a_n _-_*_- _e_r_l_a_n_g _-_*_- _f_i_l_e_". The created escript can either
              be returned as a binary or written to file.

              As an example of how the function can be used, we create an
              interpreted escript which uses emu_args to set some emulator
              flag. In this case it happens to disable the smp_support. We do
              also extract the different sections from the newly created
              script:

              > Source = "%% Demo\nmain(_Args) ->\n io:format(erlang:system_info(smp_support)).\n".
              "%% Demo\nmain(_Args) ->\n    io:format(erlang:system_info(smp_support)).\n"
              > io:format("~s\n", [Source]).
              %% Demo
              main(_Args) ->
                  io:format(erlang:system_info(smp_support)).

              ok
              > {ok, Bin} = escript:create(binary, [shebang, comment, {emu_args, "-smp disable"}, {source, list_to_binary(Source)}]).
              {ok,<<"#!/usr/bin/env escript\n%% This is an -*- erlang -*- file\n%%!-smp disabl"...>>}
              > file:write_file("demo.escript", Bin).
              ok
              > os:cmd("escript demo.escript").
              "false"
              > escript:extract("demo.escript", []).
              {ok,[{shebang,default}, {comment,default}, {emu_args,"-smp disable"},
                   {source,<<"%% Demo\nmain(_Args) ->\n    io:format(erlang:system_info(smp_su"...>>}]}


              An escript without header can be created like this:

              > file:write_file("demo.erl", ["%% demo.erl\n-module(demo).\n-export([main/1]).\n\n", Source]).
              ok
              > {ok, _, BeamCode} = compile:file("demo.erl", [binary, debug_info]).
              {ok,demo,
                  <<70,79,82,49,0,0,2,208,66,69,65,77,65,116,111,109,0,0,0,
                    79,0,0,0,9,4,100,...>>}
              > escript:create("demo.beam", [{beam, BeamCode}]).
              ok
              > escript:extract("demo.beam", []).
              {ok,[{shebang,undefined}, {comment,undefined}, {emu_args,undefined},
                   {beam,<<70,79,82,49,0,0,3,68,66,69,65,77,65,116,
                           111,109,0,0,0,83,0,0,0,9,...>>}]}
              > os:cmd("escript demo.beam").
              "true"


              Here we create an archive script containing both Erlang code as
              well as beam code. Then we iterate over all files in the archive
              and collect their contents and some info about them.

              > {ok, SourceCode} = file:read_file("demo.erl").
              {ok,<<"%% demo.erl\n-module(demo).\n-export([main/1]).\n\n%% Demo\nmain(_Arg"...>>}
              > escript:create("demo.escript", [shebang, {archive, [{"demo.erl", SourceCode}, {"demo.beam", BeamCode}], []}]).
              ok
              > {ok, [{shebang,default}, {comment,undefined}, {emu_args,undefined}, {archive, ArchiveBin}]} = escript:extract("demo.escript", []).
              {ok,[{shebang,default}, {comment,undefined}, {emu_args,undefined},
                   {{archive,<<80,75,3,4,20,0,0,0,8,0,118,7,98,60,105,
                              152,61,93,107,0,0,0,118,0,...>>}]}
              > file:write_file("demo.zip", ArchiveBin).
              ok
              > zip:foldl(fun(N, I, B, A) -> [{N, I(), B()} | A] end, [], "demo.zip").
              {ok,[{"demo.beam",
                    {file_info,748,regular,read_write,
                               {{2010,3,2},{0,59,22}},
                               {{2010,3,2},{0,59,22}},
                               {{2010,3,2},{0,59,22}},
                               54,1,0,0,0,0,0},
                    <<70,79,82,49,0,0,2,228,66,69,65,77,65,116,111,109,0,0,0,
                      83,0,0,...>>},
                   {"demo.erl",
                    {file_info,118,regular,read_write,
                               {{2010,3,2},{0,59,22}},
                               {{2010,3,2},{0,59,22}},
                               {{2010,3,2},{0,59,22}},
                               54,1,0,0,0,0,0},
                    <<"%% demo.erl\n-module(demo).\n-export([main/1]).\n\n%% Demo\nmain(_Arg"...>>}]}

       eessccrriipptt::eexxttrraacctt((FFiillee,, OOppttiioonnss)) -->> {{ookk,, SSeeccttiioonnss}} || {{eerrrroorr,, tteerrmm(())}}

              Types:

                 File = filename()
                 Options = [] | [compile_source]
                 Sections = Headers Body
                 Headers = {shebang, Shebang} {comment, Comment} {emu_args,
                 EmuArgs}
                 Shebang = string() | 'default' | 'undefined'
                 Comment = string() | 'default' | 'undefined'
                 EmuArgs = string() | 'undefined'
                 Body = {source, SourceCode} | {source, BeamCode} | {beam,
                 BeamCode} | {archive, ZipArchive}
                 SourceCode = BeamCode = ZipArchive = binary()

              The _e_x_t_r_a_c_t_/_2 function parses an escript and extracts its
              sections. This is the reverse of _c_r_e_a_t_e_/_2.

              All sections are returned even if they do not exist in the
              escript. If a particular section happens to have the same value
              as the default value, the extracted value is set to the atom
              _d_e_f_a_u_l_t. If a section is missing, the extracted value is set to
              the atom _u_n_d_e_f_i_n_e_d.

              The _c_o_m_p_i_l_e___s_o_u_r_c_e option only affects the result if the escript
              contains _s_o_u_r_c_e code. In that case the Erlang code is
              automatically compiled and _{_s_o_u_r_c_e_, _B_e_a_m_C_o_d_e_} is returned
              instead of _{_s_o_u_r_c_e_, _S_o_u_r_c_e_C_o_d_e_}.

              > escript:create("demo.escript", [shebang, {archive, [{"demo.erl", SourceCode}, {"demo.beam", BeamCode}], []}]).
              ok
              > {ok, [{shebang,default}, {comment,undefined}, {emu_args,undefined}, {archive, ArchiveBin}]} = escript:extract("demo.escript", []).
              {ok,[{{archive,<<80,75,3,4,20,0,0,0,8,0,118,7,98,60,105,
                              152,61,93,107,0,0,0,118,0,...>>}
                   {emu_args,undefined}]}


       eessccrriipptt::ssccrriipptt__nnaammee(()) -->> FFiillee

              Types:

                 File = filename()

              The _s_c_r_i_p_t___n_a_m_e_/_0 function returns the name of the escript being
              executed. If the function is invoked outside the context of an
              escript, the behavior is undefined.

OOPPTTIIOONNSS AACCCCEEPPTTEEDD BBYY EESSCCRRIIPPTT
         --cc::
           Compile the escript regardless of the value of the mode attribute.

         --dd::
           Debug the escript. Starts the debugger, loads the module containing
           the _m_a_i_n_/_1 function into the debugger, sets a breakpoint in _m_a_i_n_/_1
           and invokes _m_a_i_n_/_1. If the module is precompiled, it must be
           explicitly compiled with the _d_e_b_u_g___i_n_f_o option.

         --ii::
           Interpret the escript regardless of the value of the mode
           attribute.

         --ss::
           Only perform a syntactic and semantic check of the script file.
           Warnings and errors (if any) are written to the standard output,
           but the script will not be run. The exit status will be 0 if there
           were no errors, and 127 otherwise.

         --nn::
           Compile the escript using the +native flag.



Ericsson AB                       erts 5.9.2                        escript(1)
