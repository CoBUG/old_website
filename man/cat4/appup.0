appup(5)                             Files                            appup(5)



NNAAMMEE
       appup - Application upgrade file.

DDEESSCCRRIIPPTTIIOONN
       The _a_p_p_l_i_c_a_t_i_o_n _u_p_g_r_a_d_e _f_i_l_e defines how an application is upgraded or
       downgraded in a running system.

       This file is used by the functions in _s_y_s_t_o_o_l_s when generating a
       release upgrade file _r_e_l_u_p.

FFIILLEE SSYYNNTTAAXX
       The application upgrade file should be called _A_p_p_l_i_c_a_t_i_o_n_._a_p_p_u_p where
       _A_p_p_l_i_c_a_t_i_o_n is the name of the application. The file should be located
       in the _e_b_i_n directory for the application.

       The _._a_p_p_u_p file contains one single Erlang term, which defines the
       instructions used to upgrade or downgrade the application. The file has
       the following syntax:

       {Vsn,
         [{UpFromVsn, Instructions}, ...],
         [{DownToVsn, Instructions}, ...]}.


         * _V_s_n _= _s_t_r_i_n_g_(_) is the current version of the application.

         * _U_p_F_r_o_m_V_s_n _= _s_t_r_i_n_g_(_) _| _b_i_n_a_r_y_(_) is an earlier version of the
           application to upgrade from. If it is a string, it will be
           interpreted as a specific version number. If it is a binary, it
           will be interpreted as a regular expression which can match
           multiple version numbers.

         * _D_o_w_n_T_o_V_s_n _= _s_t_r_i_n_g_(_) _| _b_i_n_a_r_y_(_) is an earlier version of the
           application to downgrade to. If it is a string, it will be
           interpreted as a specific version number. If it is a binary, it
           will be interpreted as a regular expression which can match
           multiple version numbers.

         * _I_n_s_t_r_u_c_t_i_o_n_s is a list of _r_e_l_e_a_s_e _u_p_g_r_a_d_e _i_n_s_t_r_u_c_t_i_o_n_s, see below.
           It is recommended to use high-level instructions only. These are
           automatically translated to low-level instructions by _s_y_s_t_o_o_l_s when
           creating the _r_e_l_u_p file.

       In order to avoid duplication of upgrade instructions it is allowed to
       use regular expressions to specify the _U_p_F_r_o_m_V_s_n and _D_o_w_n_T_o_V_s_n. To be
       considered a regular expression, the version identifier must be
       specified as a binary, e.g.

       <<"2\\.1\\.[0-9]+">>

       will match all versions _2_._1_._x, where x is any number.

RREELLEEAASSEE UUPPGGRRAADDEE IINNSSTTRRUUCCTTIIOONNSS
       Release upgrade instructions are interpreted by the release handler
       when an upgrade or downgrade is made. For more information about
       release handling, refer to _O_T_P _D_e_s_i_g_n _P_r_i_n_c_i_p_l_e_s.

       A process is said to _u_s_e a module _M_o_d, if _M_o_d is listed in the _M_o_d_u_l_e_s
       part of the child specification used to start the process, see
       _s_u_p_e_r_v_i_s_o_r_(_3_). In the case of gen_event, an event manager process is
       said to use _M_o_d if _M_o_d is an installed event handler.

       _H_i_g_h_-_l_e_v_e_l _i_n_s_t_r_u_c_t_i_o_n_s

       {update, Mod}
       {update, Mod, supervisor}
       {update, Mod, Change}
       {update, Mod, DepMods}
       {update, Mod, Change, DepMods}
       {update, Mod, Change, PrePurge, PostPurge, DepMods}
       {update, Mod, Timeout, Change, PrePurge, PostPurge, DepMods}
       {update, Mod, ModType, Timeout, Change, PrePurge, PostPurge, DepMods}
         Mod = atom()
         ModType = static | dynamic
         Timeout = int()>0 | default | infinity
         Change = soft | {advanced,Extra}
           Extra = term()
         PrePurge = PostPurge = soft_purge | brutal_purge
         DepMods = [Mod]


       Synchronized code replacement of processes using the module _M_o_d. All
       those processes are suspended using _s_y_s_:_s_u_s_p_e_n_d, the new version of the
       module is loaded and then the processes are resumed using _s_y_s_:_r_e_s_u_m_e.

       _C_h_a_n_g_e defaults to _s_o_f_t and defines the type of code change. If it is
       set to _{_a_d_v_a_n_c_e_d_,_E_x_t_r_a_}, processes implemented using gen_server,
       gen_fsm or gen_event will transform their internal state by calling the
       callback function _c_o_d_e___c_h_a_n_g_e. Special processes will call the callback
       function _s_y_s_t_e_m___c_o_d_e___c_h_a_n_g_e_/_4. In both cases, the term _E_x_t_r_a is passed
       as an argument to the callback function.

       _P_r_e_P_u_r_g_e defaults to _b_r_u_t_a_l___p_u_r_g_e and controls what action to take with
       processes that are executing old code before loading the new version of
       the module. If the value is _b_r_u_t_a_l___p_u_r_g_e, the processes are killed. If
       the value is _s_o_f_t___p_u_r_g_e, _r_e_l_e_a_s_e___h_a_n_d_l_e_r_:_i_n_s_t_a_l_l___r_e_l_e_a_s_e_/_1 returns
       _{_e_r_r_o_r_,_{_o_l_d___p_r_o_c_e_s_s_e_s_,_M_o_d_}_}.

       _P_o_s_t_P_u_r_g_e defaults to _b_r_u_t_a_l___p_u_r_g_e and controls what action to take
       with processes that are executing old code when the new version of the
       module has been loaded. If the value is _b_r_u_t_a_l___p_u_r_g_e, the code is
       purged when the release is made permanent and the processes are killed.
       If the value is _s_o_f_t___p_u_r_g_e, the release handler will purge the old code
       when no remaining processes execute the code.

       _D_e_p_M_o_d_s defaults to [] and defines which other modules _M_o_d is dependent
       on. In _r_e_l_u_p, instructions for suspending processes using _M_o_d will come
       before instructions for suspending processes using modules in _D_e_p_M_o_d_s
       when upgrading, and vice versa when downgrading. In case of circular
       dependencies, the order of the instructions in the _a_p_p_u_p script is
       kept.

       _T_i_m_e_o_u_t defines the timeout when suspending processes. If no value or
       _d_e_f_a_u_l_t is given, the default value for _s_y_s_:_s_u_s_p_e_n_d is used.

       _M_o_d_T_y_p_e defaults to _d_y_n_a_m_i_c and specifies if the code is "dynamic",
       that is if a process using the module does spontaneously switch to new
       code, or if it is "static". When doing an advanced update and
       upgrading, the new version of a dynamic module is loaded before the
       process is asked to change code. When downgrading, the process is asked
       to change code before loading the new version. For static modules, the
       new version is loaded before the process is asked to change code, both
       in the case of upgrading and downgrading. Callback modules are dynamic.

       _u_p_d_a_t_e with argument _s_u_p_e_r_v_i_s_o_r is used when changing the start
       specification of a supervisor.

       {load_module, Mod}
       {load_module, Mod, DepMods}
       {load_module, Mod, PrePurge, PostPurge, DepMods}
         Mod = atom()
         PrePurge = PostPurge = soft_purge | brutal_purge
         DepMods = [Mod]


       Simple code replacement of the module _M_o_d.

       See _u_p_d_a_t_e above for a description of _P_r_e_P_u_r_g_e and _P_o_s_t_P_u_r_g_e.

       _D_e_p_M_o_d_s defaults to [] and defines which other modules _M_o_d is dependent
       on. In _r_e_l_u_p, instructions for loading these modules will come before
       the instruction for loading _M_o_d when upgrading, and vice versa when
       downgrading.

       {add_module, Mod}
         Mod = atom()


       Loads a new module _M_o_d.

       {delete_module, Mod}
         Mod = atom()


       Deletes a module _M_o_d using the low-level instructions _r_e_m_o_v_e and _p_u_r_g_e.

       {add_application, Application}
       {add_application, Application, Type}
         Application = atom()
         Type = permanent | transient | temporary | load | none


       Adding an application means that the modules defined by the _m_o_d_u_l_e_s key
       in the _._a_p_p file are loaded using _a_d_d___m_o_d_u_l_e.

       _T_y_p_e defaults to _p_e_r_m_a_n_e_n_t and specifies the start type of the
       application. If _T_y_p_e _= _p_e_r_m_a_n_e_n_t _| _t_r_a_n_s_i_e_n_t _| _t_e_m_p_o_r_a_r_y, the
       application will be loaded and started in the corresponding way, see
       _a_p_p_l_i_c_a_t_i_o_n_(_3_). If _T_y_p_e _= _l_o_a_d, the application will only be loaded. If
       _T_y_p_e _= _n_o_n_e, the application will be neither loaded nor started,
       although the code for its modules will be loaded.

       {remove_application, Application}
         Application = atom()


       Removing an application means that the application is stopped, the
       modules are unloaded using _d_e_l_e_t_e___m_o_d_u_l_e and then the application
       specification is unloaded from the application controller.

       {restart_application, Application}
         Application = atom()


       Restarting an application means that the application is stopped and
       then started again similar to using the instructions _r_e_m_o_v_e___a_p_p_l_i_c_a_t_i_o_n
       and _a_d_d___a_p_p_l_i_c_a_t_i_o_n in sequence.

       _L_o_w_-_l_e_v_e_l _i_n_s_t_r_u_c_t_i_o_n_s

       {load_object_code, {App, Vsn, [Mod]}}
         App = Mod = atom()
         Vsn = string()


       Reads each _M_o_d from the directory _A_p_p_-_V_s_n_/_e_b_i_n as a binary. It does not
       load the modules. The instruction should be placed first in the script
       in order to read all new code from file to make the suspend-load-resume
       cycle less time consuming. After this instruction has been executed,
       the code server with the new version of _A_p_p.

       point_of_no_return


       If a crash occurs after this instruction, the system cannot recover and
       is restarted from the old version of the release. The instruction must
       only occur once in a script. It should be placed after all
       _l_o_a_d___o_b_j_e_c_t___c_o_d_e instructions.

       {load, {Mod, PrePurge, PostPurge}}
         Mod = atom()
         PrePurge = PostPurge = soft_purge | brutal_purge


       Before this instruction occurs, _M_o_d must have been loaded using
       _l_o_a_d___o_b_j_e_c_t___c_o_d_e. This instruction loads the module. _P_r_e_P_u_r_g_e is
       ignored. See the high-level instruction _u_p_d_a_t_e for a description of
       _P_o_s_t_P_u_r_g_e.

       {remove, {Mod, PrePurge, PostPurge}}
         Mod = atom()
         PrePurge = PostPurge = soft_purge | brutal_purge


       Makes the current version of _M_o_d old. _P_r_e_P_u_r_g_e is ignored. See the
       high-level instruction _u_p_d_a_t_e for a description of _P_o_s_t_P_u_r_g_e.

       {purge, [Mod]}
         Mod = atom()


       Purges each module _M_o_d, that is removes the old code. Note that any
       process executing purged code is killed.

       {suspend, [Mod | {Mod, Timeout}]}
         Mod = atom()
         Timeout = int()>0 | default | infinity


       Tries to suspend all processes using a module _M_o_d. If a process does
       not respond, it is ignored. This may cause the process to die, either
       because it crashes when it spontaneously switches to new code, or as a
       result of a purge operation. If no _T_i_m_e_o_u_t is specified or _d_e_f_a_u_l_t is
       given, the default value for _s_y_s_:_s_u_s_p_e_n_d is used.

       {resume, [Mod]}
         Mod = atom()


       Resumes all suspended processes using a module _M_o_d.

       {code_change, [{Mod, Extra}]}
       {code_change, Mode, [{Mod, Extra}]}
         Mod = atom()
         Mode = up | down
         Extra = term()


       _M_o_d_e defaults to _u_p and specifies if it is an upgrade or downgrade.

       This instruction sends a _c_o_d_e___c_h_a_n_g_e system message to all processes
       using a module _M_o_d by calling the function _s_y_s_:_c_h_a_n_g_e___c_o_d_e, passing the
       term _E_x_t_r_a as argument.

       {stop, [Mod]}
         Mod = atom()


       Stops all processes using a module _M_o_d by calling
       _s_u_p_e_r_v_i_s_o_r_:_t_e_r_m_i_n_a_t_e___c_h_i_l_d_/_2. The instruction is useful when the
       simplest way to change code is to stop and restart the processes which
       run the code.

       {start, [Mod]}
         Mod = atom()


       Starts all stopped processes using a module _M_o_d by calling
       _s_u_p_e_r_v_i_s_o_r_:_r_e_s_t_a_r_t___c_h_i_l_d_/_2.

       {sync_nodes, Id, [Node]}
       {sync_nodes, Id, {M, F, A}}
         Id = term()
         Node = node()
         M = F = atom()
         A = [term()]


       _a_p_p_l_y_(_M_, _F_, _A_) must return a list of nodes.

       The instruction synchronizes the release installation with other nodes.
       Each _N_o_d_e must evaluate this command, with the same _I_d. The local node
       waits for all other nodes to evaluate the instruction before execution
       continues. In case a node goes down, it is considered to be an
       unrecoverable error, and the local node is restarted from the old
       release. There is no timeout for this instruction, which means that it
       may hang forever.

       {apply, {M, F, A}}
         M = F = atom()
         A = [term()]


       Evaluates _a_p_p_l_y_(_M_, _F_, _A_). If the instruction appears before the
       _p_o_i_n_t___o_f___n_o___r_e_t_u_r_n instruction, a failure is caught.
       _r_e_l_e_a_s_e___h_a_n_d_l_e_r_:_i_n_s_t_a_l_l___r_e_l_e_a_s_e_/_1 then returns _{_e_r_r_o_r_,_{_'_E_X_I_T_'_,_R_e_a_s_o_n_}_},
       unless _{_e_r_r_o_r_,_E_r_r_o_r_} is thrown or returned. Then it returns
       _{_e_r_r_o_r_,_E_r_r_o_r_}.

       If the instruction appears after the _p_o_i_n_t___o_f___n_o___r_e_t_u_r_n instruction,
       and the function call fails, the system is restarted.

       restart_new_emulator


       This instruction is used when erts, kernel, stdlib or sasl is upgraded.
       It shuts down the current emulator and starts a new one. All processes
       are terminated gracefully, and the new version of erts, kernel, stdlib
       and sasl are used when the emulator restarts. Only one
       _r_e_s_t_a_r_t___n_e_w___e_m_u_l_a_t_o_r instruction is allowed in the relup, and it shall
       be placed first. ssyyssttoooollss::mmaakkee__rreelluupp33,,44 will ensure this when the relup
       is generated. The rest of the relup script is executed after the
       restart as a part of the boot script.

       An info report will be written when the upgrade is completed. To
       programatically find out if the upgrade is complete, call
       rreelleeaassee__hhaannddlleerr::wwhhiicchh__rreelleeaasseess and check if the expected release has
       status _c_u_r_r_e_n_t.

       The new release must still be made permanent after the upgrade is
       completed. Otherwise, the old emulator is started in case of an
       emulator restart.

       restart_emulator


       This instruction is similar to _r_e_s_t_a_r_t___n_e_w___e_m_u_l_a_t_o_r, except it shall be
       placed at the end of the relup script. It is not related to an upgrade
       of the emulator or the core applications, but can be used by any
       application when a complete reboot of the system is reqiured. When
       generating the relup, ssyyssttoooollss::mmaakkee__rreelluupp//33,,44 ensures that there is
       only one _r_e_s_t_a_r_t___e_m_u_l_a_t_o_r instruction and that it is the last
       instruction of the relup.

SSEEEE AALLSSOO
       rreelluupp((44)), rreelleeaassee__hhaannddlleerr((33)), supervisor(3), ssyyssttoooollss((33))



Ericsson AB                       sasl 2.2.1                          appup(5)
