CosNotifyChannelAdmin_SequenEcrCeloPasrnNogoxtyMiPofudyluCllhSeaunpDnpeelfliiAendrim(ti3in)o_nSequenceProxyPullSupplier(3)



NNAAMMEE
       CosNotifyChannelAdmin_SequenceProxyPullSupplier - This module
       implements the OMG  CosNotifyChannelAdmin::SequenceProxyPullSupplier
       interface.

DDEESSCCRRIIPPTTIIOONN
       To get access to the record definitions for the structures use:
       _-_i_n_c_l_u_d_e___l_i_b_(_"_c_o_s_N_o_t_i_f_i_c_a_t_i_o_n_/_i_n_c_l_u_d_e_/_*_._h_r_l_"_)_.

       This module also exports the functions described in:

         * CCoossNNoottiiffyyCCoommmm__NNoottiiffyySSuubbssccrriibbee

         * CCoossNNoottiiffiiccaattiioonn__QQooSSAAddmmiinn

         * CCoossNNoottiiffyyFFiilltteerr__FFiilltteerrAAddmmiinn

         * CCoossNNoottiiffyyCChhaannnneellAAddmmiinn__PPrrooxxyySSuupppplliieerr

EEXXPPOORRTTSS
       ccoonnnneecctt__sseeqquueennccee__ppuullll__ccoonnssuummeerr((SSeeqquueenncceePPrrooxxyyPPuullllSSuupppplliieerr,, PPuullllCCoonnssuummeerr))
       -->> RReeppllyy

              Types:

                 SequenceProxyPullSupplier = #objref
                 PullConsumer = #objref
                 Reply = ok | {'EXCEPTION',
                 #'CosEventChannelAdmin_AlreadyConnected'{}}

              This operation connects a _P_u_l_l_C_o_n_s_u_m_e_r to the target object. If
              a connection already exists an exception is raised.

       ppuullll__ssttrruuccttuurreedd__eevveennttss((SSeeqquueenncceePPrrooxxyyPPuullllSSuupppplliieerr,, MMaaxxEEvveennttss)) -->> RReeppllyy

              Types:

                 SequenceProxyPullSupplier = #objref
                 MaxEvents = long()
                 Reply = EventBatch | {'EXCEPTION',
                 #'CosEventChannelAdmin_Disconnected'{}}
                 EventBatch = [StructuredEvent]
                 StructuredEvent = #'CosNotification_StructuredEvent'{header,
                 filterable_data, remainder_of_body}
                 header = EventHeader
                 filterable_data = [#'CosNotification_Property'{name, value}]
                 name = string()
                 value = #any
                 remainder_of_body = #any
                 EventHeader = #'CosNotification_EventHeader'{fixed_header,
                 variable_header}
                 fixed_header = FixedEventHeader
                 variable_header = OptionalHeaderFields
                 FixedEventHeader =
                 #'CosNotification_FixedEventHeader'{event_type, event_name}
                 event_type = EventType
                 event_name = string()
                 EventType = #'CosNotification_EventType'{domain_name,
                 type_name}
                 domain_name = type_name = string()
                 OptionalHeaderFields = [#'CosNotification_Property'{name,
                 value}]

              A client use this operation to pull next event sequence of
              maximum length _M_a_x_E_v_e_n_t_s. This operation is blocking and will
              not reply until the requested amount of events can be delivered
              or the QoS property _P_a_c_i_n_g_I_n_t_e_r_v_a_l is reached. For more
              information see the _U_s_e_r_'_s _G_u_i_d_e.

       ttrryy__ppuullll__ssttrruuccttuurreedd__eevveennttss((SSeeqquueenncceePPrrooxxyyPPuullllSSuupppplliieerr,, MMaaxxEEvveennttss)) -->>
       RReeppllyy

              Types:

                 SequenceProxyPullSupplier = #objref
                 MaxEvents = long()
                 Reply = {EventBatch, HasEvent} | {'EXCEPTION',
                 #'CosEventChannelAdmin_Disconnected'{}}
                 HasEvent = boolean()
                 EventBatch = [StructuredEvent]
                 StructuredEvent = #'CosNotification_StructuredEvent'{header,
                 filterable_data, remainder_of_body}
                 header = EventHeader
                 filterable_data = [#'CosNotification_Property'{name, value}]
                 name = string()
                 value = #any
                 remainder_of_body = #any
                 EventHeader = #'CosNotification_EventHeader'{fixed_header,
                 variable_header}
                 fixed_header = FixedEventHeader
                 variable_header = OptionalHeaderFields
                 FixedEventHeader =
                 #'CosNotification_FixedEventHeader'{event_type, event_name}
                 event_type = EventType
                 event_name = string()
                 EventType = #'CosNotification_EventType'{domain_name,
                 type_name}
                 domain_name = type_name = string()
                 OptionalHeaderFields = [#'CosNotification_Property'{name,
                 value}]

              This operation pulls an event sequence of the maximum length
              _M_a_x_E_v_e_n_t_s, but do not block if the target object have no events
              to forward. The outparameter, _H_a_s_E_v_e_n_t is true if the sequence
              contain any events.

       ddiissccoonnnneecctt__sseeqquueennccee__ppuullll__ssuupppplliieerr((SSeeqquueenncceePPrrooxxyyPPuullllSSuupppplliieerr)) -->> ookk

              Types:

                 SequenceProxyPullSupplier = #objref

              This operation cause the target object to close the connection
              and terminate.



Ericsson AB                 cCoossNNoottiiffiycCahtainonnel1A.d1m.i1n8_SequenceProxyPullSupplier(3)
