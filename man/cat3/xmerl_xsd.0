xmerl_xsd(3)               Erlang Module Definition               xmerl_xsd(3)



NNAAMMEE
       xmerl_xsd - Interface module for XML Schema vlidation.

DDEESSCCRRIIPPTTIIOONN
       Interface module for XML Schema vlidation. It handles the W3.org
       specifications of XML Schema second edition 28 october 2004. For an
       introduction to XML Schema study part 0. An XML structure is validated
       by xmerl_xsd:validate/[2,3].

DDAATTAA TTYYPPEESS
         _g_l_o_b_a_l___s_t_a_t_e_(_):


           The global state of the validator. It is representated by the
           _#_x_s_d___s_t_a_t_e_{_} record.

         _o_p_t_i_o_n___l_i_s_t_(_):


           Options allow to customize the behaviour of the validation.

           Possible options are :

           _{_t_a_b_2_f_i_l_e_,_b_o_o_l_e_a_n_(_)_}:
             Enables saving of abstract structure on file for debugging
             purpose.

           _{_x_s_d_b_a_s_e_,_f_i_l_e_n_a_m_e_(_)_}:
             XSD Base directory.

           _{_f_e_t_c_h___f_u_n_,_F_e_t_c_h_F_u_n_}:
             Call back function to fetch an external resource.

           _{_f_e_t_c_h___p_a_t_h_,_P_a_t_h_L_i_s_t_}:
             PathList is a list of directories to search when fetching files.
             If the file in question is not in the fetch_path, the URI will be
             used as a file name.

           _{_s_t_a_t_e_,_S_t_a_t_e_}:
             It is possible by this option to provide a state with process
             information from an earlier validation.

EEXXPPOORRTTSS
       ffiillee22ssttaattee((FFiilleeNNaammee)) -->> {{ookk,, SSttaattee}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 State = global_state()
                 FileName = filename()

              Reads the schema state with all information of the processed
              schema from a file created with _s_t_a_t_e_2_f_i_l_e_/_[_1_,_2_]. The format of
              this file is internal. The state can then be used validating an
              XML document.

       ffoorrmmaatt__eerrrroorr((LL::::EErrrroorrss)) -->> RReessuulltt

              Types:

                 Errors = error_tuple() | [error_tuple()]
                 Result = string() | [string()]

              Formats error descriptions to human readable strings.

       pprroocceessss__sscchheemmaa((SScchheemmaa)) -->> RReessuulltt

              Equivalent to pprroocceessss__sscchheemmaa((SScchheemmaa,, [[]])).

       pprroocceessss__sscchheemmaa((SScchheemmaa,, OOppttiioonnss)) -->> RReessuulltt

              Types:

                 Schema = filename()
                 Result = {ok, State} | {error, Reason}
                 State = global_state()
                 Reason = [ErrorReason] | ErrorReason
                 Options = option_list()

              Reads the referenced XML schema and checks that it is valid.
              Returns the _g_l_o_b_a_l___s_t_a_t_e_(_) with schema info or an error reason.
              The error reason may be a list of several errors or a single
              error encountered during the processing.

       pprroocceessss__sscchheemmaass((SScchheemmaass)) -->> RReessuulltt

              Equivalent to pprroocceessss__sscchheemmaa((SScchheemmaass,, [[]])).

       pprroocceessss__sscchheemmaass((SScchheemmaass,, OOppttiioonnss)) -->> RReessuulltt

              Types:

                 Schemas = [{NameSpace, filename()} | Schemas] | []
                 Result = {ok, State} | {error, Reason}
                 Reason = [ErrorReason] | ErrorReason
                 Options = option_list()

              Reads the referenced XML schemas and controls they are valid.
              Returns the _g_l_o_b_a_l___s_t_a_t_e_(_) with schema info or an error reason.
              The error reason may be a list of several errors or a single
              error encountered during the processing.

       pprroocceessss__vvaalliiddaattee((SScchheemmaa,, XXmmll::::EElleemmeenntt)) -->> RReessuulltt

              Equivalent to pprroocceessss__vvaalliiddaattee((SScchheemmaa,, XXmmll,, [[]])).

       pprroocceessss__vvaalliiddaattee((SScchheemmaa,, XXmmll::::EElleemmeenntt,, OOppttss::::OOppttiioonnss)) -->> RReessuulltt

              Types:

                 Schema = filename()
                 Element = XmlElement
                 Options = option_list()
                 Result = {ValidXmlElement, State} | {error, Reason}
                 Reason = [ErrorReason] | ErrorReason

              Validates a parsed well-formed XML element towards an XML
              schema.

              Validates in two steps. First it processes the schema, saves the
              type and structure info in an ets table and then validates the
              element towards the schema.

              Usage example:

              _1_>_{_E_,___} _= _x_m_e_r_l___s_c_a_n_:_f_i_l_e_(_"_m_y___X_M_L___d_o_c_u_m_e_n_t_._x_m_l_"_)_.
              _2_>_{_E_2_,___} _= _x_m_e_r_l___x_s_d_:_v_a_l_i_d_a_t_e_(_"_m_y___X_M_L___S_c_h_e_m_a_._x_s_d_"_,_E_)_.

              Observe that E2 may differ from E if for instance there are
              default values defined in _m_y___X_M_L___S_c_h_e_m_a_._x_s_d.

       ssttaattee22ffiillee((SS::::SSttaattee)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Same as state2file(State,SchemaName)

              The name of the saved file is the same as the name of the
              schema, but with _._x_s_s extension.

       ssttaattee22ffiillee((SS::::SSttaattee,, FFiilleeNNaammee)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 State = global_state()
                 FileName = filename()

              Saves the schema state with all information of the processed
              schema in a file. You can provide the file name for the saved
              state. FileName is saved with the _._x_s_s extension added.

       vvaalliiddaattee((XXmmll::::EElleemmeenntt,, SSttaattee)) -->> RReessuulltt

              Equivalent to vvaalliiddaattee((EElleemmeenntt,, SSttaattee,, [[]])).

       vvaalliiddaattee((XXmmll::::EElleemmeenntt,, SSttaattee,, OOppttss::::OOppttiioonnss)) -->> RReessuulltt

              Types:

                 Element = XmlElement
                 Options = option_list()
                 Result = {ValidElement, global_state()} | {error, Reasons}
                 ValidElement = XmlElement
                 State = global_state()
                 Reasons = [ErrorReason] | ErrorReason

              Validates a parsed well-formed XML element (Element).

              A call to validate/2 or validate/3 must provide a well formed
              parsed XML element _#_x_m_l_E_l_e_m_e_n_t_{_} and a State, _g_l_o_b_a_l___s_t_a_t_e_(_),
              which holds necessary information from an already processed
              schema. Thus validate enables reuse of the schema information
              and therefore if one shall validate several times towards the
              same schema it reduces time consumption.

              The result, ValidElement, is the valid element that conforms to
              the post-schema-validation infoset. When the validator finds an
              error it tries to continue and reports a list of all errors
              found. In those cases an unexpected error is found it may cause
              a single error reason.

              Usage example:

              _1_>_{_E_,___} _= _x_m_e_r_l___s_c_a_n_:_f_i_l_e_(_"_m_y___X_M_L___d_o_c_u_m_e_n_t_._x_m_l_"_)_.
              _2_>_{_o_k_,_S_} _= _x_m_e_r_l___x_s_d_:_p_r_o_c_e_s_s___s_c_h_e_m_a_(_"_m_y___X_M_L___S_c_h_e_m_a_._x_s_d_"_)_.
              _3_>_{_E_2_,___} _= _x_m_e_r_l___x_s_d_:_v_a_l_i_d_a_t_e_(_E_,_S_)_.

              Observe that E2 may differ from E if for instance there are
              default values defined in _m_y___X_M_L___S_c_h_e_m_a_._x_s_d.

AAUUTTHHOORRSS
       _<_>



                                  xmerl 1.3.2                     xmerl_xsd(3)
