eprof(3)                   Erlang Module Definition                   eprof(3)



NNAAMMEE
       eprof - A Time Profiling Tool for Erlang

DDEESSCCRRIIPPTTIIOONN
       The module _e_p_r_o_f provides a set of functions for time profiling of
       Erlang programs to find out how the execution time is used. The
       profiling is done using the Erlang trace BIFs. Tracing of local
       function calls for a specified set of processes is enabled when
       profiling is begun, and disabled when profiling is stopped.

       When using Eprof expect a slowdown in program execution.

EEXXPPOORRTTSS
       ssttaarrtt(()) -->> {{ookk,,PPiidd}} || {{eerrrroorr,,RReeaassoonn}}

              Types:

                 Pid = pid()
                 Reason = {already_started,Pid}

              Starts the Eprof server which holds the internal state of the
              collected data.

       ssttaarrtt__pprrooffiilliinngg((RRoooottsseett)) -->> pprrooffiilliinngg || {{eerrrroorr,, RReeaassoonn}}
       ssttaarrtt__pprrooffiilliinngg((RRoooottsseett,,PPaatttteerrnn)) -->> pprrooffiilliinngg || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Rootset = [atom() | pid()]
                 Pattern = {Module, Function, Arity}
                 Module = Function = atom()
                 Arity = integer()
                 Reason = term()

              Starts profiling for the processes in _R_o_o_t_s_e_t (and any new
              processes spawned from them). Information about activity in any
              profiled process is stored in the Eprof database.

              _R_o_o_t_s_e_t is a list of pids and registered names.

              The function returns _p_r_o_f_i_l_i_n_g if tracing could be enabled for
              all processes in _R_o_o_t_s_e_t, or _e_r_r_o_r otherwise.

              A pattern can be selected to narrow the profiling. For instance
              a specific module can be selected, and only the code executed in
              that module will be profiled.

       ssttoopp__pprrooffiilliinngg(()) -->> pprrooffiilliinngg__ssttooppppeedd || pprrooffiilliinngg__aallrreeaaddyy__ssttooppppeedd

              Stops profiling started with _s_t_a_r_t___p_r_o_f_i_l_i_n_g_/_1 or _p_r_o_f_i_l_e_/_1.

       pprrooffiillee((FFuunn)) -->> pprrooffiilliinngg || {{eerrrroorr,, RReeaassoonn}}
       pprrooffiillee((RRoooottsseett)) -->> pprrooffiilliinngg || {{eerrrroorr,, RReeaassoonn}}
       pprrooffiillee((RRoooottsseett,,FFuunn)) -->> {{ookk,, VVaalluuee}} || {{eerrrroorr,,RReeaassoonn}}
       pprrooffiillee((RRoooottsseett,,FFuunn,,PPaatttteerrnn)) -->> {{ookk,, VVaalluuee}} || {{eerrrroorr,, RReeaassoonn}}
       pprrooffiillee((RRoooottsseett,,MMoodduullee,,FFuunnccttiioonn,,AArrggss)) -->> {{ookk,, VVaalluuee}} || {{eerrrroorr,, RReeaassoonn}}
       pprrooffiillee((RRoooottsseett,,MMoodduullee,,FFuunnccttiioonn,,AArrggss,,PPaatttteerrnn)) -->> {{ookk,, VVaalluuee}} || {{eerrrroorr,,
       RReeaassoonn}}

              Types:

                 Rootset = [atom() | pid()]
                 Fun = fun() -> term()
                 Pattern = {Module, Function, Arity}
                 Module = Function = atom()
                 Args = [term()]
                 Arity = integer()
                 Value = Reason = term()

              This function first spawns a process _P which evaluates _F_u_n_(_) or
              _a_p_p_l_y_(_M_o_d_u_l_e_,_F_u_n_c_t_i_o_n_,_A_r_g_s_). Then, it starts profiling for _P and
              the processes in _R_o_o_t_s_e_t (and any new processes spawned from
              them). Information about activity in any profiled process is
              stored in the Eprof database.

              _R_o_o_t_s_e_t is a list of pids and registered names.

              If tracing could be enabled for _P and all processes in _R_o_o_t_s_e_t,
              the function returns _{_o_k_,_V_a_l_u_e_} when _F_u_n_(_)/_a_p_p_l_y returns with
              the value _V_a_l_u_e, or _{_e_r_r_o_r_,_R_e_a_s_o_n_} if _F_u_n_(_)/_a_p_p_l_y fails with
              exit reason _R_e_a_s_o_n. Otherwise it returns _{_e_r_r_o_r_, _R_e_a_s_o_n_}
              immediately.

              The programmer must ensure that the function given as argument
              is truly synchronous and that no work continues after the
              function has returned a value.

       aannaallyyzzee(()) -->> ookk
       aannaallyyzzee((TTyyppee)) -->> ookk
       aannaallyyzzee((TTyyppee,,OOppttiioonnss)) -->> ookk

              Types:

                 Type = procs | total
                 Options = [{filter, Filter} | {sort, Sort}
                 Filter = [{calls, integer()} | {time, float()}]
                 Sort = time | calls | mfa

              Call this function when profiling has been stopped to display
              the results per process, that is:

                * how much time has been used by each process, and

                * in which function calls this time has been spent.

              Call _a_n_a_l_y_z_e with _t_o_t_a_l option when profiling has been stopped
              to display the results per function call, that is in which
              function calls the time has been spent.

              Time is shown as percentage of total time and as absolute time.

       lloogg((FFiillee)) -->> ookk

              Types:

                 File = atom() | string()

              This function ensures that the results displayed by
              _a_n_a_l_y_z_e_/_0_,_1_,_2 are printed both to the file _F_i_l_e and the screen.

       ssttoopp(()) -->> ssttooppppeedd

              Stops the Eprof server.



Ericsson AB                       tools 2.6.8                         eprof(3)
