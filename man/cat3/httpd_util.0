httpd_util(3)              Erlang Module Definition              httpd_util(3)



NNAAMMEE
       httpd_util - Miscellaneous utility functions to be used when
       implementing Erlang Web server API modules.

DDEESSCCRRIIPPTTIIOONN
       This module provides the Erlang Web Server API module programmer with
       miscellaneous utility functions.

EEXXPPOORRTTSS
       ccoonnvveerrtt__rreeqquueesstt__ddaattee((DDaatteeSSttrriinngg)) -->> EErrllDDaattee||bbaadd__ddaattee

              Types:

                 DateString = string()
                 ErlDate = {{Year,Month,Date},{Hour,Min,Sec}}
                 Year = Month = Date = Hour = Min = Sec = integer()

              _c_o_n_v_e_r_t___r_e_q_u_e_s_t___d_a_t_e_/_1 converts _D_a_t_e_S_t_r_i_n_g to the Erlang date
              format. DateString must be in one of the three date formats that
              is defined in the RFC 2616.

       ccrreeaattee__eettaagg((FFiilleeIInnffoo)) -->> EEttaagg

              Types:

                 FileInfo = file_info()
                 Etag = string()

              _c_r_e_a_t_e___e_t_a_g_/_1 calculates the Etag for a file, from its size and
              time for last modification. fileinfo is a record defined in
              _k_e_r_n_e_l_/_i_n_c_l_u_d_e_/_f_i_l_e_._h_r_l

       ddeeccooddee__hheexx((HHeexxVVaalluuee)) -->> DDeeccVVaalluuee

              Types:

                 HexValue = DecValue = string()

              Converts the hexadecimal value _H_e_x_V_a_l_u_e into its decimal
              equivalent (_D_e_c_V_a_l_u_e).

       ddaayy((NNtthhDDaayyOOffWWeeeekk)) -->> DDaayyOOffWWeeeekk

              Types:

                 NthDayOfWeek = 1-7
                 DayOfWeek = string()

              _d_a_y_/_1 converts the day of the week (_N_t_h_D_a_y_O_f_W_e_e_k) as an integer
              (1-7) to an abbreviated string, that is:

              1 = "Mon", 2 = "Tue", ..., 7 = "Sat".

       ffllaattlleennggtthh((NNeesstteeddLLiisstt)) -->> SSiizzee

              Types:

                 NestedList = list()
                 Size = integer()

              _f_l_a_t_l_e_n_g_t_h_/_1 computes the size of the possibly nested list
              _N_e_s_t_e_d_L_i_s_t. Which may contain binaries.

       hheexxlliisstt__ttoo__iinntteeggeerr((HHeexxSSttrriinngg)) -->> NNuummbbeerr

              Types:

                 Number = integer()
                 HexString = string()

              _h_e_x_l_i_s_t___t_o___i_n_t_e_g_e_r Convert the Hexadecimal value of HexString to
              an integer.

       iinntteeggeerr__ttoo__hheexxlliisstt((NNuummbbeerr)) -->> HHeexxSSttrriinngg

              Types:

                 Number = integer()
                 HexString = string()

              _i_n_t_e_g_e_r___t_o___h_e_x_l_i_s_t_/_1 Returns a string that represents the Number
              in a Hexadecimal form.

       llooookkuupp((EETTSSTTaabbllee,,KKeeyy)) -->> RReessuulltt
       llooookkuupp((EETTSSTTaabbllee,,KKeeyy,,UUnnddeeffiinneedd)) -->> RReessuulltt

              Types:

                 ETSTable = ets_table()
                 Key = term()
                 Result = term() | undefined | Undefined
                 Undefined = term()

              _l_o_o_k_u_p extracts _{_K_e_y_,_V_a_l_u_e_} tuples from _E_T_S_T_a_b_l_e and returns the
              _V_a_l_u_e associated with _K_e_y. If _E_T_S_T_a_b_l_e is of type _b_a_g only the
              first _V_a_l_u_e associated with _K_e_y is returned. _l_o_o_k_u_p_/_2 returns
              _u_n_d_e_f_i_n_e_d and _l_o_o_k_u_p_/_3 returns _U_n_d_e_f_i_n_e_d if no _V_a_l_u_e is found.

       llooookkuupp__mmiimmee((CCoonnffiiggDDBB,,SSuuffffiixx))
       llooookkuupp__mmiimmee((CCoonnffiiggDDBB,,SSuuffffiixx,,UUnnddeeffiinneedd)) -->> MMiimmeeTTyyppee

              Types:

                 ConfigDB = ets_table()
                 Suffix = string()
                 MimeType = string() | undefined | Undefined
                 Undefined = term()

              _l_o_o_k_u_p___m_i_m_e returns the mime type associated with a specific
              file suffix as specified in the _m_i_m_e_._t_y_p_e_s file (located in the
              config directory).

       llooookkuupp__mmiimmee__ddeeffaauulltt((CCoonnffiiggDDBB,,SSuuffffiixx))
       llooookkuupp__mmiimmee__ddeeffaauulltt((CCoonnffiiggDDBB,,SSuuffffiixx,,UUnnddeeffiinneedd)) -->> MMiimmeeTTyyppee

              Types:

                 ConfigDB = ets_table()
                 Suffix = string()
                 MimeType = string() | undefined | Undefined
                 Undefined = term()

              _l_o_o_k_u_p___m_i_m_e___d_e_f_a_u_l_t returns the mime type associated with a
              specific file suffix as specified in the _m_i_m_e_._t_y_p_e_s file
              (located in the config directory). If no appropriate association
              can be found the value of DefaultType is returned.

       mmeessssaaggee((SSttaattuussCCooddee,,PPhhrraasseeAArrggss,,CCoonnffiiggDDBB)) -->> MMeessssaaggee

              Types:

                 StatusCode = 301 | 400 | 403 | 404 | 500 | 501 | 504
                 PhraseArgs = term()
                 ConfigDB = ets_table
                 Message = string()

              _m_e_s_s_a_g_e_/_3 returns an informative HTTP 1.1 status string in HTML.
              Each _S_t_a_t_u_s_C_o_d_e requires a specific _P_h_r_a_s_e_A_r_g_s:

                _3_0_1:
                  _s_t_r_i_n_g_(_): A URL pointing at the new document position.

                _4_0_0 _| _4_0_1 _| _5_0_0:
                  _n_o_n_e (No _P_h_r_a_s_e_A_r_g_s)

                _4_0_3 _| _4_0_4:
                  _s_t_r_i_n_g_(_): A _R_e_q_u_e_s_t_-_U_R_I as described in RFC 2616.

                _5_0_1:
                  _{_M_e_t_h_o_d_,_R_e_q_u_e_s_t_U_R_I_,_H_T_T_P_V_e_r_s_i_o_n_}: The HTTP _M_e_t_h_o_d, _R_e_q_u_e_s_t_-
                  _U_R_I and _H_T_T_P_-_V_e_r_s_i_o_n as defined in RFC 2616.

                _5_0_4:
                  _s_t_r_i_n_g_(_): A string describing why the service was
                  unavailable.

       mmoonntthh((NNtthhMMoonntthh)) -->> MMoonntthh

              Types:

                 NthMonth = 1-12
                 Month = string()

              _m_o_n_t_h_/_1 converts the month _N_t_h_M_o_n_t_h as an integer (1-12) to an
              abbreviated string, that is:

              1 = "Jan", 2 = "Feb", ..., 12 = "Dec".

       mmuullttii__llooookkuupp((EETTSSTTaabbllee,,KKeeyy)) -->> RReessuulltt

              Types:

                 ETSTable = ets_table()
                 Key = term()
                 Result = [term()]

              _m_u_l_t_i___l_o_o_k_u_p extracts all _{_K_e_y_,_V_a_l_u_e_} tuples from an _E_T_S_T_a_b_l_e
              and returns _a_l_l_V_a_l_u_e_s associated with the _K_e_y in a list.

       rreeaassoonn__pphhrraassee((SSttaattuussCCooddee)) -->> DDeessccrriippttiioonn

              Types:

                 StatusCode = 100| 200 | 201 | 202 | 204 | 205 | 206 | 300 |
                 301 | 302 | 303 | 304 | 400 | 401 | 402 | 403 | 404 | 405 |
                 406 | 410 411 | 412 | 413 | 414 415 | 416 | 417 | 500 | 501 |
                 502 | 503 | 504 | 505
                 Description = string()

              _r_e_a_s_o_n___p_h_r_a_s_e returns the _D_e_s_c_r_i_p_t_i_o_n of an HTTP 1.1 _S_t_a_t_u_s_C_o_d_e,
              for example 200 is "OK" and 201 is "Created". Read RFC 2616 for
              further information.

       rrffcc11112233__ddaattee(()) -->> RRFFCC11112233DDaattee
       rrffcc11112233__ddaattee(({{{{YYYYYYYY,,MMMM,,DDDD}},,{{HHoouurr,,MMiinn,,SSeecc}}}}}})) -->> RRFFCC11112233DDaattee

              Types:

                 YYYY = MM = DD = Hour = Min =Sec = integer()
                 RFC1123Date = string()

              _r_f_c_1_1_2_3___d_a_t_e_/_0 returns the current date in RFC 1123 format.
              _r_f_c___d_a_t_e_/_1 converts the date in the Erlang format to the RFC
              1123 date format.

       sspplliitt((SSttrriinngg,,RReeggEExxpp,,NN)) -->> SSpplliittRReess

              Types:

                 String = RegExp = string()
                 SplitRes = {ok, FieldList} | {error, errordesc()}
                 Fieldlist = [string()]
                 N = integer

              _s_p_l_i_t_/_3 splits the _S_t_r_i_n_g in _N chunks using the _R_e_g_E_x_p. _s_p_l_i_t_/_3
              is is equivalent to _r_e_g_e_x_p_:_s_p_l_i_t_/_2 with one exception, that is _N
              defines the number of maximum number of fields in the _F_i_e_l_d_L_i_s_t.

       sspplliitt__ssccrriipptt__ppaatthh((RReeqquueessttLLiinnee)) -->> SSpplliitttteedd

              Types:

                 RequestLine = string()
                 Splitted = not_a_script | {Path, PathInfo, QueryString}
                 Path = QueryString = PathInfo = string()

              _s_p_l_i_t___s_c_r_i_p_t___p_a_t_h_/_1 is equivalent to _s_p_l_i_t___p_a_t_h_/_1 with one
              exception. If the longest possible path is not a regular,
              accessible and executable file _n_o_t___a___s_c_r_i_p_t is returned.

       sspplliitt__ppaatthh((RReeqquueessttLLiinnee)) -->> {{PPaatthh,,QQuueerryySSttrriinnggOOrrPPaatthhIInnffoo}}

              Types:

                 RequestLine = Path = QueryStringOrPathInfo = string()

              _s_p_l_i_t___p_a_t_h_/_1 splits the _R_e_q_u_e_s_t_L_i_n_e in a file reference (_P_a_t_h)
              and a _Q_u_e_r_y_S_t_r_i_n_g or a _P_a_t_h_I_n_f_o string as specified in RFC 2616.
              A _Q_u_e_r_y_S_t_r_i_n_g is isolated from the _P_a_t_h with a question mark (_?)
              and _P_a_t_h_I_n_f_o with a slash (/). In the case of a _Q_u_e_r_y_S_t_r_i_n_g,
              everything before the _? is a _P_a_t_h and everything after a
              _Q_u_e_r_y_S_t_r_i_n_g. In the case of a _P_a_t_h_I_n_f_o the _R_e_q_u_e_s_t_L_i_n_e is
              scanned from left-to-right on the hunt for longest possible _P_a_t_h
              being a file or a directory. Everything after the longest
              possible _P_a_t_h, isolated with a _/, is regarded as _P_a_t_h_I_n_f_o. The
              resulting _P_a_t_h is decoded using _d_e_c_o_d_e___h_e_x_/_1 before delivery.

       ssttrriipp((SSttrriinngg)) -->> SSttrriippppeedd

              Types:

                 String = Stripped = string()

              _s_t_r_i_p_/_1 removes any leading or trailing linear white space from
              the string. Linear white space should be read as horizontal tab
              or space.

       ssuuffffiixx((FFiilleeNNaammee)) -->> SSuuffffiixx

              Types:

                 FileName = Suffix = string()

              _s_u_f_f_i_x_/_1 is equivalent to _f_i_l_e_n_a_m_e_:_e_x_t_e_n_s_i_o_n_/_1 with one
              exception, that is _S_u_f_f_i_x is returned without a leading dot (_.).

SSEEEE AALLSSOO
       hhttttppdd((33))



Ericsson AB                       inets 5.9.1                    httpd_util(3)
