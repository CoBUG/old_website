CosNotifyFilter_Filter(3)  Erlang Module Definition  CosNotifyFilter_Filter(3)



NNAAMMEE
       CosNotifyFilter_Filter - This module implements the OMG
       CosNotifyFilter::Filter interface.

DDEESSCCRRIIPPTTIIOONN
       To get access to the record definitions for the structures use:
       _-_i_n_c_l_u_d_e___l_i_b_(_"_c_o_s_N_o_t_i_f_i_c_a_t_i_o_n_/_i_n_c_l_u_d_e_/_*_._h_r_l_"_)_.

EEXXPPOORRTTSS
       __ggeett__ccoonnssttrraaiinntt__ggrraammmmaarr((FFiilltteerr)) -->> GGrraammmmaarr

              Types:

                 Filter = #objref
                 Grammar = string()

              This operation returns which type of Grammar the Filter uses.
              Currently, only _"_E_X_T_E_N_D_E_D___T_C_L_" is supported.

       aadddd__ccoonnssttrraaiinnttss((FFiilltteerr,, CCoonnssttrraaiinnttEExxppSSeeqq)) -->> RReeppllyy

              Types:

                 Filter = #objref
                 ConstraintExpSeq = [Constraint]
                 ConstraintExp = #'CosNotifyFilter_ConstraintExp'{event_types,
                 constraint_expr}
                 event_types = #'CosNotification_EventTypeSeq'{}
                 constraint_expr = string()
                 Reply = ConstraintInfoSeq | {'EXCEPTION',
                 #'CosNotifyFilter_InvalidConstraint'{constr}}
                 constr = ConstraintExp
                 ConstraintInfoSeq = [ConstraintInfo]
                 ConstraintInfo =
                 #'CosNotifyFilter_ConstraintInfo'{constraint_expression,
                 constraint_id}
                 constraint_expression = ConstraintExp
                 constraint_id = long()

              Initially, Filters do not contain any constraints, hence, all
              events will be forwarded. The _a_d_d___c_o_n_s_t_r_a_i_n_t_s_/_2 operation allow
              us to add constraints to the target object.

       mmooddiiffyy__ccoonnssttrraaiinnttss((FFiilltteerr,, CCoonnssttrraaiinnttIIDDSSeeqq,, CCoonnssttrraaiinnttIInnffooSSeeqq)) -->> RReeppllyy

              Types:

                 Filter = #objref
                 ConstraintIDSeq = [ConstraintID]
                 ConstraintID = long()
                 ConstraintInfoSeq = [ConstraintInfo]
                 ConstraintInfo =
                 #'CosNotifyFilter_ConstraintInfo'{constraint_expression,
                 constraint_id}
                 constraint_expression = ConstraintExp
                 constraint_id = long()
                 Reply = ok | {'EXCEPTION',
                 #'CosNotifyFilter_InvalidConstraint'{constr}} | {'EXCEPTION',
                 #'CosNotifyFilter_ConstraintNotFound'{id}}
                 constr = ConstraintExp
                 id = long()
                 ConstraintExp = #'CosNotifyFilter_ConstraintExp'{event_types,
                 constraint_expr}
                 event_types = #'CosNotification_EventTypeSeq'{}
                 constraint_expr = string()

              This operation is invoked by a client in order to modify the
              constraints associated with the target object. The constraints
              related to the Id's in the parameter sequence _C_o_n_s_t_r_a_i_n_t_I_D_S_e_q
              will, if all values are valid, be deleted. The _C_o_n_s_t_r_a_i_n_t_I_n_f_o_S_e_q
              parameter contains of Id-Expression pairs and a constraint
              matching one of the unique Id's will, if all input values are
              correct, be updated. If the parameters contain incorrect data en
              exception will be raised.

       ggeett__ccoonnssttrraaiinnttss((FFiilltteerr,, CCoonnssttrraaiinnttIIDDSSeeqq)) -->> RReeppllyy

              Types:

                 Filter = #objref
                 ConstraintIDSeq = [ConstraintID]
                 ConstraintID = long()
                 Reply = ConstraintInfoSeq | {'EXCEPTION',
                 #'CosNotifyFilter_ConstraintNotFound'{id}}
                 ConstraintInfoSeq = [ConstraintInfo]
                 ConstraintInfo =
                 #'CosNotifyFilter_ConstraintInfo'{constraint_expression,
                 constraint_id}
                 constraint_expression = ConstraintExp
                 constraint_id = id = long()

              This operation return a sequence of ConstraintInfo's, related to
              the given ConstraintID's, associated with the target object.

       ggeett__aallll__ccoonnssttrraaiinnttss((FFiilltteerr)) -->> CCoonnssttrraaiinnttIInnffooSSeeqq

              Types:

                 Filter = #objref
                 ConstraintInfoSeq = [ConstraintInfo]
                 ConstraintInfo =
                 #'CosNotifyFilter_ConstraintInfo'{constraint_expression,
                 constraint_id}
                 constraint_expression = ConstraintExp
                 constraint_id = long()

              All constraints, and their unique Id, associated with the target
              object will be returned by this operation.

       rreemmoovvee__aallll__ccoonnssttrraaiinnttss((FFiilltteerr)) -->> ookk

              Types:

                 Filter = #objref

              All constraints associated with the target object are removed by
              this operation and, since the the target object no longer
              contain any constraints, true will always be the result of any
              match operation.

       ddeessttrrooyy((FFiilltteerr)) -->> ookk

              Types:

                 Filter = #objref

              This operation terminates the target object.

       mmaattcchh((FFiilltteerr,, EEvveenntt)) -->> RReeppllyy

              Types:

                 Filter = #objref
                 Event = #any
                 Reply = boolean() | {'EXCEPTION',
                 #'CosNotifyFilter_UnsupportedFilterableData'{}}

              This operation accepts an _#_a_n_y_{_} event and returns _t_r_u_e if it
              satisfies at least one constraint. If the event contains data of
              the wrong type, e.g., should be a string() but in fact i a
              short(), an exception is raised.

       mmaattcchh__ssttrruuccttuurreedd((FFiilltteerr,, EEvveenntt)) -->> RReeppllyy

              Types:

                 Filter = #objref
                 Event = #'CosNotification_StructuredEvent'{}
                 Reply = boolean() | {'EXCEPTION',
                 #'CosNotifyFilter_UnsupportedFilterableData'{}}

              This operation is similar to the _m_a_t_c_h operation but accepts
              structured events instead.

       aattttaacchh__ccaallllbbaacckk((FFiilltteerr,, NNoottiiffyySSuubbssccrriibbee)) -->> CCaallllbbaacckkIIDD

              Types:

                 Filter = #objref
                 NotifySubscribe = #objref
                 CallbackID = long()

              This operation connects a NotifySubscribe object, which should
              be informed when the target object's constraints are updated. A
              unique Id is returned which must be stored if we ever want to
              detach the callback object in the future.

       ddeettaacchh__ccaallllbbaacckk((FFiilltteerr,, CCaallllbbaacckkIIDD)) -->> RReeppllyy

              Types:

                 Filter = #objref
                 CallbackID = long()
                 Reply = ok | {'EXCEPTION',
                 #'CosNotifyFilter_CallbackNotFound'{}}

              If the target object has an associated callback that matches the
              supplied Id it will be removed and longer informed of any
              updates. If no object with a matching Id is found an exception
              is raised.

       ggeett__ccaallllbbaacckkss((FFiilltteerr)) -->> CCaallllbbaacckkIIDDSSeeqq

              Types:

                 Filter = #objref
                 CallbackIDSeq = [CallbackID]
                 CallbackID = long()

              This operation returns a sequence of all connected
              NotifySubscribe object Id's. If no callbacks are associated with
              the target object the list will be empty.



Ericsson AB                 cosNotification 1.1.18   CosNotifyFilter_Filter(3)
