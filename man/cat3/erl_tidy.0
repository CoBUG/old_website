erl_tidy(3)                Erlang Module Definition                erl_tidy(3)



NNAAMMEE
       erl_tidy - Tidies and pretty-prints Erlang source code, removing unused
       functions, updating obsolete constructs and function calls, etc.

DDEESSCCRRIIPPTTIIOONN
       Tidies and pretty-prints Erlang source code, removing unused functions,
       updating obsolete constructs and function calls, etc.

       Caveats: It is possible that in some intricate uses of macros, the
       automatic addition or removal of parentheses around uses or arguments
       could cause the resulting program to be rejected by the compiler;
       however, we have found no such case in existing code. Programs defining
       strange macros can usually not be read by this program, and in those
       cases, no changes will be made.

       If you really, really want to, you may call it "Inga".

       Disclaimer: The author accepts no responsibility for errors introduced
       in code that has been processed by the program. It has been reasonably
       well tested, but the possibility of errors remains. Keep backups of
       your original code safely stored, until you feel confident that the
       new, modified code can be trusted.

EEXXPPOORRTTSS
       ddiirr(()) -->> ookk

              Equivalent to ddiirr(("""")).

       ddiirr((DDiirr)) -->> ookk

              Equivalent to ddiirr((DDiirr,, [[]])).

       ddiirr((DDiirreeccttoorryy::::ffiilleennaammee(()),, OOppttiioonnss::::[[tteerrmm(())]])) -->> ookk

              Types:

                 filename() (see module file)

              Tidies Erlang source files in a directory and its
              subdirectories.

              Available options:

                {{ffoollllooww__lliinnkkss,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, symbolic directory links will be
                  followed. The default value is _f_a_l_s_e.

                {{rreeccuurrssiivvee,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, subdirectories will be visited
                  recursively. The default value is _t_r_u_e.

                {{rreeggeexxpp,, ssttrriinngg(())}}::
                  The value denotes a regular expression (see module _r_e).
                  Tidying will only be applied to those regular files whose
                  names match this pattern. The default value is _"_._*_\_\_._e_r_l_$_",
                  which matches normal Erlang source file names.

                {{tteesstt,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, no files will be modified. The default
                  value is _f_a_l_s_e.

                {{vveerrbboossee,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, progress messages will be output while
                  the program is running, unless the _q_u_i_e_t option is _t_r_u_e. The
                  default value when calling ddiirr//22 is _t_r_u_e.

              See the function ffiillee//22 for further options.

              _S_e_e _a_l_s_o_: rree((33)), ffiillee//22.

       ffiillee((NNaammee)) -->> ookk

              Equivalent to ffiillee((NNaammee,, [[]])).

       ffiillee((NNaammee::::ffiilleennaammee(()),, OOppttiioonnss::::[[tteerrmm(())]])) -->> ookk

              Tidies an Erlang source code file.

              Available options are:

                {{bbaacckkuupp__ssuuffffiixx,, ssttrriinngg(())}}::
                  Specifies the file name suffix to be used when a backup file
                  is created; the default value is _"_._b_a_k_" (cf. the _b_a_c_k_u_p_s
                  option).

                {{bbaacckkuuppss,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, existing files will be renamed before
                  new files are opened for writing. The new names are formed
                  by appending the string given by the _b_a_c_k_u_p___s_u_f_f_i_x option to
                  the original name. The default value is _t_r_u_e.

                {{ddiirr,, ffiilleennaammee(())}}::
                  Specifies the name of the directory in which the output file
                  is to be written. By default, the current directory is used.
                  If the value is an empty string, the current directory is
                  used.

                {{oouuttffiillee,, ffiilleennaammee(())}}::
                  Specifies the name of the file (without suffix) to which the
                  resulting source code is to be written. If this option is
                  not specified, the _N_a_m_e argument is used.

                {{pprriinntteerr,, FFuunnccttiioonn}}::


                  * _F_u_n_c_t_i_o_n _= _(_s_y_n_t_a_x_T_r_e_e_(_)_) _-_> _s_t_r_i_n_g_(_)

                  Specifies a function for prettyprinting Erlang syntax trees.
                  This is used for outputting the resulting module definition.
                  The function is assumed to return formatted text for the
                  given syntax tree, and should raise an exception if an error
                  occurs. The default formatting function calls
                  _e_r_l___p_r_e_t_t_y_p_r_:_f_o_r_m_a_t_/_2.

                {{tteesstt,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, no files will be modified; this is
                  typically most useful if the _v_e_r_b_o_s_e flag is enabled, to
                  generate reports about the program files without affecting
                  them. The default value is _f_a_l_s_e.

              See the function _m_o_d_u_l_e_/_2 for further options.

              _S_e_e _a_l_s_o_: mmoodduullee//22, eerrll__pprreettttyypprr::ffoorrmmaatt//22.

       mmoodduullee((FFoorrmmss)) -->> ssyynnttaaxxTTrreeee(())

              Equivalent to mmoodduullee((FFoorrmmss,, [[]])).

       mmoodduullee((FFoorrmmss,, OOppttiioonnss::::[[tteerrmm(())]])) -->> ssyynnttaaxxTTrreeee(())

              Types:

                 Forms = syntaxTree() | [syntaxTree()]
                 syntaxTree() (see module erl_syntax)

              Tidies a syntax tree representation of a module definition. The
              given _F_o_r_m_s may be either a single syntax tree of type
              _f_o_r_m___l_i_s_t, or a list of syntax trees representing "program
              forms". In either case, _F_o_r_m_s must represent a single complete
              module definition. The returned syntax tree has type _f_o_r_m___l_i_s_t
              and represents a tidied-up version of the same source code.

              Available options are:

                {{aauuttoo__eexxppoorrtt__vvaarrss,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, all matches "_{_V_1_, _._._._, _V_n_} _= _E" where
                  _E is a case-, if- or receive-expression whose branches all
                  return n-tuples (or explicitly throw exceptions) will be
                  rewritten to bind and export the variables _V_1, ..., _V_n
                  directly. The default value is _f_a_l_s_e.

                  For example:

                                 {X, Y} = case ... of
                                              ... -> {17, foo()};
                                              ... -> {42, bar()}
                                          end


                  will be rewritten to:

                                 case ... of
                                     ... -> X = 17, Y = foo(), {X, Y};
                                     ... -> X = 42, Y = bar(), {X, Y}
                                 end


                {{aauuttoo__lliisstt__ccoommpp,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, calls to _l_i_s_t_s_:_m_a_p_/_2 and
                  _l_i_s_t_s_:_f_i_l_t_e_r_/_2 will be rewritten using list comprehensions.
                  The default value is _t_r_u_e.

                {{ffiillee,, ssttrriinngg(())}}::
                  Specifies the name of the file from which the source code
                  was taken. This is only used for generation of error
                  reports. The default value is the empty string.

                {{iiddeemm,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, all options that affect how the code
                  is modified are set to "no changes". For example, to only
                  update guard tests, and nothing else, use the options
                  _[_n_e_w___g_u_a_r_d___t_e_s_t_s_, _i_d_e_m_]. (Recall that options closer to the
                  beginning of the list have higher precedence.)

                {{kkeeeepp__uunnuusseedd,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, unused functions will not be removed
                  from the code. The default value is _f_a_l_s_e.

                {{nneeww__gguuaarrdd__tteessttss,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, guard tests will be updated to use the
                  new names, e.g. "_i_s___i_n_t_e_g_e_r_(_X_)" instead of "_i_n_t_e_g_e_r_(_X_)". The
                  default value is _t_r_u_e. See also _o_l_d___g_u_a_r_d___t_e_s_t_s.

                {{nnoo__iimmppoorrttss,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, all import statements will be removed
                  and calls to imported functions will be expanded to explicit
                  remote calls. The default value is _f_a_l_s_e.

                {{oolldd__gguuaarrdd__tteessttss,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, guard tests will be changed to use the
                  old names instead of the new ones, e.g. "_i_n_t_e_g_e_r_(_X_)" instead
                  of "_i_s___i_n_t_e_g_e_r_(_X_)". The default value is _f_a_l_s_e. This option
                  overrides the _n_e_w___g_u_a_r_d___t_e_s_t_s option.

                {{qquuiieett,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, all information messages and warning
                  messages will be suppressed. The default value is _f_a_l_s_e.

                {{rreennaammee,, [[{{{{aattoomm(()),, aattoomm(()),, iinntteeggeerr(())}},, {{aattoomm(()),, aattoomm(())}}}}]]}}::
                  The value is a list of pairs, associating tuples _{_M_o_d_u_l_e_,
                  _N_a_m_e_, _A_r_i_t_y_} with tuples _{_N_e_w_M_o_d_u_l_e_, _N_e_w_N_a_m_e_}, specifying
                  renamings of calls to remote functions. By default, the
                  value is the empty list.

                  The renaming affects only remote calls (also when disguised
                  by import declarations); local calls within a module are not
                  affected, and no function definitions are renamed. Since the
                  arity cannot change, the new name is represented by
                  _{_N_e_w_M_o_d_u_l_e_, _N_e_w_N_a_m_e_} only. Only calls matching the specified
                  arity will match; multiple entries are necessary for
                  renaming calls to functions that have the same module and
                  function name, but different arities.

                  This option can also be used to override the default
                  renaming of calls which use obsolete function names.

                {{vveerrbboossee,, bboooolleeaann(())}}::
                  If the value is _t_r_u_e, progress messages will be output while
                  the program is running, unless the _q_u_i_e_t option is _t_r_u_e. The
                  default value is _f_a_l_s_e.

AAUUTTHHOORRSS
       Richard Carlsson _<_c_a_r_l_s_s_o_n_._r_i_c_h_a_r_d_@_g_m_a_i_l_._c_o_m_>



                              syntax_tools 1.6.9                   erl_tidy(3)
