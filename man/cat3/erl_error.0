erl_error(3)                  C Library Functions                 erl_error(3)



NNAAMMEE
       erl_error - Error Print Routines

DDEESSCCRRIIPPTTIIOONN
       This module contains some error printing routines taken from _A_d_v_a_n_c_e_d
       _P_r_o_g_r_a_m_m_i_n_g _i_n _t_h_e _U_N_I_X _E_n_v_i_r_o_n_m_e_n_t by W. Richard Stevens.

       These functions are all called in the same manner as _p_r_i_n_t_f_(_), i.e.
       with a string containing format specifiers followed by a list of
       corresponding arguments. All output from these functions is to _s_t_d_e_r_r.

EEXXPPOORRTTSS
       vvooiidd eerrll__eerrrr__mmssgg((FFoorrmmaattSSttrr,, ...... ))

              Types:

                 const char *FormatStr;

              The message provided by the caller is printed. This function is
              simply a wrapper for _f_p_r_i_n_t_f_(_).

       vvooiidd eerrll__eerrrr__qquuiitt((FFoorrmmaattSSttrr,, ...... ))

              Types:

                 const char *FormatStr;

              Use this function when a fatal error has occurred that is not
              due to a system call. The message provided by the caller is
              printed and the process terminates with an exit value of 1. The
              function does not return.

       vvooiidd eerrll__eerrrr__rreett((FFoorrmmaattSSttrr,, ...... ))

              Types:

                 const char *FormatStr;

              Use this function after a failed system call. The message
              provided by the caller is printed followed by a string
              describing the reason for failure.

       vvooiidd eerrll__eerrrr__ssyyss((FFoorrmmaattSSttrr,, ...... ))

              Types:

                 const char *FormatStr;

              Use this function after a failed system call. The message
              provided by the caller is printed followed by a string
              describing the reason for failure, and the process terminates
              with an exit value of 1. The function does not return.

EERRRROORR RREEPPOORRTTIINNGG
       Most functions in erl_interface report failures to the caller by
       returning some otherwise meaningless value (typically _N_U_L_L or a
       negative number). As this only tells you that things did not go well,
       you will have to examine the error code in _e_r_l___e_r_r_n_o if you want to
       find out more about the failure.

EEXXPPOORRTTSS
       vvoollaattiillee iinntt eerrll__eerrrrnnoo

              _e_r_l___e_r_r_n_o is initially (at program startup) zero and is then set
              by many erl_interface functions on failure to a non-zero error
              code to indicate what kind of error it encountered. A successful
              function call might change _e_r_l___e_r_r_n_o (by calling some other
              function that fails), but no function will ever set it to zero.
              This means that you cannot use _e_r_l___e_r_r_n_o to see _i_f a function
              call failed. Instead, each function reports failure in its own
              way (usually by returning a negative number or _N_U_L_L), in which
              case you can examine _e_r_l___e_r_r_n_o for details.

              _e_r_l___e_r_r_n_o uses the error codes defined in your system's
              _<_e_r_r_n_o_._h_>.

          NNoottee::
              Actually, _e_r_l___e_r_r_n_o is a "modifiable lvalue" (just like ISO C
              defines _e_r_r_n_o to be) rather than a variable. This means it might
              be implemented as a macro (expanding to, e.g., _*___e_r_l___e_r_r_n_o_(_)).
              For reasons of thread- (or task-)safety, this is exactly what we
              do on most platforms.




Ericsson AB                   erl_interface 3.7.8                 erl_error(3)
