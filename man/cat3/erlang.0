erlang(3)                  Erlang Module Definition                  erlang(3)



NNAAMMEE
       erlang - The Erlang BIFs

DDEESSCCRRIIPPTTIIOONN
       By convention, most built-in functions (BIFs) are seen as being in the
       module _e_r_l_a_n_g. A number of the BIFs are viewed more or less as part of
       the Erlang programming language and are _a_u_t_o_-_i_m_p_o_r_t_e_d. Thus, it is not
       necessary to specify the module name and both the calls
       _a_t_o_m___t_o___l_i_s_t_(_E_r_l_a_n_g_) and _e_r_l_a_n_g_:_a_t_o_m___t_o___l_i_s_t_(_E_r_l_a_n_g_) are identical.

       In the text, auto-imported BIFs are listed without module prefix. BIFs
       listed with module prefix are not auto-imported.

       BIFs may fail for a variety of reasons. All BIFs fail with reason
       _b_a_d_a_r_g if they are called with arguments of an incorrect type. The
       other reasons that may make BIFs fail are described in connection with
       the description of each individual BIF.

       Some BIFs may be used in guard tests, these are marked with "Allowed in
       guard tests".

DDAATTAA TTYYPPEESS
       eexxtt__bbiinnaarryy(())

              A binary data object, structured according to the Erlang
              external term format.

       ttiimmeessttaammpp(()) =
           {MegaSecs :: integer() >= 0,
            Secs :: integer() >= 0,
            MicroSecs :: integer() >= 0}

              See nnooww//00.

EEXXPPOORRTTSS
       aabbss((NNuummbbeerr)) -->> iinntteeggeerr(()) || ffllooaatt(())

              Types:

                 Number = number()

              Returns an integer or float which is the arithmetical absolute
              value of _N_u_m_b_e_r.

              > abs(-3.33).
              3.33
              > abs(-3).
              3

              Allowed in guard tests.

       eerrllaanngg::aaddlleerr3322((DDaattaa)) -->> iinntteeggeerr(())

              Types:

                 Data = iodata()

              Computes and returns the adler32 checksum for _D_a_t_a.

       eerrllaanngg::aaddlleerr3322((OOllddAAddlleerr,, DDaattaa)) -->> iinntteeggeerr(())

              Types:

                 OldAdler = integer()
                 Data = iodata()

              Continue computing the adler32 checksum by combining the
              previous checksum, _O_l_d_A_d_l_e_r, with the checksum of _D_a_t_a.

              The following code:

                   X = erlang:adler32(Data1),
                   Y = erlang:adler32(X,Data2).


              - would assign the same value to _Y as this would:

                   Y = erlang:adler32([Data1,Data2]).


       eerrllaanngg::aaddlleerr3322__ccoommbbiinnee((FFiirrssttAAddlleerr,, SSeeccoonnddAAddlleerr,, SSeeccoonnddSSiizzee)) -->>
       iinntteeggeerr(())

              Types:

                 FirstAdler = SecondAdler = integer()
                 SecondSize = integer()

              Combines two previously computed adler32 checksums. This
              computation requires the size of the data object for the second
              checksum to be known.

              The following code:

                   Y = erlang:adler32(Data1),
                   Z = erlang:adler32(Y,Data2).


              - would assign the same value to _Z as this would:

                   X = erlang:adler32(Data1),
                   Y = erlang:adler32(Data2),
                   Z = erlang:adler32_combine(X,Y,iolist_size(Data2)).


       eerrllaanngg::aappppeenndd__eelleemmeenntt((TTuuppllee11,, TTeerrmm)) -->> TTuuppllee22

              Types:

                 Tuple1 = Tuple2 = tuple()
                 Term = term()

              Returns a new tuple which has one element more than _T_u_p_l_e_1, and
              contains the elements in _T_u_p_l_e_1 followed by _T_e_r_m as the last
              element. Semantically equivalent to
              _l_i_s_t___t_o___t_u_p_l_e_(_t_u_p_l_e___t_o___l_i_s_t_(_T_u_p_l_e_) _+_+ _[_T_e_r_m_]_), but much faster.

              > erlang:append_element({one, two}, three).
              {one,two,three}

       aappppllyy((FFuunn,, AArrggss)) -->> tteerrmm(())

              Types:

                 Fun = function()
                 Args = [term()]

              Call a fun, passing the elements in _A_r_g_s as arguments.

              Note: If the number of elements in the arguments are known at
              compile-time, the call is better written as _F_u_n_(_A_r_g_1_, _A_r_g_2_, _._._.
              _A_r_g_N_).

          WWaarrnniinngg::
              Earlier, _F_u_n could also be given as _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_},
              equivalent to _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_). This usage is
              deprecated and will stop working in a future release of
              Erlang/OTP.


       aappppllyy((MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> tteerrmm(())

              Types:

                 Module = module()
                 Function = atom()
                 Args = [term()]

              Returns the result of applying _F_u_n_c_t_i_o_n in _M_o_d_u_l_e to _A_r_g_s. The
              applied function must be exported from _M_o_d_u_l_e. The arity of the
              function is the length of _A_r_g_s.

              > apply(lists, reverse, [[a, b, c]]).
              [c,b,a]

              _a_p_p_l_y can be used to evaluate BIFs by using the module name
              _e_r_l_a_n_g.

              > apply(erlang, atom_to_list, ['Erlang']).
              "Erlang"

              Note: If the number of arguments are known at compile-time, the
              call is better written as _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n_(_A_r_g_1_, _A_r_g_2_, _._._._,
              _A_r_g_N_).

              Failure: _e_r_r_o_r___h_a_n_d_l_e_r_:_u_n_d_e_f_i_n_e_d___f_u_n_c_t_i_o_n_/_3 is called if the
              applied function is not exported. The error handler can be
              redefined (see pprroocceessss__ffllaagg//22). If the _e_r_r_o_r___h_a_n_d_l_e_r is
              undefined, or if the user has redefined the default
              _e_r_r_o_r___h_a_n_d_l_e_r so the replacement module is undefined, an error
              with the reason _u_n_d_e_f is generated.

       aattoomm__ttoo__bbiinnaarryy((AAttoomm,, EEnnccooddiinngg)) -->> bbiinnaarryy(())

              Types:

                 Atom = atom()
                 Encoding = latin1 | utf8 | unicode

              Returns a binary which corresponds to the text representation of
              _A_t_o_m. If _E_n_c_o_d_i_n_g is _l_a_t_i_n_1, there will be one byte for each
              character in the text representation. If _E_n_c_o_d_i_n_g is _u_t_f_8 or
              _u_n_i_c_o_d_e, the characters will be encoded using UTF-8 (meaning
              that characters from 16#80 up to 0xFF will be encoded in two
              bytes).

          NNoottee::
              Currently, _a_t_o_m___t_o___b_i_n_a_r_y_(_A_t_o_m_, _l_a_t_i_n_1_) can never fail because
              the text representation of an atom can only contain characters
              from 0 to 16#FF. In a future release, the text representation of
              atoms might be allowed to contain any Unicode character and
              _a_t_o_m___t_o___b_i_n_a_r_y_(_A_t_o_m_, _l_a_t_i_n_1_) will fail if the text
              representation for the _A_t_o_m contains a Unicode character greater
              than 16#FF.


              > atom_to_binary('Erlang', latin1).
              <<"Erlang">>

       aattoomm__ttoo__lliisstt((AAttoomm)) -->> ssttrriinngg(())

              Types:

                 Atom = atom()

              Returns a string which corresponds to the text representation of
              _A_t_o_m.

              > atom_to_list('Erlang').
              "Erlang"

       bbiinnaarryy__ppaarrtt((SSuubbjjeecctt,, PPoossLLeenn)) -->> bbiinnaarryy(())

              Types:

                 Subject = binary()
                 PosLen = {Start,Length}
                 Start = integer() >= 0
                 Length = integer() >= 0

              Extracts the part of the binary described by _P_o_s_L_e_n.

              Negative length can be used to extract bytes at the end of a
              binary:

              1> Bin = <<1,2,3,4,5,6,7,8,9,10>>.
              2> binary_part(Bin,{byte_size(Bin), -5)).
              <<6,7,8,9,10>>


              If _P_o_s_L_e_n in any way references outside the binary, a _b_a_d_a_r_g
              exception is raised.

              _S_t_a_r_t is zero-based, i.e.:

              1> Bin = <<1,2,3>>
              2> binary_part(Bin,{0,2}).
              <<1,2>>


              See the STDLIB module _b_i_n_a_r_y for details about the _P_o_s_L_e_n
              semantics.

              Allowed in guard tests.

       bbiinnaarryy__ppaarrtt((SSuubbjjeecctt,, SSttaarrtt,, LLeennggtthh)) -->> bbiinnaarryy(())

              Types:

                 Subject = binary()
                 Start = integer() >= 0
                 Length = integer() >= 0

              The same as _b_i_n_a_r_y___p_a_r_t_(_S_u_b_j_e_c_t_, _{_P_o_s_, _L_e_n_}_).

              Allowed in guard tests.

       bbiinnaarryy__ttoo__aattoomm((BBiinnaarryy,, EEnnccooddiinngg)) -->> aattoomm(())

              Types:

                 Binary = binary()
                 Encoding = latin1 | utf8 | unicode

              Returns the atom whose text representation is _B_i_n_a_r_y. If
              _E_n_c_o_d_i_n_g is _l_a_t_i_n_1, no translation of bytes in the binary is
              done. If _E_n_c_o_d_i_n_g is _u_t_f_8 or _u_n_i_c_o_d_e, the binary must contain
              valid UTF-8 sequences; furthermore, only Unicode characters up
              to 0xFF are allowed.

          NNoottee::
              _b_i_n_a_r_y___t_o___a_t_o_m_(_B_i_n_a_r_y_, _u_t_f_8_) will fail if the binary contains
              Unicode characters greater than 16#FF. In a future release, such
              Unicode characters might be allowed and _b_i_n_a_r_y___t_o___a_t_o_m_(_B_i_n_a_r_y_,
              _u_t_f_8_) will not fail in that case.


              > binary_to_atom(<<"Erlang">>, latin1).
              > binary_to_atom(<<1024/utf8>>, utf8).
              ** exception error: bad argument
                   in function  binary_to_atom/2
                      called as binary_to_atom(<<208,128>>,utf8)

       bbiinnaarryy__ttoo__eexxiissttiinngg__aattoomm((BBiinnaarryy,, EEnnccooddiinngg)) -->> aattoomm(())

              Types:

                 Binary = binary()
                 Encoding = latin1 | utf8 | unicode

              Works like bbiinnaarryy__ttoo__aattoomm//22, but the atom must already exist.

              Failure: _b_a_d_a_r_g if the atom does not already exist.

       bbiinnaarryy__ttoo__lliisstt((BBiinnaarryy)) -->> [[cchhaarr(())]]

              Types:

                 Binary = binary()

              Returns a list of integers which correspond to the bytes of
              _B_i_n_a_r_y.

       bbiinnaarryy__ttoo__lliisstt((BBiinnaarryy,, SSttaarrtt,, SSttoopp)) -->> [[cchhaarr(())]]

              Types:

                 Binary = binary()
                 Start = Stop = 1..byte_size(Binary)

              As _b_i_n_a_r_y___t_o___l_i_s_t_/_1, but returns a list of integers
              corresponding to the bytes from position _S_t_a_r_t to position _S_t_o_p
              in _B_i_n_a_r_y. Positions in the binary are numbered starting from 1.

          NNoottee::
              This function's indexing style of using one-based indices for
              binaries is deprecated. New code should use the functions in the
              STDLIB module _b_i_n_a_r_y instead. They consequently use the same
              (zero-based) style of indexing.


       bbiittssttrriinngg__ttoo__lliisstt((BBiittssttrriinngg)) -->> [[cchhaarr(())||bbiittssttrriinngg(())]]

              Types:

                 Bitstring = bitstring()

              Returns a list of integers which correspond to the bytes of
              _B_i_t_s_t_r_i_n_g. If the number of bits in the binary is not divisible
              by 8, the last element of the list will be a bitstring
              containing the remaining bits (1 up to 7 bits).

       bbiinnaarryy__ttoo__tteerrmm((BBiinnaarryy)) -->> tteerrmm(())

              Types:

                 Binary = eexxtt__bbiinnaarryy(())

              Returns an Erlang term which is the result of decoding the
              binary object _B_i_n_a_r_y, which must be encoded according to the
              Erlang external term format.

          WWaarrnniinngg::
              When decoding binaries from untrusted sources, consider using
              _b_i_n_a_r_y___t_o___t_e_r_m_/_2 to prevent denial of service attacks.


              See also tteerrmm__ttoo__bbiinnaarryy//11 and bbiinnaarryy__ttoo__tteerrmm//22.

       bbiinnaarryy__ttoo__tteerrmm((BBiinnaarryy,, OOppttss)) -->> tteerrmm(())

              Types:

                 Opts = [safe]
                 Binary = eexxtt__bbiinnaarryy(())

              As _b_i_n_a_r_y___t_o___t_e_r_m_/_1, but takes options that affect decoding of
              the binary.

                _s_a_f_e:
                  Use this option when receiving binaries from an untrusted
                  source.

                  When enabled, it prevents decoding data that may be used to
                  attack the Erlang system. In the event of receiving unsafe
                  data, decoding fails with a badarg error.

                  Currently, this prevents creation of new atoms directly,
                  creation of new atoms indirectly (as they are embedded in
                  certain structures like pids, refs, funs, etc.), and
                  creation of new external function references. None of those
                  resources are currently garbage collected, so unchecked
                  creation of them can exhaust available memory.

              Failure: _b_a_d_a_r_g if _s_a_f_e is specified and unsafe data is decoded.

              See also tteerrmm__ttoo__bbiinnaarryy//11, bbiinnaarryy__ttoo__tteerrmm//11, and
              lliisstt__ttoo__eexxiissttiinngg__aattoomm//11.

       bbiitt__ssiizzee((BBiittssttrriinngg)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Bitstring = bitstring()

              Returns an integer which is the size in bits of _B_i_t_s_t_r_i_n_g.

              > bit_size(<<433:16,3:3>>).
              19
              > bit_size(<<1,2,3>>).
              24

              Allowed in guard tests.

       eerrllaanngg::bbuummpp__rreedduuccttiioonnss((RReedduuccttiioonnss)) -->> vvooiidd(())

              Types:

                 Reductions = integer() >= 0

              This implementation-dependent function increments the reduction
              counter for the calling process. In the Beam emulator, the
              reduction counter is normally incremented by one for each
              function and BIF call, and a context switch is forced when the
              counter reaches the maximum number of reductions for a process
              (2000 reductions in R12B).

          WWaarrnniinngg::
              This BIF might be removed in a future version of the Beam
              machine without prior warning. It is unlikely to be implemented
              in other Erlang implementations.


       bbyyttee__ssiizzee((BBiittssttrriinngg)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Bitstring = bitstring()

              Returns an integer which is the number of bytes needed to
              contain _B_i_t_s_t_r_i_n_g. (That is, if the number of bits in _B_i_t_s_t_r_i_n_g
              is not divisible by 8, the resulting number of bytes will be
              rounded _u_p.)

              > byte_size(<<433:16,3:3>>).
              3
              > byte_size(<<1,2,3>>).
              3

              Allowed in guard tests.

       eerrllaanngg::ccaanncceell__ttiimmeerr((TTiimmeerrRReeff)) -->> TTiimmee || ffaallssee

              Types:

                 TimerRef = reference()
                 Time = integer() >= 0

              Cancels a timer, where _T_i_m_e_r_R_e_f was returned by either
              eerrllaanngg::sseenndd__aafftteerr//33 or eerrllaanngg::ssttaarrtt__ttiimmeerr//33. If the timer is
              there to be removed, the function returns the time in
              milliseconds left until the timer would have expired, otherwise
              _f_a_l_s_e (which means that _T_i_m_e_r_R_e_f was never a timer, that it has
              already been cancelled, or that it has already delivered its
              message).

              See also eerrllaanngg::sseenndd__aafftteerr//33, eerrllaanngg::ssttaarrtt__ttiimmeerr//33, and
              eerrllaanngg::rreeaadd__ttiimmeerr//11.

              Note: Cancelling a timer does not guarantee that the message has
              not already been delivered to the message queue.

       cchheecckk__oolldd__ccooddee((MMoodduullee)) -->> bboooolleeaann(())

              Types:

                 Module = atom()

              Returns _t_r_u_e if the _M_o_d_u_l_e has old code, and _f_a_l_s_e otherwise.

              See also ccooddee((33)).

       cchheecckk__pprroocceessss__ccooddee((PPiidd,, MMoodduullee)) -->> bboooolleeaann(())

              Types:

                 Pid = pid()
                 Module = atom()

              Returns _t_r_u_e if the process _P_i_d is executing old code for
              _M_o_d_u_l_e. That is, if the current call of the process executes old
              code for this module, or if the process has references to old
              code for this module, or if the process contains funs that
              references old code for this module. Otherwise, it returns
              _f_a_l_s_e.

              > check_process_code(Pid, lists).
              false

              See also ccooddee((33)).

       eerrllaanngg::ccrrcc3322((DDaattaa)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Data = iodata()

              Computes and returns the crc32 (IEEE 802.3 style) checksum for
              _D_a_t_a.

       eerrllaanngg::ccrrcc3322((OOllddCCrrcc,, DDaattaa)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 OldCrc = integer() >= 0
                 Data = iodata()

              Continue computing the crc32 checksum by combining the previous
              checksum, _O_l_d_C_r_c, with the checksum of _D_a_t_a.

              The following code:

                   X = erlang:crc32(Data1),
                   Y = erlang:crc32(X,Data2).


              - would assign the same value to _Y as this would:

                   Y = erlang:crc32([Data1,Data2]).


       eerrllaanngg::ccrrcc3322__ccoommbbiinnee((FFiirrssttCCrrcc,, SSeeccoonnddCCrrcc,, SSeeccoonnddSSiizzee)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 FirstCrc = SecondCrc = integer() >= 0
                 SecondSize = integer() >= 0

              Combines two previously computed crc32 checksums. This
              computation requires the size of the data object for the second
              checksum to be known.

              The following code:

                   Y = erlang:crc32(Data1),
                   Z = erlang:crc32(Y,Data2).


              - would assign the same value to _Z as this would:

                   X = erlang:crc32(Data1),
                   Y = erlang:crc32(Data2),
                   Z = erlang:crc32_combine(X,Y,iolist_size(Data2)).


       ddaattee(()) -->> DDaattee

              Types:

                 Date = ccaalleennddaarr::ddaattee(())

              Returns the current date as _{_Y_e_a_r_, _M_o_n_t_h_, _D_a_y_}.

              The time zone and daylight saving time correction depend on the
              underlying OS.

              > date().
              {1995,2,19}

       eerrllaanngg::ddeeccooddee__ppaacckkeett((TTyyppee,,BBiinn,,OOppttiioonnss)) -->> {{ookk,,PPaacckkeett,,RReesstt}} ||
       {{mmoorree,,LLeennggtthh}} || {{eerrrroorr,,RReeaassoonn}}

              Types:

                 Bin = binary()
                 Options = [Opt]
                 Packet = binary() | HttpPacket
                 Rest = binary()
                 Length = integer() > 0 | undefined
                 Reason = term()
                  Type, Opt -- see below

                 HttpPacket = HttpRequest | HttpResponse | HttpHeader |
                 http_eoh | HttpError
                 HttpRequest = {http_request, HttpMethod, HttpUri,
                 HttpVersion}
                 HttpResponse = {http_response, HttpVersion, integer(),
                 HttpString}
                 HttpHeader = {http_header, integer(), HttpField,
                 Reserved=term(), Value=HttpString}
                 HttpError = {http_error, HttpString}
                 HttpMethod = HttpMethodAtom | HttpString
                 HttpMethodAtom = 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT'
                 | 'DELETE' | 'TRACE'
                 HttpUri = '*' | {absoluteURI, http|https, Host=HttpString,
                 Port=integer()|undefined, Path=HttpString} | {scheme,
                 Scheme=HttpString, HttpString} | {abs_path, HttpString} |
                 HttpString
                 HttpVersion = {Major=integer(), Minor=integer()}
                 HttpString = string() | binary()
                 HttpField = HttpFieldAtom | HttpString
                 HttpFieldAtom = 'Cache-Control' | 'Connection' | 'Date' |
                 'Pragma' | 'Transfer-Encoding' | 'Upgrade' | 'Via' | 'Accept'
                 | 'Accept-Charset' | 'Accept-Encoding' | 'Accept-Language' |
                 'Authorization' | 'From' | 'Host' | 'If-Modified-Since' |
                 'If-Match' | 'If-None-Match' | 'If-Range' | 'If-Unmodified-
                 Since' | 'Max-Forwards' | 'Proxy-Authorization' | 'Range' |
                 'Referer' | 'User-Agent' | 'Age' | 'Location' | 'Proxy-
                 Authenticate' | 'Public' | 'Retry-After' | 'Server' | 'Vary'
                 | 'Warning' | 'Www-Authenticate' | 'Allow' | 'Content-Base' |
                 'Content-Encoding' | 'Content-Language' | 'Content-Length' |
                 'Content-Location' | 'Content-Md5' | 'Content-Range' |
                 'Content-Type' | 'Etag' | 'Expires' | 'Last-Modified' |
                 'Accept-Ranges' | 'Set-Cookie' | 'Set-Cookie2' | 'X-
                 Forwarded-For' | 'Cookie' | 'Keep-Alive' | 'Proxy-Connection'


              Decodes the binary _B_i_n according to the packet protocol
              specified by _T_y_p_e. Very similar to the packet handling done by
              sockets with the option {packet,Type}.

              If an entire packet is contained in _B_i_n it is returned together
              with the remainder of the binary as _{_o_k_,_P_a_c_k_e_t_,_R_e_s_t_}.

              If _B_i_n does not contain the entire packet, _{_m_o_r_e_,_L_e_n_g_t_h_} is
              returned. _L_e_n_g_t_h is either the expected _t_o_t_a_l _s_i_z_e of the packet
              or _u_n_d_e_f_i_n_e_d if the expected packet size is not known.
              _d_e_c_o_d_e___p_a_c_k_e_t can then be called again with more data added.

              If the packet does not conform to the protocol format
              _{_e_r_r_o_r_,_R_e_a_s_o_n_} is returned.

              The following values of _T_y_p_e are valid:

                _r_a_w _| _0:
                  No packet handling is done. Entire binary is returned unless
                  it is empty.

                _1 _| _2 _| _4:
                  Packets consist of a header specifying the number of bytes
                  in the packet, followed by that number of bytes. The length
                  of header can be one, two, or four bytes; the order of the
                  bytes is big-endian. The header will be stripped off when
                  the packet is returned.

                _l_i_n_e:
                  A packet is a line terminated with newline. The newline
                  character is included in the returned packet unless the line
                  was truncated according to the option _l_i_n_e___l_e_n_g_t_h.

                _a_s_n_1 _| _c_d_r _| _s_u_n_r_m _| _f_c_g_i _| _t_p_k_t:
                  The header is _n_o_t stripped off.

                  The meanings of the packet types are as follows:

                  _a_s_n_1 - ASN.1 BER:


                  _s_u_n_r_m - Sun's RPC encoding:


                  _c_d_r - CORBA (GIOP 1.1):


                  _f_c_g_i - Fast CGI:


                  _t_p_k_t - TPKT format [RFC1006]:


                _h_t_t_p _| _h_t_t_p_h _| _h_t_t_p___b_i_n _| _h_t_t_p_h___b_i_n:
                  The Hypertext Transfer Protocol. The packets are returned
                  with the format according to _H_t_t_p_P_a_c_k_e_t described above. A
                  packet is either a request, a response, a header or an end
                  of header mark. Invalid lines are returned as _H_t_t_p_E_r_r_o_r.

                  Recognized request methods and header fields are returned as
                  atoms. Others are returned as strings.

                  The protocol type _h_t_t_p should only be used for the first
                  line when a _H_t_t_p_R_e_q_u_e_s_t or a _H_t_t_p_R_e_s_p_o_n_s_e is expected. The
                  following calls should use _h_t_t_p_h to get _H_t_t_p_H_e_a_d_e_r's until
                  _h_t_t_p___e_o_h is returned that marks the end of the headers and
                  the beginning of any following message body.

                  The variants _h_t_t_p___b_i_n and _h_t_t_p_h___b_i_n will return strings
                  (_H_t_t_p_S_t_r_i_n_g) as binaries instead of lists.

              The following options are available:

                _{_p_a_c_k_e_t___s_i_z_e_, _i_n_t_e_g_e_r_(_)_}:
                  Sets the max allowed size of the packet body. If the packet
                  header indicates that the length of the packet is longer
                  than the max allowed length, the packet is considered
                  invalid. Default is 0 which means no size limit.

                _{_l_i_n_e___l_e_n_g_t_h_, _i_n_t_e_g_e_r_(_)_}:
                  For packet type _l_i_n_e, truncate lines longer than the
                  indicated length.

                  Option _l_i_n_e___l_e_n_g_t_h also applies to _h_t_t_p_* packet types as an
                  alias for option _p_a_c_k_e_t___s_i_z_e in the case when _p_a_c_k_e_t___s_i_z_e
                  itself is not set. This usage is only intended for backward
                  compatibility.

              > erlang:decode_packet(1,<<3,"abcd">>,[]).
              {ok,<<"abc">>,<<"d">>}
              > erlang:decode_packet(1,<<5,"abcd">>,[]).
              {more,6}

       ddeelleettee__mmoodduullee((MMoodduullee)) -->> ttrruuee || uunnddeeffiinneedd

              Types:

                 Module = atom()

              Makes the current code for _M_o_d_u_l_e become old code, and deletes
              all references for this module from the export table. Returns
              _u_n_d_e_f_i_n_e_d if the module does not exist, otherwise _t_r_u_e.

          WWaarrnniinngg::
              This BIF is intended for the code server (see ccooddee((33))) and
              should not be used elsewhere.


              Failure: _b_a_d_a_r_g if there is already an old version of _M_o_d_u_l_e.

       ddeemmoonniittoorr((MMoonniittoorrRReeff)) -->> ttrruuee

              Types:

                 MonitorRef = reference()

              If _M_o_n_i_t_o_r_R_e_f is a reference which the calling process obtained
              by calling mmoonniittoorr//22, this monitoring is turned off. If the
              monitoring is already turned off, nothing happens.

              Once _d_e_m_o_n_i_t_o_r_(_M_o_n_i_t_o_r_R_e_f_) has returned it is guaranteed that no
              _{_'_D_O_W_N_'_, _M_o_n_i_t_o_r_R_e_f_, ___, ___, ___} message due to the monitor will be
              placed in the caller's message queue in the future. A _{_'_D_O_W_N_'_,
              _M_o_n_i_t_o_r_R_e_f_, ___, ___, ___} message might have been placed in the
              caller's message queue prior to the call, though. Therefore, in
              most cases, it is advisable to remove such a _'_D_O_W_N_' message from
              the message queue after monitoring has been stopped.
              ddeemmoonniittoorr((MMoonniittoorrRReeff,, [[fflluusshh]])) can be used instead of
              _d_e_m_o_n_i_t_o_r_(_M_o_n_i_t_o_r_R_e_f_) if this cleanup is wanted.

          NNoottee::
              Prior to OTP release R11B (erts version 5.5) _d_e_m_o_n_i_t_o_r_/_1 behaved
              completely asynchronous, i.e., the monitor was active until the
              "demonitor signal" reached the monitored entity. This had one
              undesirable effect, though. You could never know when you were
              guaranteed _n_o_t to receive a _D_O_W_N message due to the monitor.

              Current behavior can be viewed as two combined operations:
              asynchronously send a "demonitor signal" to the monitored entity
              and ignore any future results of the monitor.


              Failure: It is an error if _M_o_n_i_t_o_r_R_e_f refers to a monitoring
              started by another process. Not all such cases are cheap to
              check; if checking is cheap, the call fails with _b_a_d_a_r_g (for
              example if _M_o_n_i_t_o_r_R_e_f is a remote reference).

       ddeemmoonniittoorr((MMoonniittoorrRReeff,, OOppttiioonnLLiisstt)) -->> bboooolleeaann(())

              Types:

                 MonitorRef = reference()
                 OptionList = [Option]
                  Option = flush | info

              The returned value is _t_r_u_e unless _i_n_f_o is part of _O_p_t_i_o_n_L_i_s_t.

              _d_e_m_o_n_i_t_o_r_(_M_o_n_i_t_o_r_R_e_f_, _[_]_) is equivalent to
              ddeemmoonniittoorr((MMoonniittoorrRReeff)).

              Currently the following _O_p_t_i_o_ns are valid:

                _f_l_u_s_h:
                  Remove (one) _{___, _M_o_n_i_t_o_r_R_e_f_, ___, ___, ___} message, if there is
                  one, from the caller's message queue after monitoring has
                  been stopped.

                  Calling _d_e_m_o_n_i_t_o_r_(_M_o_n_i_t_o_r_R_e_f_, _[_f_l_u_s_h_]_) is equivalent to the
                  following, but more efficient:

                    demonitor(MonitorRef),
                    receive
                        {_, MonitorRef, _, _, _} ->
                            true
                    after 0 ->
                            true
                    end

                _i_n_f_o:
                  The returned value is one of the following:

                  _t_r_u_e:
                    The monitor was found and removed. In this case no _'_D_O_W_N_'
                    message due to this monitor have been nor will be placed
                    in the message queue of the caller.

                  _f_a_l_s_e:
                    The monitor was not found and could not be removed. This
                    probably because someone already has placed a _'_D_O_W_N_'
                    message corresponding to this monitor in the caller's
                    message queue.

                  If the _i_n_f_o option is combined with the _f_l_u_s_h option, _f_a_l_s_e
                  will be returned if a flush was needed; otherwise, _t_r_u_e.

          NNoottee::
              More options may be added in the future.


              Failure: _b_a_d_a_r_g if _O_p_t_i_o_n_L_i_s_t is not a list, or if _O_p_t_i_o_n is not
              a valid option, or the same failure as for ddeemmoonniittoorr//11

       ddiissccoonnnneecctt__nnooddee((NNooddee)) -->> bboooolleeaann(()) || iiggnnoorreedd

              Types:

                 Node = node()

              Forces the disconnection of a node. This will appear to the node
              _N_o_d_e as if the local node has crashed. This BIF is mainly used
              in the Erlang network authentication protocols. Returns _t_r_u_e if
              disconnection succeeds, otherwise _f_a_l_s_e. If the local node is
              not alive, the function returns _i_g_n_o_r_e_d.

       eerrllaanngg::ddiissppllaayy((TTeerrmm)) -->> ttrruuee

              Types:

                 Term = term()

              Prints a text representation of _T_e_r_m on the standard output.

          WWaarrnniinngg::
              This BIF is intended for debugging only.


       eelleemmeenntt((NN,, TTuuppllee)) -->> tteerrmm(())

              Types:

                 N = 1..tuple_size(Tuple)
                 Tuple = tuple()

              Returns the _Nth element (numbering from 1) of _T_u_p_l_e.

              > element(2, {a, b, c}).
              b

              Allowed in guard tests.

       eerraassee(()) -->> [[{{KKeeyy,, VVaall}}]]

              Types:

                 Key = Val = term()

              Returns the process dictionary and deletes it.

              > put(key1, {1, 2, 3}),
              put(key2, [a, b, c]),
              erase().
              [{key1,{1,2,3}},{key2,[a,b,c]}]

       eerraassee((KKeeyy)) -->> VVaall || uunnddeeffiinneedd

              Types:

                 Key = Val = term()

              Returns the value _V_a_l associated with _K_e_y and deletes it from
              the process dictionary. Returns _u_n_d_e_f_i_n_e_d if no value is
              associated with _K_e_y.

              > put(key1, {merry, lambs, are, playing}),
              X = erase(key1),
              {X, erase(key1)}.
              {{merry,lambs,are,playing},undefined}

       eerrrroorr((RReeaassoonn))

              Types:

                 Reason = term()

              Stops the execution of the calling process with the reason
              _R_e_a_s_o_n, where _R_e_a_s_o_n is any term. The actual exit reason will be
              _{_R_e_a_s_o_n_, _W_h_e_r_e_}, where _W_h_e_r_e is a list of the functions most
              recently called (the current function first). Since evaluating
              this function causes the process to terminate, it has no return
              value.

              > catch error(foobar).
              {'EXIT',{foobar,[{erl_eval,do_apply,5},
                               {erl_eval,expr,5},
                               {shell,exprs,6},
                               {shell,eval_exprs,6},
                               {shell,eval_loop,3}]}}

       eerrrroorr((RReeaassoonn,, AArrggss))

              Types:

                 Reason = term()
                 Args = [term()]

              Stops the execution of the calling process with the reason
              _R_e_a_s_o_n, where _R_e_a_s_o_n is any term. The actual exit reason will be
              _{_R_e_a_s_o_n_, _W_h_e_r_e_}, where _W_h_e_r_e is a list of the functions most
              recently called (the current function first). _A_r_g_s is expected
              to be the list of arguments for the current function; in Beam it
              will be used to provide the actual arguments for the current
              function in the _W_h_e_r_e term. Since evaluating this function
              causes the process to terminate, it has no return value.

       eexxiitt((RReeaassoonn))

              Types:

                 Reason = term()

              Stops the execution of the calling process with the exit reason
              _R_e_a_s_o_n, where _R_e_a_s_o_n is any term. Since evaluating this function
              causes the process to terminate, it has no return value.

              > exit(foobar).
              ** exception exit: foobar
              > catch exit(foobar).
              {'EXIT',foobar}

       eexxiitt((PPiidd,, RReeaassoonn)) -->> ttrruuee

              Types:

                 Pid = pid()
                 Reason = term()

              Sends an exit signal with exit reason _R_e_a_s_o_n to the process _P_i_d.

              The following behavior apply if _R_e_a_s_o_n is any term except _n_o_r_m_a_l
              or _k_i_l_l:

              If _P_i_d is not trapping exits, _P_i_d itself will exit with exit
              reason _R_e_a_s_o_n. If _P_i_d is trapping exits, the exit signal is
              transformed into a message _{_'_E_X_I_T_'_, _F_r_o_m_, _R_e_a_s_o_n_} and delivered
              to the message queue of _P_i_d. _F_r_o_m is the pid of the process
              which sent the exit signal. See also pprroocceessss__ffllaagg//22.

              If _R_e_a_s_o_n is the atom _n_o_r_m_a_l, _P_i_d will not exit. If it is
              trapping exits, the exit signal is transformed into a message
              _{_'_E_X_I_T_'_, _F_r_o_m_, _n_o_r_m_a_l_} and delivered to its message queue.

              If _R_e_a_s_o_n is the atom _k_i_l_l, that is if _e_x_i_t_(_P_i_d_, _k_i_l_l_) is
              called, an untrappable exit signal is sent to _P_i_d which will
              unconditionally exit with exit reason _k_i_l_l_e_d.

       eerrllaanngg::eexxtteerrnnaall__ssiizzee((TTeerrmm)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Term = term()

              Calculates, without doing the encoding, the maximum byte size
              for a term encoded in the Erlang external term format. The
              following condition applies always:

              > Size1 = byte_size(term_to_binary(Term)),
              > Size2 = erlang:external_size(Term),
              > true = Size1 =< Size2.
              true


              This is equivalent to a call to:

              erlang:external_size(Term, [])


       eerrllaanngg::eexxtteerrnnaall__ssiizzee((TTeerrmm,, [[OOppttiioonn]])) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Term = term()
                 Option = {minor_version, Version}

              Calculates, without doing the encoding, the maximum byte size
              for a term encoded in the Erlang external term format. The
              following condition applies always:

              > Size1 = byte_size(term_to_binary(Term, Options)),
              > Size2 = erlang:external_size(Term, Options),
              > true = Size1 =< Size2.
              true


              The option _{_m_i_n_o_r___v_e_r_s_i_o_n_, _V_e_r_s_i_o_n_} specifies how floats are
              encoded. See tteerrmm__ttoo__bbiinnaarryy//22 for a more detailed description.

       ffllooaatt((NNuummbbeerr)) -->> ffllooaatt(())

              Types:

                 Number = number()

              Returns a float by converting _N_u_m_b_e_r to a float.

              > float(55).
              55.0

              Allowed in guard tests.

          NNoottee::
              Note that if used on the top-level in a guard, it will test
              whether the argument is a floating point number; for clarity,
              use iiss__ffllooaatt//11 instead.

              When _f_l_o_a_t_/_1 is used in an expression in a guard, such as
              '_f_l_o_a_t_(_A_) _=_= _4_._0', it converts a number as described above.


       ffllooaatt__ttoo__lliisstt((FFllooaatt)) -->> ssttrriinngg(())

              Types:

                 Float = float()

              Returns a string which corresponds to the text representation of
              _F_l_o_a_t.

              > float_to_list(7.0).
              "7.00000000000000000000e+00"

       eerrllaanngg::ffuunn__iinnffoo((FFuunn)) -->> [[{{IItteemm,, IInnffoo}}]]

              Types:

                 Fun = function()
                 Item = arity
                      | env
                      | index
                      | name
                      | module
                      | new_index
                      | new_uniq
                      | pid
                      | type
                      | uniq
                 Info = term()

              Returns a list containing information about the fun _F_u_n. Each
              element of the list is a tuple. The order of the tuples is not
              defined, and more tuples may be added in a future release.

          WWaarrnniinngg::
              This BIF is mainly intended for debugging, but it can
              occasionally be useful in library functions that might need to
              verify, for instance, the arity of a fun.


              There are two types of funs with slightly different semantics:

              A fun created by _f_u_n _M_:_F_/_A is called an _e_x_t_e_r_n_a_l fun. Calling it
              will always call the function _F with arity _A in the latest code
              for module _M. Note that module _M does not even need to be loaded
              when the fun _f_u_n _M_:_F_/_A is created.

              All other funs are called _l_o_c_a_l. When a local fun is called, the
              same version of the code that created the fun will be called
              (even if newer version of the module has been loaded).

              The following elements will always be present in the list for
              both local and external funs:

                _{_t_y_p_e_, _T_y_p_e_}:
                  _T_y_p_e is either _l_o_c_a_l or _e_x_t_e_r_n_a_l.

                _{_m_o_d_u_l_e_, _M_o_d_u_l_e_}:
                  _M_o_d_u_l_e (an atom) is the module name.

                  If _F_u_n is a local fun, _M_o_d_u_l_e is the module in which the fun
                  is defined.

                  If _F_u_n is an external fun, _M_o_d_u_l_e is the module that the fun
                  refers to.

                _{_n_a_m_e_, _N_a_m_e_}:
                  _N_a_m_e (an atom) is a function name.

                  If _F_u_n is a local fun, _N_a_m_e is the name of the local
                  function that implements the fun. (This name was generated
                  by the compiler, and is generally only of informational use.
                  As it is a local function, it is not possible to call it
                  directly.) If no code is currently loaded for the fun, _[_]
                  will be returned instead of an atom.

                  If _F_u_n is an external fun, _N_a_m_e is the name of the exported
                  function that the fun refers to.

                _{_a_r_i_t_y_, _A_r_i_t_y_}:
                  _A_r_i_t_y is the number of arguments that the fun should be
                  called with.

                _{_e_n_v_, _E_n_v_}:
                  _E_n_v (a list) is the environment or free variables for the
                  fun. (For external funs, the returned list is always empty.)

              The following elements will only be present in the list if _F_u_n
              is local:

                _{_p_i_d_, _P_i_d_}:
                  _P_i_d is the pid of the process that originally created the
                  fun.

                _{_i_n_d_e_x_, _I_n_d_e_x_}:
                  _I_n_d_e_x (an integer) is an index into the module's fun table.

                _{_n_e_w___i_n_d_e_x_, _I_n_d_e_x_}:
                  _I_n_d_e_x (an integer) is an index into the module's fun table.

                _{_n_e_w___u_n_i_q_, _U_n_i_q_}:
                  _U_n_i_q (a binary) is a unique value for this fun. It is
                  calculated from the compiled code for the entire module.

                _{_u_n_i_q_, _U_n_i_q_}:
                  _U_n_i_q (an integer) is a unique value for this fun. Starting
                  in the R15 release, this integer is calculated from the
                  compiled code for the entire module. Before R15, this
                  integer was based on only the body of the fun.

       eerrllaanngg::ffuunn__iinnffoo((FFuunn,, IItteemm)) -->> {{IItteemm,, IInnffoo}}

              Types:

                 Fun = fun()
                 Item, Info -- see below

              Returns information about _F_u_n as specified by _I_t_e_m, in the form
              _{_I_t_e_m_,_I_n_f_o_}.

              For any fun, _I_t_e_m can be any of the atoms _m_o_d_u_l_e, _n_a_m_e, _a_r_i_t_y,
              _e_n_v, or _t_y_p_e.

              For a local fun, _I_t_e_m can also be any of the atoms _i_n_d_e_x,
              _n_e_w___i_n_d_e_x, _n_e_w___u_n_i_q, _u_n_i_q, and _p_i_d. For an external fun, the
              value of any of these items is always the atom _u_n_d_e_f_i_n_e_d.

              See eerrllaanngg::ffuunn__iinnffoo//11.

       eerrllaanngg::ffuunn__ttoo__lliisstt((FFuunn)) -->> ssttrriinngg(())

              Types:

                 Fun = fun()

              Returns a string which corresponds to the text representation of
              _F_u_n.

       eerrllaanngg::ffuunnccttiioonn__eexxppoorrtteedd((MMoodduullee,, FFuunnccttiioonn,, AArriittyy)) -->> bboooolleeaann(())

              Types:

                 Module = Function = atom()
                 Arity = arity()

              Returns _t_r_u_e if the module _M_o_d_u_l_e is loaded and contains an
              exported function _F_u_n_c_t_i_o_n_/_A_r_i_t_y; otherwise _f_a_l_s_e.

              Returns _f_a_l_s_e for any BIF (functions implemented in C rather
              than in Erlang).

       ggaarrbbaaggee__ccoolllleecctt(()) -->> ttrruuee

              Forces an immediate garbage collection of the currently
              executing process. The function should not be used, unless it
              has been noticed -- or there are good reasons to suspect -- that
              the spontaneous garbage collection will occur too late or not at
              all. Improper use may seriously degrade system performance.

              Compatibility note: In versions of OTP prior to R7, the garbage
              collection took place at the next context switch, not
              immediately. To force a context switch after a call to
              _e_r_l_a_n_g_:_g_a_r_b_a_g_e___c_o_l_l_e_c_t_(_), it was sufficient to make any function
              call.

       ggaarrbbaaggee__ccoolllleecctt((PPiidd)) -->> bboooolleeaann(())

              Types:

                 Pid = pid()

              Works like _e_r_l_a_n_g_:_g_a_r_b_a_g_e___c_o_l_l_e_c_t_(_) but on any process. The same
              caveats apply. Returns _f_a_l_s_e if _P_i_d refers to a dead process;
              _t_r_u_e otherwise.

       ggeett(()) -->> [[{{KKeeyy,, VVaall}}]]

              Types:

                 Key = Val = term()

              Returns the process dictionary as a list of _{_K_e_y_, _V_a_l_} tuples.

              > put(key1, merry),
              put(key2, lambs),
              put(key3, {are, playing}),
              get().
              [{key1,merry},{key2,lambs},{key3,{are,playing}}]

       ggeett((KKeeyy)) -->> VVaall || uunnddeeffiinneedd

              Types:

                 Key = Val = term()

              Returns the value _V_a_lassociated with _K_e_y in the process
              dictionary, or _u_n_d_e_f_i_n_e_d if _K_e_y does not exist.

              > put(key1, merry),
              put(key2, lambs),
              put({any, [valid, term]}, {are, playing}),
              get({any, [valid, term]}).
              {are,playing}

       eerrllaanngg::ggeett__ccooookkiiee(()) -->> CCooookkiiee || nnooccooookkiiee

              Types:

                 Cookie = atom()

              Returns the magic cookie of the local node, if the node is
              alive; otherwise the atom _n_o_c_o_o_k_i_e.

       ggeett__kkeeyyss((VVaall)) -->> [[KKeeyy]]

              Types:

                 Val = Key = term()

              Returns a list of keys which are associated with the value _V_a_l
              in the process dictionary.

              > put(mary, {1, 2}),
              put(had, {1, 2}),
              put(a, {1, 2}),
              put(little, {1, 2}),
              put(dog, {1, 3}),
              put(lamb, {1, 2}),
              get_keys({1, 2}).
              [mary,had,a,little,lamb]

       eerrllaanngg::ggeett__ssttaacckkttrraaccee(()) -->> [[{{MMoodduullee,, FFuunnccttiioonn,, AArriittyy || AArrggss,, LLooccaattiioonn}}]]

              Types:

                 Module = Function = atom()
                 Arity = arity()
                 Args = [term()]
                 Location = [{atom(),term()}]

              Get the call stack back-trace (_s_t_a_c_k_t_r_a_c_e) of the last exception
              in the calling process as a list of
              _{_M_o_d_u_l_e_,_F_u_n_c_t_i_o_n_,_A_r_i_t_y_,_L_o_c_a_t_i_o_n_} tuples. The _A_r_i_t_y field in the
              first tuple may be the argument list of that function call
              instead of an arity integer, depending on the exception.

              If there has not been any exceptions in a process, the
              stacktrace is []. After a code change for the process, the
              stacktrace may also be reset to [].

              The stacktrace is the same data as the _c_a_t_c_h operator returns,
              for example:

              _{_'_E_X_I_T_'_,_{_b_a_d_a_r_g_,_S_t_a_c_k_t_r_a_c_e_}_} _= _c_a_t_c_h _a_b_s_(_x_)

              _L_o_c_a_t_i_o_n is a (possibly empty) list of two-tuples that may
              indicate the location in the source code of the function. The
              first element is an atom that describes the type of information
              in the second element. Currently the following items may occur:

                _f_i_l_e:
                  The second element of the tuple is a string (list of
                  characters) representing the filename of the source file of
                  the function.

                _l_i_n_e:
                  The second element of the tuple is the line number (an
                  integer greater than zero) in the source file where the
                  exception occurred or the function was called.

              See also eerrllaanngg::eerrrroorr//11 and eerrllaanngg::eerrrroorr//22.

       ggrroouupp__lleeaaddeerr(()) -->> GGrroouuppLLeeaaddeerr

              Types:

                 GroupLeader = pid()

              Returns the pid of the group leader for the process which
              evaluates the function.

              Every process is a member of some process group and all groups
              have a _g_r_o_u_p _l_e_a_d_e_r. All IO from the group is channeled to the
              group leader. When a new process is spawned, it gets the same
              group leader as the spawning process. Initially, at system
              start-up, _i_n_i_t is both its own group leader and the group leader
              of all processes.

       ggrroouupp__lleeaaddeerr((GGrroouuppLLeeaaddeerr,, PPiidd)) -->> ttrruuee

              Types:

                 GroupLeader = Pid = pid()

              Sets the group leader of _P_i_d to _G_r_o_u_p_L_e_a_d_e_r. Typically, this is
              used when a processes started from a certain shell should have
              another group leader than _i_n_i_t.

              See also ggrroouupp__lleeaaddeerr//00.

       hhaalltt(())

              The same as _h_a_l_t_(_0_, _[_]_).

              > halt().
              os_prompt%

       hhaalltt((SSttaattuuss))

              Types:

                 Status = integer() >= 0 | string() | abort

              The same as _h_a_l_t_(_S_t_a_t_u_s_, _[_]_).

              > halt(17).
              os_prompt% echo $?
              17
              os_prompt%

       hhaalltt((SSttaattuuss,, OOppttiioonnss))

              Types:

                 Status = integer() >= 0 | string() | abort
                 Options = [Option]
                 Option = {flush,boolean()} | term()

              _S_t_a_t_u_s must be a non-negative integer, a string, or the atom
              _a_b_o_r_t. Halts the Erlang runtime system. Has no return value.
              Depending on _S_t_a_t_u_s:

                iinntteeggeerr(())::
                  The runtime system exits with the integer value _S_t_a_t_u_s as
                  status code to the calling environment (operating system).

                ssttrriinngg(())::
                  An erlang crash dump is produced with _S_t_a_t_u_s as slogan, and
                  then the runtime system exits with status code _1.

                _a_b_o_r_t:
                   The runtime system aborts producing a core dump, if that is
                  enabled in the operating system.

              Note that on many platforms, only the status codes 0-255 are
              supported by the operating system.

              For integer _S_t_a_t_u_s the Erlang runtime system closes all ports
              and allows async threads to finish their operations before
              exiting. To exit without such flushing use _O_p_t_i_o_n as
              _{_f_l_u_s_h_,_f_a_l_s_e_}.

              For statuses _s_t_r_i_n_g_(_) and _a_b_o_r_t the _f_l_u_s_h option is ignored and
              flushing is _n_o_t done.

       eerrllaanngg::hhaasshh((TTeerrmm,, RRaannggee)) -->> HHaasshh

              Returns a hash value for _T_e_r_m within the range _1_._._R_a_n_g_e. The
              allowed range is 1..2^27-1.

          WWaarrnniinngg::
              This BIF is deprecated as the hash value may differ on different
              architectures. Also the hash values for integer terms larger
              than 2^27 as well as large binaries are very poor. The BIF is
              retained for backward compatibility reasons (it may have been
              used to hash records into a file), but all new code should use
              one of the BIFs _e_r_l_a_n_g_:_p_h_a_s_h_/_2 or _e_r_l_a_n_g_:_p_h_a_s_h_2_/_1_,_2 instead.


       hhdd((LLiisstt)) -->> tteerrmm(())

              Types:

                 List = [term()]

              Returns the head of _L_i_s_t, that is, the first element.

              > hd([1,2,3,4,5]).
              1

              Allowed in guard tests.

              Failure: _b_a_d_a_r_g if _L_i_s_t is the empty list [].

       eerrllaanngg::hhiibbeerrnnaattee((MMoodduullee,, FFuunnccttiioonn,, AArrggss))

              Types:

                 Module = Function = atom()
                 Args = [term()]

              Puts the calling process into a wait state where its memory
              allocation has been reduced as much as possible, which is useful
              if the process does not expect to receive any messages in the
              near future.

              The process will be awaken when a message is sent to it, and
              control will resume in _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n with the arguments given
              by _A_r_g_s with the call stack emptied, meaning that the process
              will terminate when that function returns. Thus
              _e_r_l_a_n_g_:_h_i_b_e_r_n_a_t_e_/_3 will never return to its caller.

              If the process has any message in its message queue, the process
              will be awaken immediately in the same way as described above.

              In more technical terms, what _e_r_l_a_n_g_:_h_i_b_e_r_n_a_t_e_/_3 does is the
              following. It discards the call stack for the process. Then it
              garbage collects the process. After the garbage collection, all
              live data is in one continuous heap. The heap is then shrunken
              to the exact same size as the live data which it holds (even if
              that size is less than the minimum heap size for the process).

              If the size of the live data in the process is less than the
              minimum heap size, the first garbage collection occurring after
              the process has been awaken will ensure that the heap size is
              changed to a size not smaller than the minimum heap size.

              Note that emptying the call stack means that any surrounding
              _c_a_t_c_h is removed and has to be re-inserted after hibernation.
              One effect of this is that processes started using _p_r_o_c___l_i_b
              (also indirectly, such as _g_e_n___s_e_r_v_e_r processes), should use
              pprroocc__lliibb::hhiibbeerrnnaattee//33 instead to ensure that the exception
              handler continues to work when the process wakes up.

       iinntteeggeerr__ttoo__lliisstt((IInntteeggeerr)) -->> ssttrriinngg(())

              Types:

                 Integer = integer()

              Returns a string which corresponds to the text representation of
              _I_n_t_e_g_e_r.

              > integer_to_list(77).
              "77"

       iinntteeggeerr__ttoo__lliisstt((IInntteeggeerr,, BBaassee)) -->> ssttrriinngg(())

              Types:

                 Integer = integer()
                 Base = 2..36

              Returns a string which corresponds to the text representation of
              _I_n_t_e_g_e_r in base _B_a_s_e.

              > integer_to_list(1023, 16).
              "3FF"

       iioolliisstt__ttoo__bbiinnaarryy((IIooLLiissttOOrrBBiinnaarryy)) -->> bbiinnaarryy(())

              Types:

                 IoListOrBinary = iolist() | binary()

              Returns a binary which is made from the integers and binaries in
              _I_o_L_i_s_t_O_r_B_i_n_a_r_y.

              > Bin1 = <<1,2,3>>.
              <<1,2,3>>
              > Bin2 = <<4,5>>.
              <<4,5>>
              > Bin3 = <<6>>.
              <<6>>
              > iolist_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).
              <<1,2,3,1,2,3,4,5,4,6>>

       iioolliisstt__ssiizzee((IItteemm)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Item = iolist() | binary()

              Returns an integer which is the size in bytes of the binary that
              would be the result of _i_o_l_i_s_t___t_o___b_i_n_a_r_y_(_I_t_e_m_).

              > iolist_size([1,2|<<3,4>>]).
              4

       iiss__aalliivvee(()) -->> bboooolleeaann(())

              Returns _t_r_u_e if the local node is alive; that is, if the node
              can be part of a distributed system. Otherwise, it returns
              _f_a_l_s_e.

       iiss__aattoomm((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is an atom; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__bbiinnaarryy((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a binary; otherwise returns _f_a_l_s_e.

              A binary always contains a complete number of bytes.

              Allowed in guard tests.

       iiss__bbiittssttrriinngg((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a bitstring (including a binary);
              otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__bboooolleeaann((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is either the atom _t_r_u_e or the atom _f_a_l_s_e
              (i.e. a boolean); otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       eerrllaanngg::iiss__bbuuiillttiinn((MMoodduullee,, FFuunnccttiioonn,, AArriittyy)) -->> bboooolleeaann(())

              Types:

                 Module = Function = atom()
                 Arity = arity()

              Returns _t_r_u_e if _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n_/_A_r_i_t_y is a BIF implemented in C;
              otherwise returns _f_a_l_s_e. This BIF is useful for builders of
              cross reference tools.

       iiss__ffllooaatt((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a floating point number; otherwise
              returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__ffuunnccttiioonn((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a fun; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__ffuunnccttiioonn((TTeerrmm,, AArriittyy)) -->> bboooolleeaann(())

              Types:

                 Term = term()
                 Arity = arity()

              Returns _t_r_u_e if _T_e_r_m is a fun that can be applied with _A_r_i_t_y
              number of arguments; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

          WWaarrnniinngg::
              Currently, _i_s___f_u_n_c_t_i_o_n_/_2 will also return _t_r_u_e if the first
              argument is a tuple fun (a tuple containing two atoms). In a
              future release, tuple funs will no longer be supported and
              _i_s___f_u_n_c_t_i_o_n_/_2 will return _f_a_l_s_e if given a tuple fun.


       iiss__iinntteeggeerr((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is an integer; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__lliisstt((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a list with zero or more elements;
              otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__nnuummbbeerr((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is either an integer or a floating point
              number; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__ppiidd((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a pid (process identifier); otherwise
              returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__ppoorrtt((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a port identifier; otherwise returns
              _f_a_l_s_e.

              Allowed in guard tests.

       iiss__pprroocceessss__aalliivvee((PPiidd)) -->> bboooolleeaann(())

              Types:

                 Pid = pid()

              _P_i_d must refer to a process at the local node. Returns _t_r_u_e if
              the process exists and is alive, that is, is not exiting and has
              not exited. Otherwise, returns _f_a_l_s_e.

       iiss__rreeccoorrdd((TTeerrmm,, RReeccoorrddTTaagg)) -->> bboooolleeaann(())

              Types:

                 Term = term()
                 RecordTag = atom()

              Returns _t_r_u_e if _T_e_r_m is a tuple and its first element is
              _R_e_c_o_r_d_T_a_g. Otherwise, returns _f_a_l_s_e.

          NNoottee::
              Normally the compiler treats calls to _i_s___r_e_c_o_r_d_/_2 specially. It
              emits code to verify that _T_e_r_m is a tuple, that its first
              element is _R_e_c_o_r_d_T_a_g, and that the size is correct. However, if
              the _R_e_c_o_r_d_T_a_g is not a literal atom, the _i_s___r_e_c_o_r_d_/_2 BIF will be
              called instead and the size of the tuple will not be verified.


              Allowed in guard tests, if _R_e_c_o_r_d_T_a_g is a literal atom.

       iiss__rreeccoorrdd((TTeerrmm,, RReeccoorrddTTaagg,, SSiizzee)) -->> bboooolleeaann(())

              Types:

                 Term = term()
                 RecordTag = atom()
                 Size = integer()

              _R_e_c_o_r_d_T_a_g must be an atom. Returns _t_r_u_e if _T_e_r_m is a tuple, its
              first element is _R_e_c_o_r_d_T_a_g, and its size is _S_i_z_e. Otherwise,
              returns _f_a_l_s_e.

              Allowed in guard tests, provided that _R_e_c_o_r_d_T_a_g is a literal
              atom and _S_i_z_e is a literal integer.

          NNoottee::
              This BIF is documented for completeness. In most cases
              _i_s___r_e_c_o_r_d_/_2 should be used.


       iiss__rreeffeerreennccee((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a reference; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       iiss__ttuuppllee((TTeerrmm)) -->> bboooolleeaann(())

              Types:

                 Term = term()

              Returns _t_r_u_e if _T_e_r_m is a tuple; otherwise returns _f_a_l_s_e.

              Allowed in guard tests.

       lleennggtthh((LLiisstt)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 List = [term()]

              Returns the length of _L_i_s_t.

              > length([1,2,3,4,5,6,7,8,9]).
              9

              Allowed in guard tests.

       lliinnkk((PPiidd)) -->> ttrruuee

              Types:

                 Pid = pid() | port()

              Creates a link between the calling process and another process
              (or port) _P_i_d, if there is not such a link already. If a process
              attempts to create a link to itself, nothing is done. Returns
              _t_r_u_e.

              If _P_i_d does not exist, the behavior of the BIF depends on if the
              calling process is trapping exits or not (see pprroocceessss__ffllaagg//22):

                * If the calling process is not trapping exits, and checking
                  _P_i_d is cheap -- that is, if _P_i_d is local -- _l_i_n_k_/_1 fails
                  with reason _n_o_p_r_o_c.

                * Otherwise, if the calling process is trapping exits, and/or
                  _P_i_d is remote, _l_i_n_k_/_1 returns _t_r_u_e, but an exit signal with
                  reason _n_o_p_r_o_c is sent to the calling process.

       lliisstt__ttoo__aattoomm((SSttrriinngg)) -->> aattoomm(())

              Types:

                 String = string()

              Returns the atom whose text representation is _S_t_r_i_n_g.

              > list_to_atom("Erlang").

       lliisstt__ttoo__bbiinnaarryy((IIooLLiisstt)) -->> bbiinnaarryy(())

              Types:

                 IoList = iolist()

              Returns a binary which is made from the integers and binaries in
              _I_o_L_i_s_t.

              > Bin1 = <<1,2,3>>.
              <<1,2,3>>
              > Bin2 = <<4,5>>.
              <<4,5>>
              > Bin3 = <<6>>.
              <<6>>
              > list_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).
              <<1,2,3,1,2,3,4,5,4,6>>

       lliisstt__ttoo__bbiittssttrriinngg((BBiittssttrriinnggLLiisstt)) -->> bbiittssttrriinngg(())

              Types:

                 BitstringList = [BitstringList | bitstring() | char()]

              Returns a bitstring which is made from the integers and
              bitstrings in _B_i_t_s_t_r_i_n_g_L_i_s_t. (The last tail in _B_i_t_s_t_r_i_n_g_L_i_s_t is
              allowed to be a bitstring.)

              > Bin1 = <<1,2,3>>.
              <<1,2,3>>
              > Bin2 = <<4,5>>.
              <<4,5>>
              > Bin3 = <<6,7:4,>>.
              <<6>>
              > list_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).
              <<1,2,3,1,2,3,4,5,4,6,7:46>>

       lliisstt__ttoo__eexxiissttiinngg__aattoomm((SSttrriinngg)) -->> aattoomm(())

              Types:

                 String = string()

              Returns the atom whose text representation is _S_t_r_i_n_g, but only
              if there already exists such atom.

              Failure: _b_a_d_a_r_g if there does not already exist an atom whose
              text representation is _S_t_r_i_n_g.

       lliisstt__ttoo__ffllooaatt((SSttrriinngg)) -->> ffllooaatt(())

              Types:

                 String = string()

              Returns the float whose text representation is _S_t_r_i_n_g.

              > list_to_float("2.2017764e+0").
              2.2017764

              Failure: _b_a_d_a_r_g if _S_t_r_i_n_g contains a bad representation of a
              float.

       lliisstt__ttoo__iinntteeggeerr((SSttrriinngg)) -->> iinntteeggeerr(())

              Types:

                 String = string()

              Returns an integer whose text representation is _S_t_r_i_n_g.

              > list_to_integer("123").
              123

              Failure: _b_a_d_a_r_g if _S_t_r_i_n_g contains a bad representation of an
              integer.

       lliisstt__ttoo__iinntteeggeerr((SSttrriinngg,, BBaassee)) -->> iinntteeggeerr(())

              Types:

                 String = string()
                 Base = 2..36

              Returns an integer whose text representation in base _B_a_s_e is
              _S_t_r_i_n_g.

              > list_to_integer("3FF", 16).
              1023

              Failure: _b_a_d_a_r_g if _S_t_r_i_n_g contains a bad representation of an
              integer.

       lliisstt__ttoo__ppiidd((SSttrriinngg)) -->> ppiidd(())

              Types:

                 String = string()

              Returns a pid whose text representation is _S_t_r_i_n_g.

          WWaarrnniinngg::
              This BIF is intended for debugging and for use in the Erlang
              operating system. It should not be used in application programs.


              > list_to_pid("<0.4.1>").
              <0.4.1>

              Failure: _b_a_d_a_r_g if _S_t_r_i_n_g contains a bad representation of a
              pid.

       lliisstt__ttoo__ttuuppllee((LLiisstt)) -->> ttuuppllee(())

              Types:

                 List = [term()]

              Returns a tuple which corresponds to _L_i_s_t. _L_i_s_t can contain any
              Erlang terms.

              > list_to_tuple([share, ['Ericsson_B', 163]]).
              {share, ['Ericsson_B', 163]}

       llooaadd__mmoodduullee((MMoodduullee,, BBiinnaarryy)) -->> {{mmoodduullee,, MMoodduullee}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Module = atom()
                 Binary = binary()
                 Reason = badfile | not_purged | badfile

              If _B_i_n_a_r_y contains the object code for the module _M_o_d_u_l_e, this
              BIF loads that object code. Also, if the code for the module
              _M_o_d_u_l_e already exists, all export references are replaced so
              they point to the newly loaded code. The previously loaded code
              is kept in the system as old code, as there may still be
              processes which are executing that code. It returns either
              _{_m_o_d_u_l_e_, _M_o_d_u_l_e_}, or _{_e_r_r_o_r_, _R_e_a_s_o_n_} if loading fails. _R_e_a_s_o_n is
              one of the following:

                _b_a_d_f_i_l_e:
                  The object code in _B_i_n_a_r_y has an incorrect format.

                _n_o_t___p_u_r_g_e_d:
                  _B_i_n_a_r_y contains a module which cannot be loaded because old
                  code for this module already exists.

                _b_a_d_f_i_l_e:
                  The object code contains code for another module than _M_o_d_u_l_e

          WWaarrnniinngg::
              This BIF is intended for the code server (see ccooddee((33))) and
              should not be used elsewhere.


       eerrllaanngg::llooaadd__nniiff((PPaatthh,, LLooaaddIInnffoo)) -->> ookk || {{eerrrroorr,, {{RReeaassoonn,, TTeexxtt}}}}

              Types:

                 Path = string()
                 LoadInfo = term()
                 Reason = load_failed | bad_lib | load | reload | upgrade |
                 old_code
                 Text = string()

          NNoottee::
              In releases older than OTP R14B, NIFs were an experimental
              feature. Versions of OTP older than R14B might have different
              and possibly incompatible NIF semantics and interfaces. For
              example, in R13B03 the return value on failure was
              _{_e_r_r_o_r_,_R_e_a_s_o_n_,_T_e_x_t_}.


              Loads and links a dynamic library containing native implemented
              functions (NIFs) for a module. _P_a_t_h is a file path to the
              sharable object/dynamic library file minus the OS-dependent file
              extension (.so for Unix and .dll for Windows). See eerrll__nniiff on
              how to implement a NIF library.

              _L_o_a_d_I_n_f_o can be any term. It will be passed on to the library as
              part of the initialization. A good practice is to include a
              module version number to support future code upgrade scenarios.

              The call to _l_o_a_d___n_i_f_/_2 must be made _d_i_r_e_c_t_l_y from the Erlang
              code of the module that the NIF library belongs to.

              It returns either _o_k, or _{_e_r_r_o_r_,_{_R_e_a_s_o_n_,_T_e_x_t_}_} if loading fails.
              _R_e_a_s_o_n is one of the atoms below, while _T_e_x_t is a human readable
              string that may give some more information about the failure.

                _l_o_a_d___f_a_i_l_e_d:
                  The OS failed to load the NIF library.

                _b_a_d___l_i_b:
                  The library did not fulfil the requirements as a NIF library
                  of the calling module.

                _l_o_a_d _| _r_e_l_o_a_d _| _u_p_g_r_a_d_e:
                  The corresponding library callback was not successful.

                _o_l_d___c_o_d_e:
                  The call to _l_o_a_d___n_i_f_/_2 was made from the old code of a
                  module that has been upgraded. This is not allowed.

       eerrllaanngg::llooaaddeedd(()) -->> [[MMoodduullee]]

              Types:

                 Module = atom()

              Returns a list of all loaded Erlang modules (current and/or old
              code), including preloaded modules.

              See also ccooddee((33)).

       eerrllaanngg::llooccaallttiimmee(()) -->> DDaatteeTTiimmee

              Types:

                 DateTime = ccaalleennddaarr::ddaatteettiimmee(())

              Returns the current local date and time _{_{_Y_e_a_r_, _M_o_n_t_h_, _D_a_y_}_,
              _{_H_o_u_r_, _M_i_n_u_t_e_, _S_e_c_o_n_d_}_}.

              The time zone and daylight saving time correction depend on the
              underlying OS.

              > erlang:localtime().
              {{1996,11,6},{14,45,17}}

       eerrllaanngg::llooccaallttiimmee__ttoo__uunniivveerrssaallttiimmee((LLooccaallttiimmee :::: {{DDaattee11,, TTiimmee11}})) -->>
                                            {{DDaattee22,, TTiimmee22}}

              Types:

                 Date1 = Date2 = ccaalleennddaarr::ddaattee(())
                 Time1 = Time2 = ccaalleennddaarr::ttiimmee(())

              Converts local date and time to Universal Time Coordinated
              (UTC), if this is supported by the underlying OS. Otherwise, no
              conversion is done and _{_D_a_t_e_1_, _T_i_m_e_1_} is returned.

              > erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}).
              {{1996,11,6},{13,45,17}}

              Failure: _b_a_d_a_r_g if _D_a_t_e_1 or _T_i_m_e_1 do not denote a valid date or
              time.

       eerrllaanngg::llooccaallttiimmee__ttoo__uunniivveerrssaallttiimmee(({{DDaattee11,, TTiimmee11}},, IIssDDsstt)) -->> {{DDaattee22,,
       TTiimmee22}}

              Types:

                 Date1 = Date2 = ccaalleennddaarr::ddaattee(())
                 Time1 = Time2 = ccaalleennddaarr::ttiimmee(())
                 IsDst = true | false | undefined

              Converts local date and time to Universal Time Coordinated (UTC)
              just like _e_r_l_a_n_g_:_l_o_c_a_l_t_i_m_e___t_o___u_n_i_v_e_r_s_a_l_t_i_m_e_/_1, but the caller
              decides if daylight saving time is active or not.

              If _I_s_D_s_t _=_= _t_r_u_e the _{_D_a_t_e_1_, _T_i_m_e_1_} is during daylight saving
              time, if _I_s_D_s_t _=_= _f_a_l_s_e it is not, and if _I_s_D_s_t _=_= _u_n_d_e_f_i_n_e_d the
              underlying OS may guess, which is the same as calling
              _e_r_l_a_n_g_:_l_o_c_a_l_t_i_m_e___t_o___u_n_i_v_e_r_s_a_l_t_i_m_e_(_{_D_a_t_e_1_, _T_i_m_e_1_}_).

              > erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, true).
              {{1996,11,6},{12,45,17}}
              > erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, false).
              {{1996,11,6},{13,45,17}}
              > erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, undefined).
              {{1996,11,6},{13,45,17}}

              Failure: _b_a_d_a_r_g if _D_a_t_e_1 or _T_i_m_e_1 do not denote a valid date or
              time.

       mmaakkee__rreeff(()) -->> rreeffeerreennccee(())

              Returns an almost unique reference.

              The returned reference will re-occur after approximately 2^82
              calls; therefore it is unique enough for practical purposes.

              > make_ref().
              #Ref<0.0.0.135>

       eerrllaanngg::mmaakkee__ttuuppllee((AArriittyy,, IInniittiiaallVVaalluuee)) -->> ttuuppllee(())

              Types:

                 Arity = arity()
                 InitialValue = term()

              Returns a new tuple of the given _A_r_i_t_y, where all elements are
              _I_n_i_t_i_a_l_V_a_l_u_e.

              > erlang:make_tuple(4, []).
              {[],[],[],[]}

       eerrllaanngg::mmaakkee__ttuuppllee((AArriittyy,, DDeeffaauulltt,, IInniittLLiisstt)) -->> ttuuppllee(())

              Types:

                 Arity = arity()
                 Default = term()
                 InitList = [{Position,term()}]
                 Position = integer()

              _e_r_l_a_n_g_:_m_a_k_e___t_u_p_l_e first creates a tuple of size _A_r_i_t_y where each
              element has the value _D_e_f_a_u_l_t. It then fills in values from
              _I_n_i_t_L_i_s_t. Each list element in _I_n_i_t_L_i_s_t must be a two-tuple
              where the first element is a position in the newly created tuple
              and the second element is any term. If a position occurs more
              than once in the list, the term corresponding to last occurrence
              will be used.

              > erlang:make_tuple(5, [], [{2,ignored},{5,zz},{2,aa}]).
              {{[],aa,[],[],zz}

       mmaaxx((TTeerrmm11,, TTeerrmm22)) -->> MMaaxxiimmuumm

              Types:

                 Term1 = Term2 = Maximum = term()

              Return the largest of _T_e_r_m_1 and _T_e_r_m_2; if the terms compare
              equal, _T_e_r_m_1 will be returned.

       eerrllaanngg::mmdd55((DDaattaa)) -->> DDiiggeesstt

              Types:

                 Data = iodata()
                 Digest = binary()

              Computes an _M_D_5 message digest from _D_a_t_a, where the length of
              the digest is 128 bits (16 bytes). _D_a_t_a is a binary or a list of
              small integers and binaries.

              See The MD5 Message Digest Algorithm (RFC 1321) for more
              information about MD5.

          WWaarrnniinngg::
              The MD5 Message Digest Algorithm is _n_o_t considered safe for
              code-signing or software integrity purposes.


       eerrllaanngg::mmdd55__ffiinnaall((CCoonntteexxtt)) -->> DDiiggeesstt

              Types:

                 Context = Digest = binary()

              Finishes the update of an MD5 _C_o_n_t_e_x_t and returns the computed
              _M_D_5 message digest.

       eerrllaanngg::mmdd55__iinniitt(()) -->> CCoonntteexxtt

              Types:

                 Context = binary()

              Creates an MD5 context, to be used in subsequent calls to
              _m_d_5___u_p_d_a_t_e_/_2.

       eerrllaanngg::mmdd55__uuppddaattee((CCoonntteexxtt,, DDaattaa)) -->> NNeewwCCoonntteexxtt

              Types:

                 Data = iodata()
                 Context = NewContext = binary()

              Updates an MD5 _C_o_n_t_e_x_t with _D_a_t_a, and returns a _N_e_w_C_o_n_t_e_x_t.

       eerrllaanngg::mmeemmoorryy(()) -->> [[{{TTyyppee,, SSiizzee}}]]

              Types:

                 Type, Size -- see below

              Returns a list containing information about memory dynamically
              allocated by the Erlang emulator. Each element of the list is a
              tuple _{_T_y_p_e_, _S_i_z_e_}. The first element _T_y_p_eis an atom describing
              memory type. The second element _S_i_z_eis memory size in bytes. A
              description of each memory type follows:

                _t_o_t_a_l:
                  The total amount of memory currently allocated, which is the
                  same as the sum of memory size for _p_r_o_c_e_s_s_e_s and _s_y_s_t_e_m.

                _p_r_o_c_e_s_s_e_s:
                  The total amount of memory currently allocated by the Erlang
                  processes.

                _p_r_o_c_e_s_s_e_s___u_s_e_d:
                  The total amount of memory currently used by the Erlang
                  processes.

                  This memory is part of the memory presented as _p_r_o_c_e_s_s_e_s
                  memory.

                _s_y_s_t_e_m:
                  The total amount of memory currently allocated by the
                  emulator that is not directly related to any Erlang process.

                  Memory presented as _p_r_o_c_e_s_s_e_s is not included in this
                  memory.

                _a_t_o_m:
                  The total amount of memory currently allocated for atoms.

                  This memory is part of the memory presented as _s_y_s_t_e_m
                  memory.

                _a_t_o_m___u_s_e_d:
                  The total amount of memory currently used for atoms.

                  This memory is part of the memory presented as _a_t_o_m memory.

                _b_i_n_a_r_y:
                  The total amount of memory currently allocated for binaries.

                  This memory is part of the memory presented as _s_y_s_t_e_m
                  memory.

                _c_o_d_e:
                  The total amount of memory currently allocated for Erlang
                  code.

                  This memory is part of the memory presented as _s_y_s_t_e_m
                  memory.

                _e_t_s:
                  The total amount of memory currently allocated for ets
                  tables.

                  This memory is part of the memory presented as _s_y_s_t_e_m
                  memory.

                _m_a_x_i_m_u_m:
                  The maximum total amount of memory allocated since the
                  emulator was started.

                  This tuple is only present when the emulator is run with
                  instrumentation.

                  For information on how to run the emulator with
                  instrumentation see iinnssttrruummeenntt((33)) and/or eerrll((11)).

                _l_o_w:
                  Only on 64-bit halfword emulator.

                  The total amount of memory allocated in low memory areas
                  that are restricted to less than 4 Gb even though the system
                  may have more physical memory.

                  May be removed in future releases of halfword emulator.

          NNoottee::
              The _s_y_s_t_e_m value is not complete. Some allocated memory that
              should be part of the _s_y_s_t_e_m value are not.

              When the emulator is run with instrumentation, the _s_y_s_t_e_m value
              is more accurate, but memory directly allocated by _m_a_l_l_o_c (and
              friends) are still not part of the _s_y_s_t_e_m value. Direct calls to
              _m_a_l_l_o_c are only done from OS specific runtime libraries and
              perhaps from user implemented Erlang drivers that do not use the
              memory allocation functions in the driver interface.

              Since the _t_o_t_a_l value is the sum of _p_r_o_c_e_s_s_e_s and _s_y_s_t_e_m the
              error in _s_y_s_t_e_m will propagate to the _t_o_t_a_l value.

              The different amounts of memory that are summed are _n_o_t gathered
              atomically which also introduce an error in the result.


              The different values has the following relation to each other.
              Values beginning with an uppercase letter is not part of the
              result.

                      total = processes + system
                      processes = processes_used + ProcessesNotUsed
                      system = atom + binary + code + ets + OtherSystem
                      atom = atom_used + AtomNotUsed

                      RealTotal = processes + RealSystem
                      RealSystem = system + MissedSystem

              More tuples in the returned list may be added in the future.

          NNoottee::
              The _t_o_t_a_l value is supposed to be the total amount of memory
              dynamically allocated by the emulator. Shared libraries, the
              code of the emulator itself, and the emulator stack(s) are not
              supposed to be included. That is, the _t_o_t_a_l value is _n_o_t
              supposed to be equal to the total size of all pages mapped to
              the emulator. Furthermore, due to fragmentation and pre-
              reservation of memory areas, the size of the memory segments
              which contain the dynamically allocated memory blocks can be
              substantially larger than the total size of the dynamically
              allocated memory blocks.


          NNoottee::
              Since erts version 5.6.4 _e_r_l_a_n_g_:_m_e_m_o_r_y_/_0 requires that all
              eerrttss__aalllloocc((33)) allocators are enabled (default behaviour).


              Failure:

                _n_o_t_s_u_p:
                   If an eerrttss__aalllloocc((33)) allocator has been disabled.

       eerrllaanngg::mmeemmoorryy((TTyyppee || [[TTyyppee]])) -->> SSiizzee || [[{{TTyyppee,, SSiizzee}}]]

              Types:

                 Type, Size -- see below

              Returns the memory size in bytes allocated for memory of type
              _T_y_p_e. The argument can also be given as a list of _T_y_p_e atoms, in
              which case a corresponding list of _{_T_y_p_e_, _S_i_z_e_} tuples is
              returned.

          NNoottee::
              Since erts version 5.6.4 _e_r_l_a_n_g_:_m_e_m_o_r_y_/_1 requires that all
              eerrttss__aalllloocc((33)) allocators are enabled (default behaviour).


              Failures:

                _b_a_d_a_r_g:
                   If _T_y_p_e is not one of the memory types listed in the
                  documentation of eerrllaanngg::mmeemmoorryy//00.

                _b_a_d_a_r_g:
                   If _m_a_x_i_m_u_m is passed as _T_y_p_e and the emulator is not run in
                  instrumented mode.

                _n_o_t_s_u_p:
                   If an eerrttss__aalllloocc((33)) allocator has been disabled.

              See also eerrllaanngg::mmeemmoorryy//00.

       mmiinn((TTeerrmm11,, TTeerrmm22)) -->> MMiinniimmuumm

              Types:

                 Term1 = Term2 = Minimum = term()

              Return the smallest of _T_e_r_m_1 and _T_e_r_m_2; if the terms compare
              equal, _T_e_r_m_1 will be returned.

       mmoodduullee__llooaaddeedd((MMoodduullee)) -->> bboooolleeaann(())

              Types:

                 Module = atom()

              Returns _t_r_u_e if the module _M_o_d_u_l_e is loaded, otherwise returns
              _f_a_l_s_e. It does not attempt to load the module.

          WWaarrnniinngg::
              This BIF is intended for the code server (see ccooddee((33))) and
              should not be used elsewhere.


       mmoonniittoorr((TTyyppee,, IItteemm)) -->> MMoonniittoorrRReeff

              Types:

                 Type = process
                 Item = pid() | {RegName, Node} | RegName
                  RegName = atom()
                  Node = node()
                 MonitorRef = reference()

              The calling process starts monitoring _I_t_e_m which is an object of
              type _T_y_p_e.

              Currently only processes can be monitored, i.e. the only allowed
              _T_y_p_e is _p_r_o_c_e_s_s, but other types may be allowed in the future.

              _I_t_e_m can be:

                _p_i_d_(_):
                  The pid of the process to monitor.

                _{_R_e_g_N_a_m_e_, _N_o_d_e_}:
                  A tuple consisting of a registered name of a process and a
                  node name. The process residing on the node _N_o_d_e with the
                  registered name _R_e_g_N_a_m_e will be monitored.

                _R_e_g_N_a_m_e:
                  The process locally registered as _R_e_g_N_a_m_e will be monitored.

          NNoottee::
              When a process is monitored by registered name, the process that
              has the registered name at the time when _m_o_n_i_t_o_r_/_2 is called
              will be monitored. The monitor will not be effected, if the
              registered name is unregistered.


              A _'_D_O_W_N_' message will be sent to the monitoring process if _I_t_e_m
              dies, if _I_t_e_m does not exist, or if the connection is lost to
              the node which _I_t_e_m resides on. A _'_D_O_W_N_' message has the
              following pattern:

              {'DOWN', MonitorRef, Type, Object, Info}

              where _M_o_n_i_t_o_r_R_e_f and _T_y_p_e are the same as described above, and:

                _O_b_j_e_c_t:
                  A reference to the monitored object:

                  * the pid of the monitored process, if _I_t_e_m was specified as
                    a pid.

                  * _{_R_e_g_N_a_m_e_, _N_o_d_e_}, if _I_t_e_m was specified as _{_R_e_g_N_a_m_e_, _N_o_d_e_}.

                  * _{_R_e_g_N_a_m_e_, _N_o_d_e_}, if _I_t_e_m was specified as _R_e_g_N_a_m_e. _N_o_d_e
                    will in this case be the name of the local node (_n_o_d_e_(_)).

                _I_n_f_o:
                  Either the exit reason of the process, _n_o_p_r_o_c (non-existing
                  process), or _n_o_c_o_n_n_e_c_t_i_o_n (no connection to _N_o_d_e).

          NNoottee::
              If/when _m_o_n_i_t_o_r_/_2 is extended (e.g. to handle other item types
              than _p_r_o_c_e_s_s), other possible values for _O_b_j_e_c_t, and _I_n_f_o in the
              _'_D_O_W_N_' message will be introduced.


              The monitoring is turned off either when the _'_D_O_W_N_' message is
              sent, or when ddeemmoonniittoorr//11 is called.

              If an attempt is made to monitor a process on an older node
              (where remote process monitoring is not implemented or one where
              remote process monitoring by registered name is not
              implemented), the call fails with _b_a_d_a_r_g.

              Making several calls to _m_o_n_i_t_o_r_/_2 for the same _I_t_e_m is not an
              error; it results in as many, completely independent,
              monitorings.

          NNoottee::
              The format of the _'_D_O_W_N_' message changed in the 5.2 version of
              the emulator (OTP release R9B) for monitor _b_y _r_e_g_i_s_t_e_r_e_d _n_a_m_e.
              The _O_b_j_e_c_t element of the _'_D_O_W_N_' message could in earlier
              versions sometimes be the pid of the monitored process and
              sometimes be the registered name. Now the _O_b_j_e_c_t element is
              always a tuple consisting of the registered name and the node
              name. Processes on new nodes (emulator version 5.2 or greater)
              will always get _'_D_O_W_N_' messages on the new format even if they
              are monitoring processes on old nodes. Processes on old nodes
              will always get _'_D_O_W_N_' messages on the old format.


       mmoonniittoorr__nnooddee((NNooddee,, FFllaagg)) -->> ttrruuee

              Types:

                 Node = node()
                 Flag = boolean()

              Monitors the status of the node _N_o_d_e. If _F_l_a_g is _t_r_u_e,
              monitoring is turned on; if _F_l_a_g is _f_a_l_s_e, monitoring is turned
              off.

              Making several calls to _m_o_n_i_t_o_r___n_o_d_e_(_N_o_d_e_, _t_r_u_e_) for the same
              _N_o_d_e is not an error; it results in as many, completely
              independent, monitorings.

              If _N_o_d_e fails or does not exist, the message _{_n_o_d_e_d_o_w_n_, _N_o_d_e_} is
              delivered to the process. If a process has made two calls to
              _m_o_n_i_t_o_r___n_o_d_e_(_N_o_d_e_, _t_r_u_e_) and _N_o_d_e terminates, two _n_o_d_e_d_o_w_n
              messages are delivered to the process. If there is no connection
              to _N_o_d_e, there will be an attempt to create one. If this fails,
              a _n_o_d_e_d_o_w_n message is delivered.

              Nodes connected through hidden connections can be monitored as
              any other node.

              Failure: _b_a_d_a_r_gif the local node is not alive.

       eerrllaanngg::mmoonniittoorr__nnooddee((NNooddee,, FFllaagg,, OOppttiioonnss)) -->> ttrruuee

              Types:

                 Node = node()
                 Flag = boolean()
                 Options = [Option]
                 Option = allow_passive_connect

              Behaves as _m_o_n_i_t_o_r___n_o_d_e_/_2 except that it allows an extra option
              to be given, namely _a_l_l_o_w___p_a_s_s_i_v_e___c_o_n_n_e_c_t. The option allows the
              BIF to wait the normal net connection timeout for the _m_o_n_i_t_o_r_e_d
              _n_o_d_e to connect itself, even if it cannot be actively connected
              from this node (i.e. it is blocked). The state where this might
              be useful can only be achieved by using the kernel option
              _d_i_s_t___a_u_t_o___c_o_n_n_e_c_t _o_n_c_e. If that kernel option is not used, the
              _a_l_l_o_w___p_a_s_s_i_v_e___c_o_n_n_e_c_t option has no effect.

          NNoottee::
              The _a_l_l_o_w___p_a_s_s_i_v_e___c_o_n_n_e_c_t option is used internally and is
              seldom needed in applications where the network topology and the
              kernel options in effect is known in advance.


              Failure: _b_a_d_a_r_g if the local node is not alive or the option
              list is malformed.

       eerrllaanngg::nniiff__eerrrroorr((RReeaassoonn))

              Types:

                 Reason = term()

              Works exactly like eerrllaanngg::eerrrroorr//11, but Dialyzer thinks that this
              BIF will return an arbitrary term. When used in a stub function
              for a NIF to generate an exception when the NIF library is not
              loaded, Dialyzer will not generate false warnings.

       eerrllaanngg::nniiff__eerrrroorr((RReeaassoonn,, AArrggss))

              Types:

                 Reason = term()
                 Args = [term()]

              Works exactly like eerrllaanngg::eerrrroorr//22, but Dialyzer thinks that this
              BIF will return an arbitrary term. When used in a stub function
              for a NIF to generate an exception when the NIF library is not
              loaded, Dialyzer will not generate false warnings.

       nnooddee(()) -->> NNooddee

              Types:

                 Node = node()

              Returns the name of the local node. If the node is not alive,
              _n_o_n_o_d_e_@_n_o_h_o_s_t is returned instead.

              Allowed in guard tests.

       nnooddee((AArrgg)) -->> NNooddee

              Types:

                 Arg = pid() | port() | reference()
                 Node = node()

              Returns the node where _A_r_g is located. _A_r_g can be a pid, a
              reference, or a port. If the local node is not alive,
              _n_o_n_o_d_e_@_n_o_h_o_s_t is returned.

              Allowed in guard tests.

       nnooddeess(()) -->> NNooddeess

              Types:

                 Nodes = [node()]

              Returns a list of all visible nodes in the system, excluding the
              local node. Same as _n_o_d_e_s_(_v_i_s_i_b_l_e_).

       nnooddeess((AArrgg || [[AArrgg]])) -->> NNooddeess

              Types:

                 Arg = visible | hidden | connected | this | known
                 Nodes = [node()]

              Returns a list of nodes according to argument given. The result
              returned when the argument is a list, is the list of nodes
              satisfying the disjunction(s) of the list elements.

              _A_r_g can be any of the following:

                _v_i_s_i_b_l_e:
                  Nodes connected to this node through normal connections.

                _h_i_d_d_e_n:
                  Nodes connected to this node through hidden connections.

                _c_o_n_n_e_c_t_e_d:
                  All nodes connected to this node.

                _t_h_i_s:
                  This node.

                _k_n_o_w_n:
                  Nodes which are known to this node, i.e., connected,
                  previously connected, etc.

              Some equalities: _[_n_o_d_e_(_)_] _= _n_o_d_e_s_(_t_h_i_s_), _n_o_d_e_s_(_c_o_n_n_e_c_t_e_d_) _=
              _n_o_d_e_s_(_[_v_i_s_i_b_l_e_, _h_i_d_d_e_n_]_), and _n_o_d_e_s_(_) _= _n_o_d_e_s_(_v_i_s_i_b_l_e_).

              If the local node is not alive, _n_o_d_e_s_(_t_h_i_s_) _=_= _n_o_d_e_s_(_k_n_o_w_n_) _=_=
              _[_n_o_n_o_d_e_@_n_o_h_o_s_t_], for any other _A_r_g the empty list [] is
              returned.

       nnooww(()) -->> ttiimmeessttaammpp(())

              Types:

                 timestamp() = {MegaSecs, Secs, MicroSecs}
                 MegaSecs = Secs = MicroSecs = integer() >= 0

              Returns the tuple _{_M_e_g_a_S_e_c_s_, _S_e_c_s_, _M_i_c_r_o_S_e_c_s_} which is the
              elapsed time since 00:00 GMT, January 1, 1970 (zero hour) on the
              assumption that the underlying OS supports this. Otherwise, some
              other point in time is chosen. It is also guaranteed that
              subsequent calls to this BIF returns continuously increasing
              values. Hence, the return value from _n_o_w_(_) can be used to
              generate unique time-stamps, and if it is called in a tight loop
              on a fast machine the time of the node can become skewed.

              It can only be used to check the local time of day if the time-
              zone info of the underlying operating system is properly
              configured.

              If you do not need the return value to be unique and
              monotonically increasing, use ooss::ttiimmeessttaammpp//00 instead to avoid
              some overhead.

       ooppeenn__ppoorrtt((PPoorrttNNaammee,, PPoorrttSSeettttiinnggss)) -->> ppoorrtt(())

              Types:

                 PortName = {spawn, Command} | {spawn_driver, Command} |
                 {spawn_executable, FileName} | {fd, In, Out}
                  Command = string()
                  FileName = [ FileNameChar ] | binary()
                  FileNameChar = integer() (1..255 or any Unicode codepoint,
                 see description)
                  In = Out = integer()
                 PortSettings = [Opt]
                  Opt = {packet, N} | stream | {line, L} | {cd, Dir} | {env,
                 Env} | {args, [ ArgString ]} | {arg0, ArgString} |
                 exit_status | use_stdio | nouse_stdio | stderr_to_stdout | in
                 | out | binary | eof
                  N = 1 | 2 | 4
                  L = integer()
                  Dir = string()
                  ArgString = [ FileNameChar ] | binary()
                  Env = [{Name, Val}]
                  Name = string()
                  Val = string() | false

              Returns a port identifier as the result of opening a new Erlang
              port. A port can be seen as an external Erlang process. _P_o_r_t_N_a_m_e
              is one of the following:

                _{_s_p_a_w_n_, _C_o_m_m_a_n_d_}:
                  Starts an external program. _C_o_m_m_a_n_d is the name of the
                  external program which will be run. _C_o_m_m_a_n_d runs outside the
                  Erlang work space unless an Erlang driver with the name
                  _C_o_m_m_a_n_d is found. If found, that driver will be started. A
                  driver runs in the Erlang workspace, which means that it is
                  linked with the Erlang runtime system.

                  When starting external programs on Solaris, the system call
                  _v_f_o_r_k is used in preference to _f_o_r_k for performance reasons,
                  although it has a history of being less robust. If there are
                  problems with using _v_f_o_r_k, setting the environment variable
                  _E_R_L___N_O___V_F_O_R_K to any value will cause _f_o_r_k to be used
                  instead.

                  For external programs, the _P_A_T_H is searched (or an
                  equivalent method is used to find programs, depending on
                  operating system). This is done by invoking the shell on
                  certain platforms. The first space separated token of the
                  command will be considered as the name of the executable (or
                  driver). This (among other things) makes this option
                  unsuitable for running programs having spaces in file or
                  directory names. Use {spawn_executable, Command} instead if
                  spaces in executable file names is desired.

                _{_s_p_a_w_n___d_r_i_v_e_r_, _C_o_m_m_a_n_d_}:
                  Works like _{_s_p_a_w_n_, _C_o_m_m_a_n_d_}, but demands the first (space
                  separated) token of the command to be the name of a loaded
                  driver. If no driver with that name is loaded, a _b_a_d_a_r_g
                  error is raised.

                _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}:
                  Works like _{_s_p_a_w_n_, _C_o_m_m_a_n_d_}, but only runs external
                  executables. The _C_o_m_m_a_n_d in its whole is used as the name of
                  the executable, including any spaces. If arguments are to be
                  passed, the _a_r_g_s and _a_r_g_0 _P_o_r_t_S_e_t_t_i_n_g_s can be used.

                  The shell is not usually invoked to start the program, it's
                  executed directly. Neither is the _P_A_T_H (or equivalent)
                  searched. To find a program in the PATH to execute, use
                  ooss::ffiinndd__eexxeeccuuttaabbllee//11.

                  Only if a shell script or _._b_a_t file is executed, the
                  appropriate command interpreter will implicitly be invoked,
                  but there will still be no command argument expansion or
                  implicit PATH search.

                  The name of the executable as well as the arguments given in
                  _a_r_g_s and _a_r_g_0 is subject to Unicode file name translation if
                  the system is running in Unicode file name mode. To avoid
                  translation or force i.e. UTF-8, supply the executable
                  and/or arguments as a binary in the correct encoding. See
                  the ffiillee module, the  ffiillee::nnaattiivvee__nnaammee__eennccooddiinngg//00 function
                  and the ssttddlliibb uusseerrss gguuiiddee  for details.

            NNoottee::
                The characters in the name (if given as a list) can only be >
                255 if the Erlang VM is started in Unicode file name
                translation mode, otherwise the name of the executable is
                limited to the ISO-latin-1 character set.


                  If the _C_o_m_m_a_n_d cannot be run, an error exception, with the
                  posix error code as the reason, is raised. The error reason
                  may differ between operating systems. Typically the error
                  _e_n_o_e_n_t is raised when one tries to run a program that is not
                  found and _e_a_c_c_e_s_s is raised when the given file is not
                  executable.

                _{_f_d_, _I_n_, _O_u_t_}:
                  Allows an Erlang process to access any currently opened file
                  descriptors used by Erlang. The file descriptor _I_n can be
                  used for standard input, and the file descriptor _O_u_t for
                  standard output. It is only used for various servers in the
                  Erlang operating system (_s_h_e_l_l and _u_s_e_r). Hence, its use is
                  very limited.

              _P_o_r_t_S_e_t_t_i_n_g_s is a list of settings for the port. Valid settings
              are:

                _{_p_a_c_k_e_t_, _N_}:
                  Messages are preceded by their length, sent in _N bytes, with
                  the most significant byte first. Valid values for _N are 1,
                  2, or 4.

                _s_t_r_e_a_m:
                  Output messages are sent without packet lengths. A user-
                  defined protocol must be used between the Erlang process and
                  the external object.

                _{_l_i_n_e_, _L_}:
                  Messages are delivered on a per line basis. Each line
                  (delimited by the OS-dependent newline sequence) is
                  delivered in one single message. The message data format is
                  _{_F_l_a_g_, _L_i_n_e_}, where _F_l_a_g is either _e_o_l or _n_o_e_o_l and _L_i_n_e is
                  the actual data delivered (without the newline sequence).

                  _L specifies the maximum line length in bytes. Lines longer
                  than this will be delivered in more than one message, with
                  the _F_l_a_g set to _n_o_e_o_l for all but the last message. If end
                  of file is encountered anywhere else than immediately
                  following a newline sequence, the last line will also be
                  delivered with the _F_l_a_g set to _n_o_e_o_l. In all other cases,
                  lines are delivered with _F_l_a_g set to _e_o_l.

                  The _{_p_a_c_k_e_t_, _N_} and _{_l_i_n_e_, _L_} settings are mutually
                  exclusive.

                _{_c_d_, _D_i_r_}:
                  This is only valid for _{_s_p_a_w_n_, _C_o_m_m_a_n_d_} and
                  _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}. The external program starts
                  using _D_i_r as its working directory. _D_i_r must be a string.
                  Not available on VxWorks.

                _{_e_n_v_, _E_n_v_}:
                  This is only valid for _{_s_p_a_w_n_, _C_o_m_m_a_n_d_} and
                  _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}. The environment of the started
                  process is extended using the environment specifications in
                  _E_n_v.

                  _E_n_v should be a list of tuples _{_N_a_m_e_, _V_a_l_}, where _N_a_m_e is
                  the name of an environment variable, and _V_a_l is the value it
                  is to have in the spawned port process. Both _N_a_m_e and _V_a_l
                  must be strings. The one exception is _V_a_l being the atom
                  _f_a_l_s_e (in analogy with _o_s_:_g_e_t_e_n_v_/_1), which removes the
                  environment variable.

                  If Unicode filename encoding is in effect (see the eerrll
                  mmaannuuaall ppaaggee), the strings (both _N_a_m_e and _V_a_l_u_e) may contain
                  characters with codepoints > 255.

                _{_a_r_g_s_, _[ _s_t_r_i_n_g_(_) _]_}:
                  This option is only valid for _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}
                  and specifies arguments to the executable. Each argument is
                  given as a separate string and (on Unix) eventually ends up
                  as one element each in the argument vector. On other
                  platforms, similar behavior is mimicked.

                  The arguments are not expanded by the shell prior to being
                  supplied to the executable, most notably this means that
                  file wildcard expansion will not happen. Use
                  ffiilleelliibb::wwiillddccaarrdd//11 to expand wildcards for the arguments.
                  Note that even if the program is a Unix shell script,
                  meaning that the shell will ultimately be invoked, wildcard
                  expansion will not happen and the script will be provided
                  with the untouched arguments. On Windows(R), wildcard
                  expansion is always up to the program itself, why this isn't
                  an issue.

                  Note also that the actual executable name (a.k.a. _a_r_g_v_[_0_])
                  should not be given in this list. The proper executable name
                  will automatically be used as argv[0] where applicable.

                  When the Erlang VM is running in Unicode file name mode, the
                  arguments can contain any Unicode characters and will be
                  translated into whatever is appropriate on the underlying
                  OS, which means UTF-8 for all platforms except Windows,
                  which has other (more transparent) ways of dealing with
                  Unicode arguments to programs. To avoid Unicode translation
                  of arguments, they can be supplied as binaries in whatever
                  encoding is deemed appropriate.

            NNoottee::
                The characters in the arguments (if given as a list of
                characters) can only be > 255 if the Erlang VM is started in
                Unicode file name mode, otherwise the arguments are limited to
                the ISO-latin-1 character set.


                  If one, for any reason, wants to explicitly set the program
                  name in the argument vector, the _a_r_g_0 option can be used.

                _{_a_r_g_0_, _s_t_r_i_n_g_(_)_}:
                  This option is only valid for _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}
                  and explicitly specifies the program name argument when
                  running an executable. This might in some circumstances, on
                  some operating systems, be desirable. How the program
                  responds to this is highly system dependent and no specific
                  effect is guaranteed.

                  The unicode file name translation rules of the _a_r_g_s option
                  apply to this option as well.

                _e_x_i_t___s_t_a_t_u_s:
                  This is only valid for _{_s_p_a_w_n_, _C_o_m_m_a_n_d_} where _C_o_m_m_a_n_d refers
                  to an external program, and for _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}.

                  When the external process connected to the port exits, a
                  message of the form _{_P_o_r_t_,_{_e_x_i_t___s_t_a_t_u_s_,_S_t_a_t_u_s_}_} is sent to
                  the connected process, where _S_t_a_t_u_s is the exit status of
                  the external process. If the program aborts, on Unix the
                  same convention is used as the shells do (i.e., 128+signal).

                  If the _e_o_f option has been given as well, the _e_o_f message
                  and the _e_x_i_t___s_t_a_t_u_s message appear in an unspecified order.

                  If the port program closes its stdout without exiting, the
                  _e_x_i_t___s_t_a_t_u_s option will not work.

                _u_s_e___s_t_d_i_o:
                  This is only valid for _{_s_p_a_w_n_, _C_o_m_m_a_n_d_} and
                  _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_}. It allows the standard input
                  and output (file descriptors 0 and 1) of the spawned (UNIX)
                  process for communication with Erlang.

                _n_o_u_s_e___s_t_d_i_o:
                  The opposite of _u_s_e___s_t_d_i_o. Uses file descriptors 3 and 4 for
                  communication with Erlang.

                _s_t_d_e_r_r___t_o___s_t_d_o_u_t:
                  Affects ports to external programs. The executed program
                  gets its standard error file redirected to its standard
                  output file. _s_t_d_e_r_r___t_o___s_t_d_o_u_t and _n_o_u_s_e___s_t_d_i_o are mutually
                  exclusive.

                _o_v_e_r_l_a_p_p_e_d___i_o:
                  Affects ports to external programs on Windows(R) only. The
                  standard input and standard output handles of the port
                  program will, if this option is supplied, be opened with the
                  flag FILE_FLAG_OVERLAPPED, so that the port program can (and
                  has to) do overlapped I/O on its standard handles. This is
                  not normally the case for simple port programs, but an
                  option of value for the experienced Windows programmer. _O_n
                  _a_l_l _o_t_h_e_r _p_l_a_t_f_o_r_m_s_, _t_h_i_s _o_p_t_i_o_n _i_s _s_i_l_e_n_t_l_y _d_i_s_c_a_r_d_e_d.

                _i_n:
                  The port can only be used for input.

                _o_u_t:
                  The port can only be used for output.

                _b_i_n_a_r_y:
                  All IO from the port are binary data objects as opposed to
                  lists of bytes.

                _e_o_f:
                  The port will not be closed at the end of the file and
                  produce an exit signal. Instead, it will remain open and a
                  _{_P_o_r_t_, _e_o_f_} message will be sent to the process holding the
                  port.

                _h_i_d_e:
                  When running on Windows, suppress creation of a new console
                  window when spawning the port program. (This option has no
                  effect on other platforms.)

              The default is _s_t_r_e_a_m for all types of port and _u_s_e___s_t_d_i_o for
              spawned ports.

              Failure: If the port cannot be opened, the exit reason is
              _b_a_d_a_r_g, _s_y_s_t_e_m___l_i_m_i_t, or the Posix error code which most closely
              describes the error, or _e_i_n_v_a_l if no Posix code is appropriate:

                _b_a_d_a_r_g:
                  Bad input arguments to _o_p_e_n___p_o_r_t.

                _s_y_s_t_e_m___l_i_m_i_t:
                  All available ports in the Erlang emulator are in use.

                _e_n_o_m_e_m:
                  There was not enough memory to create the port.

                _e_a_g_a_i_n:
                  There are no more available operating system processes.

                _e_n_a_m_e_t_o_o_l_o_n_g:
                  The external command given was too long.

                _e_m_f_i_l_e:
                  There are no more available file descriptors (for the
                  operating system process that the Erlang emulator runs in).

                _e_n_f_i_l_e:
                  The file table is full (for the entire operating system).

                _e_a_c_c_e_s:
                  The _C_o_m_m_a_n_d given in _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_} does not
                  point out an executable file.

                _e_n_o_e_n_t:
                  The _C_o_m_m_a_n_d given in _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _C_o_m_m_a_n_d_} does not
                  point out an existing file.

              During use of a port opened using _{_s_p_a_w_n_, _N_a_m_e_}, _{_s_p_a_w_n___d_r_i_v_e_r_,
              _N_a_m_e_} or _{_s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_, _N_a_m_e_}, errors arising when sending
              messages to it are reported to the owning process using signals
              of the form _{_'_E_X_I_T_'_, _P_o_r_t_, _P_o_s_i_x_C_o_d_e_}. See _f_i_l_e_(_3_) for possible
              values of _P_o_s_i_x_C_o_d_e.

              The maximum number of ports that can be open at the same time is
              1024 by default, but can be configured by the environment
              variable _E_R_L___M_A_X___P_O_R_T_S.

       eerrllaanngg::pphhaasshh((TTeerrmm,, RRaannggee)) -->> HHaasshh

              Types:

                 Term = term()
                 Range = 1..2^32
                 Hash = 1..Range

              Portable hash function that will give the same hash for the same
              Erlang term regardless of machine architecture and ERTS version
              (the BIF was introduced in ERTS 4.9.1.1). Range can be between 1
              and 2^32, the function returns a hash value for _T_e_r_m within the
              range _1_._._R_a_n_g_e.

              This BIF could be used instead of the old deprecated
              _e_r_l_a_n_g_:_h_a_s_h_/_2 BIF, as it calculates better hashes for all data-
              types, but consider using _p_h_a_s_h_2_/_1_,_2 instead.

       eerrllaanngg::pphhaasshh22((TTeerrmm [[,, RRaannggee]])) -->> HHaasshh

              Types:

                 Term = term()
                 Range = 1..2^32
                 Hash = 0..Range-1

              Portable hash function that will give the same hash for the same
              Erlang term regardless of machine architecture and ERTS version
              (the BIF was introduced in ERTS 5.2). Range can be between 1 and
              2^32, the function returns a hash value for _T_e_r_m within the
              range _0_._._R_a_n_g_e_-_1. When called without the _R_a_n_g_e argument, a
              value in the range _0_._._2_^_2_7_-_1 is returned.

              This BIF should always be used for hashing terms. It distributes
              small integers better than _p_h_a_s_h_/_2, and it is faster for bignums
              and binaries.

              Note that the range _0_._._R_a_n_g_e_-_1 is different from the range of
              _p_h_a_s_h_/_2 (_1_._._R_a_n_g_e).

       ppiidd__ttoo__lliisstt((PPiidd)) -->> ssttrriinngg(())

              Types:

                 Pid = pid()

              Returns a string which corresponds to the text representation of
              _P_i_d.

          WWaarrnniinngg::
              This BIF is intended for debugging and for use in the Erlang
              operating system. It should not be used in application programs.


       ppoorrtt__cclloossee((PPoorrtt)) -->> ttrruuee

              Types:

                 Port = port() | atom()

              Closes an open port. Roughly the same as _P_o_r_t _! _{_s_e_l_f_(_)_, _c_l_o_s_e_}
              except for the error behaviour (see below), and that the port
              does _n_o_t reply with _{_P_o_r_t_, _c_l_o_s_e_d_}. Any process may close a port
              with _p_o_r_t___c_l_o_s_e_/_1, not only the port owner (the connected
              process).

              For comparison: _P_o_r_t _! _{_s_e_l_f_(_)_, _c_l_o_s_e_} fails with _b_a_d_a_r_g if _P_o_r_t
              cannot be sent to (i.e., _P_o_r_t refers neither to a port nor to a
              process). If _P_o_r_t is a closed port nothing happens. If _P_o_r_t is
              an open port and the calling process is the port owner, the port
              replies with _{_P_o_r_t_, _c_l_o_s_e_d_} when all buffers have been flushed
              and the port really closes, but if the calling process is not
              the port owner the _p_o_r_t _o_w_n_e_r fails with _b_a_d_s_i_g.

              Note that any process can close a port using _P_o_r_t _! _{_P_o_r_t_O_w_n_e_r_,
              _c_l_o_s_e_} just as if it itself was the port owner, but the reply
              always goes to the port owner.

              In short: _p_o_r_t___c_l_o_s_e_(_P_o_r_t_) has a cleaner and more logical
              behaviour than _P_o_r_t _! _{_s_e_l_f_(_)_, _c_l_o_s_e_}.

              Failure: _b_a_d_a_r_g if _P_o_r_t is not an open port or the registered
              name of an open port.

       ppoorrtt__ccoommmmaanndd((PPoorrtt,, DDaattaa)) -->> ttrruuee

              Types:

                 Port = port() | atom()
                 Data = iodata()

              Sends data to a port. Same as _P_o_r_t _! _{_s_e_l_f_(_)_, _{_c_o_m_m_a_n_d_, _D_a_t_a_}_}
              except for the error behaviour (see below). Any process may send
              data to a port with _p_o_r_t___c_o_m_m_a_n_d_/_2, not only the port owner (the
              connected process).

              For comparison: _P_o_r_t _! _{_s_e_l_f_(_)_, _{_c_o_m_m_a_n_d_, _D_a_t_a_}_} fails with
              _b_a_d_a_r_g if _P_o_r_t cannot be sent to (i.e., _P_o_r_t refers neither to a
              port nor to a process). If _P_o_r_t is a closed port the data
              message disappears without a sound. If _P_o_r_t is open and the
              calling process is not the port owner, the _p_o_r_t _o_w_n_e_r fails with
              _b_a_d_s_i_g. The port owner fails with _b_a_d_s_i_g also if _D_a_t_a is not a
              valid IO list.

              Note that any process can send to a port using _P_o_r_t _!
              _{_P_o_r_t_O_w_n_e_r_, _{_c_o_m_m_a_n_d_, _D_a_t_a_}_} just as if it itself was the port
              owner.

              In short: _p_o_r_t___c_o_m_m_a_n_d_(_P_o_r_t_, _D_a_t_a_) has a cleaner and more
              logical behaviour than _P_o_r_t _! _{_s_e_l_f_(_)_, _{_c_o_m_m_a_n_d_, _D_a_t_a_}_}.

              If the port is busy, the calling process will be suspended until
              the port is not busy anymore.

              Failures:

                _b_a_d_a_r_g:
                   If _P_o_r_t is not an open port or the registered name of an
                  open port.

                _b_a_d_a_r_g:
                   If _D_a_t_a is not a valid io list.

       ppoorrtt__ccoommmmaanndd((PPoorrtt,, DDaattaa,, OOppttiioonnLLiisstt)) -->> bboooolleeaann(())

              Types:

                 Port = port() | atom()
                 Data = iodata()
                 OptionList = [Option]
                 Option = force
                 Option = nosuspend

              Sends data to a port. _p_o_r_t___c_o_m_m_a_n_d_(_P_o_r_t_, _D_a_t_a_, _[_]_) equals
              _p_o_r_t___c_o_m_m_a_n_d_(_P_o_r_t_, _D_a_t_a_).

              If the port command is aborted _f_a_l_s_e is returned; otherwise,
              _t_r_u_e is returned.

              If the port is busy, the calling process will be suspended until
              the port is not busy anymore.

              Currently the following _O_p_t_i_o_ns are valid:

                _f_o_r_c_e:
                  The calling process will not be suspended if the port is
                  busy; instead, the port command is forced through. The call
                  will fail with a _n_o_t_s_u_p exception if the driver of the port
                  does not support this. For more information see the
                  EERRLL__DDRRVV__FFLLAAGG__SSOOFFTT__BBUUSSYY driver flag.

                _n_o_s_u_s_p_e_n_d:
                  The calling process will not be suspended if the port is
                  busy; instead, the port command is aborted and _f_a_l_s_e is
                  returned.

          NNoottee::
              More options may be added in the future.


              Failures:

                _b_a_d_a_r_g:
                   If _P_o_r_t is not an open port or the registered name of an
                  open port.

                _b_a_d_a_r_g:
                   If _D_a_t_a is not a valid io list.

                _b_a_d_a_r_g:
                   If _O_p_t_i_o_n_L_i_s_t is not a valid option list.

                _n_o_t_s_u_p:
                   If the _f_o_r_c_e option has been passed, but the driver of the
                  port does not allow forcing through a busy port.

       ppoorrtt__ccoonnnneecctt((PPoorrtt,, PPiidd)) -->> ttrruuee

              Types:

                 Port = port() | atom()
                 Pid = pid()

              Sets the port owner (the connected port) to _P_i_d. Roughly the
              same as _P_o_r_t _! _{_s_e_l_f_(_)_, _{_c_o_n_n_e_c_t_, _P_i_d_}_} except for the
              following:

                * The error behavior differs, see below.

                * The port does _n_o_t reply with _{_P_o_r_t_,_c_o_n_n_e_c_t_e_d_}.

                * The new port owner gets linked to the port.

              The old port owner stays linked to the port and have to call
              _u_n_l_i_n_k_(_P_o_r_t_) if this is not desired. Any process may set the
              port owner to be any process with _p_o_r_t___c_o_n_n_e_c_t_/_2.

              For comparison: _P_o_r_t _! _{_s_e_l_f_(_)_, _{_c_o_n_n_e_c_t_, _P_i_d_}_} fails with
              _b_a_d_a_r_g if _P_o_r_t cannot be sent to (i.e., _P_o_r_t refers neither to a
              port nor to a process). If _P_o_r_t is a closed port nothing
              happens. If _P_o_r_t is an open port and the calling process is the
              port owner, the port replies with _{_P_o_r_t_, _c_o_n_n_e_c_t_e_d_} to the old
              port owner. Note that the old port owner is still linked to the
              port, and that the new is not. If _P_o_r_t is an open port and the
              calling process is not the port owner, the _p_o_r_t _o_w_n_e_r fails with
              _b_a_d_s_i_g. The port owner fails with _b_a_d_s_i_g also if _P_i_d is not an
              existing local pid.

              Note that any process can set the port owner using _P_o_r_t _!
              _{_P_o_r_t_O_w_n_e_r_, _{_c_o_n_n_e_c_t_, _P_i_d_}_} just as if it itself was the port
              owner, but the reply always goes to the port owner.

              In short: _p_o_r_t___c_o_n_n_e_c_t_(_P_o_r_t_, _P_i_d_) has a cleaner and more logical
              behaviour than _P_o_r_t _! _{_s_e_l_f_(_)_,_{_c_o_n_n_e_c_t_,_P_i_d_}_}.

              Failure: _b_a_d_a_r_g if _P_o_r_t is not an open port or the registered
              name of an open port, or if _P_i_d is not an existing local pid.

       ppoorrtt__ccoonnttrrooll((PPoorrtt,, OOppeerraattiioonn,, DDaattaa)) -->> RReess

              Types:

                 Port = port() | atom()
                 Operation = integer()
                 Data = Res = iodata()

              Performs a synchronous control operation on a port. The meaning
              of _O_p_e_r_a_t_i_o_n and _D_a_t_a depends on the port, i.e., on the port
              driver. Not all port drivers support this control feature.

              Returns: a list of integers in the range 0 through 255, or a
              binary, depending on the port driver. The meaning of the
              returned data also depends on the port driver.

              Failure: _b_a_d_a_r_g if _P_o_r_t is not an open port or the registered
              name of an open port, if _O_p_e_r_a_t_i_o_n cannot fit in a 32-bit
              integer, if the port driver does not support synchronous control
              operations, or if the port driver so decides for any reason
              (probably something wrong with _O_p_e_r_a_t_i_o_n or _D_a_t_a).

       eerrllaanngg::ppoorrtt__ccaallll((PPoorrtt,, OOppeerraattiioonn,, DDaattaa)) -->> tteerrmm(())

              Types:

                 Port = port() | atom()
                 Operation = integer()
                 Data = term()

              Performs a synchronous call to a port. The meaning of _O_p_e_r_a_t_i_o_n
              and _D_a_t_a depends on the port, i.e., on the port driver. Not all
              port drivers support this feature.

              _P_o_r_t is a port identifier, referring to a driver.

              _O_p_e_r_a_t_i_o_n is an integer, which is passed on to the driver.

              _D_a_t_a is any Erlang term. This data is converted to binary term
              format and sent to the port.

              Returns: a term from the driver. The meaning of the returned
              data also depends on the port driver.

              Failure: _b_a_d_a_r_g if _P_o_r_t is not an open port or the registered
              name of an open port, if _O_p_e_r_a_t_i_o_n cannot fit in a 32-bit
              integer, if the port driver does not support synchronous control
              operations, or if the port driver so decides for any reason
              (probably something wrong with _O_p_e_r_a_t_i_o_n or _D_a_t_a).

       eerrllaanngg::ppoorrtt__iinnffoo((PPoorrtt)) -->> [[{{IItteemm,, IInnffoo}}]] || uunnddeeffiinneedd

              Types:

                 Port = port() | atom()
                 Item, Info -- see below

              Returns a list containing tuples with information about the
              _P_o_r_t, or _u_n_d_e_f_i_n_e_d if the port is not open. The order of the
              tuples is not defined, nor are all the tuples mandatory.

                _{_r_e_g_i_s_t_e_r_e_d___n_a_m_e_, _R_e_g_N_a_m_e_}:
                  _R_e_g_N_a_m_e (an atom) is the registered name of the port. If the
                  port has no registered name, this tuple is not present in
                  the list.

                _{_i_d_, _I_n_d_e_x_}:
                  _I_n_d_e_x (an integer) is the internal index of the port. This
                  index may be used to separate ports.

                _{_c_o_n_n_e_c_t_e_d_, _P_i_d_}:
                  _P_i_d is the process connected to the port.

                _{_l_i_n_k_s_, _P_i_d_s_}:
                  _P_i_d_s is a list of pids to which processes the port is
                  linked.

                _{_n_a_m_e_, _S_t_r_i_n_g_}:
                  _S_t_r_i_n_g is the command name set by _o_p_e_n___p_o_r_t.

                _{_i_n_p_u_t_, _B_y_t_e_s_}:
                  _B_y_t_e_s is the total number of bytes read from the port.

                _{_o_u_t_p_u_t_, _B_y_t_e_s_}:
                  _B_y_t_e_s is the total number of bytes written to the port.

                _{_o_s___p_i_d_, _I_n_t_e_g_e_r _| _u_n_d_e_f_i_n_e_d_}:
                  _I_n_t_e_g_e_r is the process identifier (or equivalent) of an OS
                  process created with _o_p_e_n___p_o_r_t_(_{_s_p_a_w_n _| _s_p_a_w_n___e_x_e_c_u_t_a_b_l_e_,
                  _C_o_m_m_a_n_d_}_, _O_p_t_i_o_n_s_). If the port is not the result of
                  spawning an OS process, the value is _u_n_d_e_f_i_n_e_d.

              Failure: _b_a_d_a_r_g if _P_o_r_t is not a local port.

       eerrllaanngg::ppoorrtt__iinnffoo((PPoorrtt,, IItteemm)) -->> {{IItteemm,, IInnffoo}} || uunnddeeffiinneedd || [[]]

              Types:

                 Port = port() | atom()
                 Item, Info -- see below

              Returns information about _P_o_r_t as specified by _I_t_e_m, or
              _u_n_d_e_f_i_n_e_d if the port is not open. Also, if _I_t_e_m _=_=
              _r_e_g_i_s_t_e_r_e_d___n_a_m_e and the port has no registered name, [] is
              returned.

              For valid values of _I_t_e_m, and corresponding values of _I_n_f_o, see
              eerrllaanngg::ppoorrtt__iinnffoo//11.

              Failure: _b_a_d_a_r_g if _P_o_r_t is not a local port.

       eerrllaanngg::ppoorrtt__ttoo__lliisstt((PPoorrtt)) -->> ssttrriinngg(())

              Types:

                 Port = port()

              Returns a string which corresponds to the text representation of
              the port identifier _P_o_r_t.

          WWaarrnniinngg::
              This BIF is intended for debugging and for use in the Erlang
              operating system. It should not be used in application programs.


       eerrllaanngg::ppoorrttss(()) -->> [[ppoorrtt(())]]

              Returns a list of all ports on the local node.

       pprree__llooaaddeedd(()) -->> [[MMoodduullee]]

              Types:

                 Module = atom()

              Returns a list of Erlang modules which are pre-loaded in the
              system. As all loading of code is done through the file system,
              the file system must have been loaded previously. Hence, at
              least the module _i_n_i_t must be pre-loaded.

       eerrllaanngg::pprroocceessss__ddiissppllaayy((PPiidd,, TTyyppee)) -->> vvooiidd(())

              Types:

                 Pid = pid()
                 Type = backtrace

              Writes information about the local process _P_i_d on standard
              error. The currently allowed value for the atom _T_y_p_e is
              _b_a_c_k_t_r_a_c_e, which shows the contents of the call stack, including
              information about the call chain, with the current function
              printed first. The format of the output is not further defined.

       pprroocceessss__ffllaagg((FFllaagg,, VVaalluuee)) -->> OOllddVVaalluuee

              Types:

                 Flag, Value, OldValue -- see below

              Sets certain flags for the process which calls this function.
              Returns the old value of the flag.

                _p_r_o_c_e_s_s___f_l_a_g_(_t_r_a_p___e_x_i_t_, _B_o_o_l_e_a_n_):
                  When _t_r_a_p___e_x_i_t is set to _t_r_u_e, exit signals arriving to a
                  process are converted to _{_'_E_X_I_T_'_, _F_r_o_m_, _R_e_a_s_o_n_} messages,
                  which can be received as ordinary messages. If _t_r_a_p___e_x_i_t is
                  set to _f_a_l_s_e, the process exits if it receives an exit
                  signal other than _n_o_r_m_a_l and the exit signal is propagated
                  to its linked processes. Application processes should
                  normally not trap exits.

                  See also eexxiitt//22.

                _p_r_o_c_e_s_s___f_l_a_g_(_e_r_r_o_r___h_a_n_d_l_e_r_, _M_o_d_u_l_e_):
                  This is used by a process to redefine the error handler for
                  undefined function calls and undefined registered processes.
                  Inexperienced users should not use this flag since code
                  auto-loading is dependent on the correct operation of the
                  error handling module.

                _p_r_o_c_e_s_s___f_l_a_g_(_m_i_n___h_e_a_p___s_i_z_e_, _M_i_n_H_e_a_p_S_i_z_e_):
                  This changes the minimum heap size for the calling process.

                _p_r_o_c_e_s_s___f_l_a_g_(_m_i_n___b_i_n___v_h_e_a_p___s_i_z_e_, _M_i_n_B_i_n_V_H_e_a_p_S_i_z_e_):
                  This changes the minimum binary virtual heap size for the
                  calling process.

                _p_r_o_c_e_s_s___f_l_a_g_(_p_r_i_o_r_i_t_y_, _L_e_v_e_l_):
                  This sets the process priority. _L_e_v_e_l is an atom. There are
                  currently four priority levels: _l_o_w, _n_o_r_m_a_l, _h_i_g_h, and _m_a_x.
                  The default priority level is _n_o_r_m_a_l. _N_O_T_E: The _m_a_x priority
                  level is reserved for internal use in the Erlang runtime
                  system, and should _n_o_t be used by others.

                  Internally in each priority level processes are scheduled in
                  a round robin fashion.

                  Execution of processes on priority _n_o_r_m_a_l and priority _l_o_w
                  will be interleaved. Processes on priority _l_o_w will be
                  selected for execution less frequently than processes on
                  priority _n_o_r_m_a_l.

                  When there are runnable processes on priority _h_i_g_h no
                  processes on priority _l_o_w, or _n_o_r_m_a_l will be selected for
                  execution. Note, however, that this does _n_o_t mean that no
                  processes on priority _l_o_w, or _n_o_r_m_a_l will be able to run
                  when there are processes on priority _h_i_g_h running. On the
                  runtime system with SMP support there might be more
                  processes running in parallel than processes on priority
                  _h_i_g_h, i.e., a _l_o_w, and a _h_i_g_h priority process might execute
                  at the same time.

                  When there are runnable processes on priority _m_a_x no
                  processes on priority _l_o_w, _n_o_r_m_a_l, or _h_i_g_h will be selected
                  for execution. As with the _h_i_g_h priority, processes on lower
                  priorities might execute in parallel with processes on
                  priority _m_a_x.

                  Scheduling is preemptive. Regardless of priority, a process
                  is preempted when it has consumed more than a certain amount
                  of reductions since the last time it was selected for
                  execution.

                  _N_O_T_E: You should not depend on the scheduling to remain
                  exactly as it is today. Scheduling, at least on the runtime
                  system with SMP support, is very likely to be modified in
                  the future in order to better utilize available processor
                  cores.

                  There is currently _n_o automatic mechanism for avoiding
                  priority inversion, such as priority inheritance, or
                  priority ceilings. When using priorities you have to take
                  this into account and handle such scenarios by yourself.

                  Making calls from a _h_i_g_h priority process into code that you
                  don't have control over may cause the _h_i_g_h priority process
                  to wait for a processes with lower priority, i.e.,
                  effectively decreasing the priority of the _h_i_g_h priority
                  process during the call. Even if this isn't the case with
                  one version of the code that you don't have under your
                  control, it might be the case in a future version of it.
                  This might, for example, happen if a _h_i_g_h priority process
                  triggers code loading, since the code server runs on
                  priority _n_o_r_m_a_l.

                  Other priorities than _n_o_r_m_a_l are normally not needed. When
                  other priorities are used, they need to be used with care,
                  especially the _h_i_g_h priority _m_u_s_t be used with care. A
                  process on _h_i_g_h priority should only perform work for short
                  periods of time. Busy looping for long periods of time in a
                  _h_i_g_h priority process will most likely cause problems, since
                  there are important servers in OTP running on priority
                  _n_o_r_m_a_l.

                _p_r_o_c_e_s_s___f_l_a_g_(_s_a_v_e___c_a_l_l_s_, _N_):
                  _N must be an integer in the interval 0..10000. If _N > 0,
                  call saving is made active for the process, which means that
                  information about the _N most recent global function calls,
                  BIF calls, sends and receives made by the process are saved
                  in a list, which can be retrieved with _p_r_o_c_e_s_s___i_n_f_o_(_P_i_d_,
                  _l_a_s_t___c_a_l_l_s_). A global function call is one in which the
                  module of the function is explicitly mentioned. Only a fixed
                  amount of information is saved: a tuple _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_,
                  _A_r_i_t_y_} for function calls, and the mere atoms _s_e_n_d,
                  _'_r_e_c_e_i_v_e_' and _t_i_m_e_o_u_t for sends and receives (_'_r_e_c_e_i_v_e_' when
                  a message is received and _t_i_m_e_o_u_t when a receive times out).
                  If _N = 0, call saving is disabled for the process, which is
                  the default. Whenever the size of the call saving list is
                  set, its contents are reset.

                _p_r_o_c_e_s_s___f_l_a_g_(_s_e_n_s_i_t_i_v_e_, _B_o_o_l_e_a_n_):
                  Set or clear the _s_e_n_s_i_t_i_v_e flag for the current process.
                  When a process has been marked as sensitive by calling
                  _p_r_o_c_e_s_s___f_l_a_g_(_s_e_n_s_i_t_i_v_e_, _t_r_u_e_), features in the run-time
                  system that can be used for examining the data and/or inner
                  working of the process are silently disabled.

                  Features that are disabled include (but are not limited to)
                  the following:

                  Tracing: Trace flags can still be set for the process, but
                  no trace messages of any kind will be generated. (If the
                  _s_e_n_s_i_t_i_v_e flag is turned off, trace messages will again be
                  generated if there are any trace flags set.)

                  Sequential tracing: The sequential trace token will be
                  propagated as usual, but no sequential trace messages will
                  be generated.

                  _p_r_o_c_e_s_s___i_n_f_o_/_1_,_2 cannot be used to read out the message
                  queue or the process dictionary (both will be returned as
                  empty lists).

                  Stack back-traces cannot be displayed for the process.

                  In crash dumps, the stack, messages, and the process
                  dictionary will be omitted.

                  If _{_s_a_v_e___c_a_l_l_s_,_N_} has been set for the process, no function
                  calls will be saved to the call saving list. (The call
                  saving list will not be cleared; furthermore, send, receive,
                  and timeout events will still be added to the list.)

       pprroocceessss__ffllaagg((PPiidd,, FFllaagg,, VVaalluuee)) -->> OOllddVVaalluuee

              Types:

                 Pid = pid()
                 Flag, Value, OldValue -- see below

              Sets certain flags for the process _P_i_d, in the same manner as
              pprroocceessss__ffllaagg//22. Returns the old value of the flag. The allowed
              values for _F_l_a_g are only a subset of those allowed in
              _p_r_o_c_e_s_s___f_l_a_g_/_2, namely: _s_a_v_e___c_a_l_l_s.

              Failure: _b_a_d_a_r_g if _P_i_d is not a local process.

       pprroocceessss__iinnffoo((PPiidd)) -->> IInnffooRReessuulltt

              Types:

                 Pid = pid()
                 Item = atom()
                 Info = term()
                 InfoTuple = {Item, Info}
                 InfoTupleList = [InfoTuple]
                 InfoResult = InfoTupleList | undefined

              Returns a list containing _I_n_f_o_T_u_p_l_es with miscellaneous
              information about the process identified by _P_i_d, or _u_n_d_e_f_i_n_e_d if
              the process is not alive.

              The order of the _I_n_f_o_T_u_p_l_es is not defined, nor are all the
              _I_n_f_o_T_u_p_l_es mandatory. The _I_n_f_o_T_u_p_l_es part of the result may be
              changed without prior notice. Currently _I_n_f_o_T_u_p_l_es with the
              following _I_t_e_ms are part of the result: _c_u_r_r_e_n_t___f_u_n_c_t_i_o_n,
              _i_n_i_t_i_a_l___c_a_l_l, _s_t_a_t_u_s, _m_e_s_s_a_g_e___q_u_e_u_e___l_e_n, _m_e_s_s_a_g_e_s, _l_i_n_k_s,
              _d_i_c_t_i_o_n_a_r_y, _t_r_a_p___e_x_i_t, _e_r_r_o_r___h_a_n_d_l_e_r, _p_r_i_o_r_i_t_y, _g_r_o_u_p___l_e_a_d_e_r,
              _t_o_t_a_l___h_e_a_p___s_i_z_e, _h_e_a_p___s_i_z_e, _s_t_a_c_k___s_i_z_e, _r_e_d_u_c_t_i_o_n_s, and
              _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n. If the process identified by _P_i_d has a
              registered name also an _I_n_f_o_T_u_p_l_e with _I_t_e_m _=_= _r_e_g_i_s_t_e_r_e_d___n_a_m_e
              will appear.

              See pprroocceessss__iinnffoo//22 for information about specific _I_n_f_o_T_u_p_l_es.

          WWaarrnniinngg::
              This BIF is intended for _d_e_b_u_g_g_i_n_g _o_n_l_y, use pprroocceessss__iinnffoo//22 for
              all other purposes.


              Failure: _b_a_d_a_r_g if _P_i_d is not a local process.

       pprroocceessss__iinnffoo((PPiidd,, IItteemmSSppeecc)) -->> IInnffooRReessuulltt

              Types:

                 Pid = pid()
                 Item = atom()
                 Info = term()
                 ItemList = [Item]
                 ItemSpec = Item | ItemList
                 InfoTuple = {Item, Info}
                 InfoTupleList = [InfoTuple]
                 InfoResult = InfoTuple | InfoTupleList | undefined | []

              Returns information about the process identified by _P_i_d as
              specified by the _I_t_e_m_S_p_e_c, or _u_n_d_e_f_i_n_e_d if the process is not
              alive.

              If the process is alive and _I_t_e_m_S_p_e_c is a single _I_t_e_m, the
              returned value is the corresponding _I_n_f_o_T_u_p_l_e unless _I_t_e_m_S_p_e_c _=_=
              _r_e_g_i_s_t_e_r_e_d___n_a_m_e and the process has no registered name. In this
              case _[_] is returned. This strange behavior is due to historical
              reasons, and is kept for backward compatibility.

              If _I_t_e_m_S_p_e_c is an _I_t_e_m_L_i_s_t, the result is an _I_n_f_o_T_u_p_l_e_L_i_s_t. The
              _I_n_f_o_T_u_p_l_es in the _I_n_f_o_T_u_p_l_e_L_i_s_t will appear with the
              corresponding _I_t_e_ms in the same order as the _I_t_e_ms appeared in
              the _I_t_e_m_L_i_s_t. Valid _I_t_e_ms may appear multiple times in the
              _I_t_e_m_L_i_s_t.

          NNoottee::
              If _r_e_g_i_s_t_e_r_e_d___n_a_m_e is part of an _I_t_e_m_L_i_s_t and the process has no
              name registered a _{_r_e_g_i_s_t_e_r_e_d___n_a_m_e_, _[_]_} _I_n_f_o_T_u_p_l_e _w_i_l_l appear in
              the resulting _I_n_f_o_T_u_p_l_e_L_i_s_t. This behavior is different than
              when _I_t_e_m_S_p_e_c _=_= _r_e_g_i_s_t_e_r_e_d___n_a_m_e, and than when _p_r_o_c_e_s_s___i_n_f_o_/_1
              is used.


              Currently the following _I_n_f_o_T_u_p_l_es with corresponding _I_t_e_ms are
              valid:

                _{_b_a_c_k_t_r_a_c_e_, _B_i_n_}:
                  The binary _B_i_n contains the same information as the output
                  from _e_r_l_a_n_g_:_p_r_o_c_e_s_s___d_i_s_p_l_a_y_(_P_i_d_, _b_a_c_k_t_r_a_c_e_). Use
                  _b_i_n_a_r_y___t_o___l_i_s_t_/_1 to obtain the string of characters from the
                  binary.

                _{_b_i_n_a_r_y_, _B_i_n_I_n_f_o_}:
                  _B_i_n_I_n_f_o is a list containing miscellaneous information about
                  binaries currently being referred to by this process. This
                  _I_n_f_o_T_u_p_l_e may be changed or removed without prior notice.

                _{_c_a_t_c_h_l_e_v_e_l_, _C_a_t_c_h_L_e_v_e_l_}:
                  _C_a_t_c_h_L_e_v_e_l is the number of currently active catches in this
                  process. This _I_n_f_o_T_u_p_l_e may be changed or removed without
                  prior notice.

                _{_c_u_r_r_e_n_t___f_u_n_c_t_i_o_n_, _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_i_t_y_}_}:
                  _M_o_d_u_l_e, _F_u_n_c_t_i_o_n, _A_r_i_t_y is the current function call of the
                  process.

                _{_c_u_r_r_e_n_t___l_o_c_a_t_i_o_n_, _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_i_t_y_, _L_o_c_a_t_i_o_n_}_}:
                  _M_o_d_u_l_e, _F_u_n_c_t_i_o_n, _A_r_i_t_y is the current function call of the
                  process. _L_o_c_a_t_i_o_n is a list of two-tuples that describes the
                  location in the source code.

                _{_c_u_r_r_e_n_t___s_t_a_c_k_t_r_a_c_e_, _S_t_a_c_k_}:
                  Return the current call stack back-trace (_s_t_a_c_k_t_r_a_c_e) of the
                  process. The stack has the same format as returned by
                  eerrllaanngg::ggeett__ssttaacckkttrraaccee//00.

                _{_d_i_c_t_i_o_n_a_r_y_, _D_i_c_t_i_o_n_a_r_y_}:
                  _D_i_c_t_i_o_n_a_r_y is the dictionary of the process.

                _{_e_r_r_o_r___h_a_n_d_l_e_r_, _M_o_d_u_l_e_}:
                  _M_o_d_u_l_e is the error handler module used by the process (for
                  undefined function calls, for example).

                _{_g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n_, _G_C_I_n_f_o_}:
                  _G_C_I_n_f_o is a list which contains miscellaneous information
                  about garbage collection for this process. The content of
                  _G_C_I_n_f_o may be changed without prior notice.

                _{_g_r_o_u_p___l_e_a_d_e_r_, _G_r_o_u_p_L_e_a_d_e_r_}:
                  _G_r_o_u_p_L_e_a_d_e_r is group leader for the IO of the process.

                _{_h_e_a_p___s_i_z_e_, _S_i_z_e_}:
                  _S_i_z_e is the size in words of youngest heap generation of the
                  process. This generation currently include the stack of the
                  process. This information is highly implementation
                  dependent, and may change if the implementation change.

                _{_i_n_i_t_i_a_l___c_a_l_l_, _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_i_t_y_}_}:
                  _M_o_d_u_l_e, _F_u_n_c_t_i_o_n, _A_r_i_t_y is the initial function call with
                  which the process was spawned.

                _{_l_i_n_k_s_, _P_i_d_s_}:
                  _P_i_d_s is a list of pids, with processes to which the process
                  has a link.

                _{_l_a_s_t___c_a_l_l_s_, _f_a_l_s_e_|_C_a_l_l_s_}:
                  The value is _f_a_l_s_e if call saving is not active for the
                  process (see pprroocceessss__ffllaagg//33). If call saving is active, a
                  list is returned, in which the last element is the most
                  recent called.

                _{_m_e_m_o_r_y_, _S_i_z_e_}:
                  _S_i_z_e is the size in bytes of the process. This includes call
                  stack, heap and internal structures.

                _{_m_e_s_s_a_g_e___q_u_e_u_e___l_e_n_, _M_e_s_s_a_g_e_Q_u_e_u_e_L_e_n_}:
                  _M_e_s_s_a_g_e_Q_u_e_u_e_L_e_n is the number of messages currently in the
                  message queue of the process. This is the length of the list
                  _M_e_s_s_a_g_e_Q_u_e_u_e returned as the info item _m_e_s_s_a_g_e_s (see below).

                _{_m_e_s_s_a_g_e_s_, _M_e_s_s_a_g_e_Q_u_e_u_e_}:
                  _M_e_s_s_a_g_e_Q_u_e_u_e is a list of the messages to the process, which
                  have not yet been processed.

                _{_m_i_n___h_e_a_p___s_i_z_e_, _M_i_n_H_e_a_p_S_i_z_e_}:
                  _M_i_n_H_e_a_p_S_i_z_e is the minimum heap size for the process.

                _{_m_i_n___b_i_n___v_h_e_a_p___s_i_z_e_, _M_i_n_B_i_n_V_H_e_a_p_S_i_z_e_}:
                  _M_i_n_B_i_n_V_H_e_a_p_S_i_z_e is the minimum binary virtual heap size for
                  the process.

                _{_m_o_n_i_t_o_r_e_d___b_y_, _P_i_d_s_}:
                  A list of pids that are monitoring the process (with
                  _m_o_n_i_t_o_r_/_2).

                _{_m_o_n_i_t_o_r_s_, _M_o_n_i_t_o_r_s_}:
                  A list of monitors (started by _m_o_n_i_t_o_r_/_2) that are active
                  for the process. For a local process monitor or a remote
                  process monitor by pid, the list item is _{_p_r_o_c_e_s_s_, _P_i_d_}, and
                  for a remote process monitor by name, the list item is
                  _{_p_r_o_c_e_s_s_, _{_R_e_g_N_a_m_e_, _N_o_d_e_}_}.

                _{_p_r_i_o_r_i_t_y_, _L_e_v_e_l_}:
                  _L_e_v_e_l is the current priority level for the process. For
                  more information on priorities see pprroocceessss__ffllaagg((pprriioorriittyy,,
                  LLeevveell)).

                _{_r_e_d_u_c_t_i_o_n_s_, _N_u_m_b_e_r_}:
                  _N_u_m_b_e_r is the number of reductions executed by the process.

                _{_r_e_g_i_s_t_e_r_e_d___n_a_m_e_, _A_t_o_m_}:
                  _A_t_o_m is the registered name of the process. If the process
                  has no registered name, this tuple is not present in the
                  list.

                _{_s_e_q_u_e_n_t_i_a_l___t_r_a_c_e___t_o_k_e_n_, _[_] _| _S_e_q_u_e_n_t_i_a_l_T_r_a_c_e_T_o_k_e_n_}:
                  _S_e_q_u_e_n_t_i_a_l_T_r_a_c_e_T_o_k_e_n the sequential trace token for the
                  process. This _I_n_f_o_T_u_p_l_e may be changed or removed without
                  prior notice.

                _{_s_t_a_c_k___s_i_z_e_, _S_i_z_e_}:
                  _S_i_z_e is the stack size of the process in words.

                _{_s_t_a_t_u_s_, _S_t_a_t_u_s_}:
                  _S_t_a_t_u_s is the status of the process. _S_t_a_t_u_s is _e_x_i_t_i_n_g,
                  _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_n_g, _w_a_i_t_i_n_g (for a message), _r_u_n_n_i_n_g,
                  _r_u_n_n_a_b_l_e (ready to run, but another process is running), or
                  _s_u_s_p_e_n_d_e_d (suspended on a "busy" port or by the
                  _e_r_l_a_n_g_:_s_u_s_p_e_n_d___p_r_o_c_e_s_s_/_[_1_,_2_] BIF).

                _{_s_u_s_p_e_n_d_i_n_g_, _S_u_s_p_e_n_d_e_e_L_i_s_t_}:
                  _S_u_s_p_e_n_d_e_e_L_i_s_t is a list of _{_S_u_s_p_e_n_d_e_e_, _A_c_t_i_v_e_S_u_s_p_e_n_d_C_o_u_n_t_,
                  _O_u_t_s_t_a_n_d_i_n_g_S_u_s_p_e_n_d_C_o_u_n_t_} tuples. _S_u_s_p_e_n_d_e_e is the pid of a
                  process that have been or is to be suspended by the process
                  identified by _P_i_d via the eerrllaanngg::ssuussppeenndd__pprroocceessss//22 BIF, or
                  the eerrllaanngg::ssuussppeenndd__pprroocceessss//11 BIF. _A_c_t_i_v_e_S_u_s_p_e_n_d_C_o_u_n_t is the
                  number of times the _S_u_s_p_e_n_d_e_e has been suspended by _P_i_d.
                  _O_u_t_s_t_a_n_d_i_n_g_S_u_s_p_e_n_d_C_o_u_n_t is the number of not yet completed
                  suspend requests sent by _P_i_d. That is, if _A_c_t_i_v_e_S_u_s_p_e_n_d_C_o_u_n_t
                  _/_= _0, _S_u_s_p_e_n_d_e_e is currently in the suspended state, and if
                  _O_u_t_s_t_a_n_d_i_n_g_S_u_s_p_e_n_d_C_o_u_n_t _/_= _0 the _a_s_y_n_c_h_r_o_n_o_u_s option of
                  _e_r_l_a_n_g_:_s_u_s_p_e_n_d___p_r_o_c_e_s_s_/_2 has been used and the suspendee has
                  not yet been suspended by _P_i_d. Note that the
                  _A_c_t_i_v_e_S_u_s_p_e_n_d_C_o_u_n_t and _O_u_t_s_t_a_n_d_i_n_g_S_u_s_p_e_n_d_C_o_u_n_t are not the
                  total suspend count on _S_u_s_p_e_n_d_e_e, only the parts contributed
                  by _P_i_d.

                _{_t_o_t_a_l___h_e_a_p___s_i_z_e_, _S_i_z_e_}:
                  _S_i_z_e is the total size in words of all heap fragments of the
                  process. This currently include the stack of the process.

                _{_t_r_a_c_e_, _I_n_t_e_r_n_a_l_T_r_a_c_e_F_l_a_g_s_}:
                  _I_n_t_e_r_n_a_l_T_r_a_c_e_F_l_a_g_s is an integer representing internal trace
                  flag for this process. This _I_n_f_o_T_u_p_l_e may be changed or
                  removed without prior notice.

                _{_t_r_a_p___e_x_i_t_, _B_o_o_l_e_a_n_}:
                  _B_o_o_l_e_a_n is _t_r_u_e if the process is trapping exits, otherwise
                  it is _f_a_l_s_e.

              Note however, that not all implementations support every one of
              the above _I_t_e_m_s.

              Failure: _b_a_d_a_r_g if _P_i_d is not a local process, or if _I_t_e_m is not
              a valid _I_t_e_m.

       pprroocceesssseess(()) -->> [[ppiidd(())]]

              Returns a list of process identifiers corresponding to all the
              processes currently existing on the local node.

              Note that a process that is exiting, exists but is not alive,
              i.e., _i_s___p_r_o_c_e_s_s___a_l_i_v_e_/_1 will return _f_a_l_s_e for a process that is
              exiting, but its process identifier will be part of the result
              returned from _p_r_o_c_e_s_s_e_s_/_0.

              > processes().
              [<0.0.0>,<0.2.0>,<0.4.0>,<0.5.0>,<0.7.0>,<0.8.0>]

       ppuurrggee__mmoodduullee((MMoodduullee)) -->> vvooiidd(())

              Types:

                 Module = atom()

              Removes old code for _M_o_d_u_l_e. Before this BIF is used,
              _e_r_l_a_n_g_:_c_h_e_c_k___p_r_o_c_e_s_s___c_o_d_e_/_2 should be called to check that no
              processes are executing old code in the module.

          WWaarrnniinngg::
              This BIF is intended for the code server (see ccooddee((33))) and
              should not be used elsewhere.


              Failure: _b_a_d_a_r_g if there is no old code for _M_o_d_u_l_e.

       ppuutt((KKeeyy,, VVaall)) -->> OOllddVVaall || uunnddeeffiinneedd

              Types:

                 Key = Val = OldVal = term()

              Adds a new _K_e_y to the process dictionary, associated with the
              value _V_a_l, and returns _u_n_d_e_f_i_n_e_d. If _K_e_y already exists, the old
              value is deleted and replaced by _V_a_l and the function returns
              the old value.

          NNoottee::
              The values stored when _p_u_t is evaluated within the scope of a
              _c_a_t_c_h will not be retracted if a _t_h_r_o_w is evaluated, or if an
              error occurs.


              > X = put(name, walrus), Y = put(name, carpenter),
              Z = get(name),
              {X, Y, Z}.
              {undefined,walrus,carpenter}

       eerrllaanngg::rraaiissee((CCllaassss,, RReeaassoonn,, SSttaacckkttrraaccee))

              Types:

                 Class = error | exit | throw
                 Reason = term()
                 Stacktrace = [{Module, Function, Arity | Args} | {Fun, Args}]
                  Module = Function = atom()
                  Arity = arity()
                  Args = [term()]
                  Fun = [fun()]

              Stops the execution of the calling process with an exception of
              given class, reason and call stack backtrace (_s_t_a_c_k_t_r_a_c_e).

          WWaarrnniinngg::
              This BIF is intended for debugging and for use in the Erlang
              operating system. In general, it should be avoided in
              applications, unless you know very well what you are doing.


              _C_l_a_s_s is one of _e_r_r_o_r, _e_x_i_t or _t_h_r_o_w, so if it were not for the
              stacktrace _e_r_l_a_n_g_:_r_a_i_s_e_(_C_l_a_s_s_, _R_e_a_s_o_n_, _S_t_a_c_k_t_r_a_c_e_) is equivalent
              to _e_r_l_a_n_g_:_C_l_a_s_s_(_R_e_a_s_o_n_). _R_e_a_s_o_n is any term and _S_t_a_c_k_t_r_a_c_e is a
              list as returned from _g_e_t___s_t_a_c_k_t_r_a_c_e_(_), that is a list of
              4-tuples _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_i_t_y _| _A_r_g_s_, _L_o_c_a_t_i_o_n_} where _M_o_d_u_l_e
              and _F_u_n_c_t_i_o_n are atoms and the third element is an integer arity
              or an argument list. The stacktrace may also contain _{_F_u_n_, _A_r_g_s_,
              _L_o_c_a_t_i_o_n_} tuples where _F_u_n is a local fun and _A_r_g_s is an
              argument list.

              The _L_o_c_a_t_i_o_n element at the end is optional. Omitting it is
              equivalent to specifying an empty list.

              The stacktrace is used as the exception stacktrace for the
              calling process; it will be truncated to the current maximum
              stacktrace depth.

              Because evaluating this function causes the process to
              terminate, it has no return value - unless the arguments are
              invalid, in which case the function _r_e_t_u_r_n_s _t_h_e _e_r_r_o_r _r_e_a_s_o_n,
              that is _b_a_d_a_r_g. If you want to be really sure not to return you
              can call _e_r_r_o_r_(_e_r_l_a_n_g_:_r_a_i_s_e_(_C_l_a_s_s_, _R_e_a_s_o_n_, _S_t_a_c_k_t_r_a_c_e_)_) and hope
              to distinguish exceptions later.

       eerrllaanngg::rreeaadd__ttiimmeerr((TTiimmeerrRReeff)) -->> iinntteeggeerr(()) >>== 00 || ffaallssee

              Types:

                 TimerRef = reference()

              _T_i_m_e_r_R_e_f is a timer reference returned by eerrllaanngg::sseenndd__aafftteerr//33 or
              eerrllaanngg::ssttaarrtt__ttiimmeerr//33. If the timer is active, the function
              returns the time in milliseconds left until the timer will
              expire, otherwise _f_a_l_s_e (which means that _T_i_m_e_r_R_e_f was never a
              timer, that it has been cancelled, or that it has already
              delivered its message).

              See also eerrllaanngg::sseenndd__aafftteerr//33, eerrllaanngg::ssttaarrtt__ttiimmeerr//33, and
              eerrllaanngg::ccaanncceell__ttiimmeerr//11.

       eerrllaanngg::rreeff__ttoo__lliisstt((RReeff)) -->> ssttrriinngg(())

              Types:

                 Ref = reference()

              Returns a string which corresponds to the text representation of
              _R_e_f.

          WWaarrnniinngg::
              This BIF is intended for debugging and for use in the Erlang
              operating system. It should not be used in application programs.


       rreeggiisstteerr((RReeggNNaammee,, PPiidd || PPoorrtt)) -->> ttrruuee

              Types:

                 RegName = atom()
                 Pid = pid()
                 Port = port()

              Associates the name _R_e_g_N_a_m_e with a pid or a port identifier.
              _R_e_g_N_a_m_e, which must be an atom, can be used instead of the pid /
              port identifier in the send operator (_R_e_g_N_a_m_e _! _M_e_s_s_a_g_e).

              > register(db, Pid).
              true

              Failure: _b_a_d_a_r_g if _P_i_d is not an existing, local process or
              port, if _R_e_g_N_a_m_e is already in use, if the process or port is
              already registered (already has a name), or if _R_e_g_N_a_m_e is the
              atom _u_n_d_e_f_i_n_e_d.

       rreeggiisstteerreedd(()) -->> [[RReeggNNaammee]]

              Types:

                 RegName = atom()

              Returns a list of names which have been registered using
              rreeggiisstteerr//22.

              > registered().
              [code_server, file_server, init, user, my_db]

       eerrllaanngg::rreessuummee__pprroocceessss((SSuussppeennddeeee)) -->> ttrruuee

              Types:

                 Suspendee = pid()

              Decreases the suspend count on the process identified by
              _S_u_s_p_e_n_d_e_e. _S_u_s_p_e_n_d_e_e should previously have been suspended via
              eerrllaanngg::ssuussppeenndd__pprroocceessss//22, or eerrllaanngg::ssuussppeenndd__pprroocceessss//11 by the
              process calling _e_r_l_a_n_g_:_r_e_s_u_m_e___p_r_o_c_e_s_s_(_S_u_s_p_e_n_d_e_e_). When the
              suspend count on _S_u_s_p_e_n_d_e_e reach zero, _S_u_s_p_e_n_d_e_e will be
              resumed, i.e., the state of the _S_u_s_p_e_n_d_e_e is changed from
              suspended into the state _S_u_s_p_e_n_d_e_e was in before it was
              suspended.

          WWaarrnniinngg::
              This BIF is intended for debugging only.


              Failures:

                _b_a_d_a_r_g:
                   If _S_u_s_p_e_n_d_e_e isn't a process identifier.

                _b_a_d_a_r_g:
                   If the process calling _e_r_l_a_n_g_:_r_e_s_u_m_e___p_r_o_c_e_s_s_/_1 had not
                  previously increased the suspend count on the process
                  identified by _S_u_s_p_e_n_d_e_e.

                _b_a_d_a_r_g:
                   If the process identified by _S_u_s_p_e_n_d_e_e is not alive.

       rroouunndd((NNuummbbeerr)) -->> iinntteeggeerr(())

              Types:

                 Number = number()

              Returns an integer by rounding _N_u_m_b_e_r.

              > round(5.5).
              6

              Allowed in guard tests.

       sseellff(()) -->> ppiidd(())

              Returns the pid (process identifier) of the calling process.

              > self().
              <0.26.0>

              Allowed in guard tests.

       eerrllaanngg::sseenndd((DDeesstt,, MMssgg)) -->> MMssgg

              Types:

                 Dest = pid() | port() | RegName | {RegName, Node}
                 Msg = term()
                  RegName = atom()
                  Node = node()

              Sends a message and returns _M_s_g. This is the same as _D_e_s_t _! _M_s_g.

              _D_e_s_t may be a remote or local pid, a (local) port, a locally
              registered name, or a tuple _{_R_e_g_N_a_m_e_, _N_o_d_e_} for a registered
              name at another node.

       eerrllaanngg::sseenndd((DDeesstt,, MMssgg,, [[OOppttiioonn]])) -->> RReess

              Types:

                 Dest = pid() | port() | RegName | {RegName, Node}
                  RegName = atom()
                  Node = node()
                 Msg = term()
                 Option = nosuspend | noconnect
                 Res = ok | nosuspend | noconnect

              Sends a message and returns _o_k, or does not send the message but
              returns something else (see below). Otherwise the same as
              eerrllaanngg::sseenndd//22. See also eerrllaanngg::sseenndd__nnoossuussppeenndd//22,,33. for more
              detailed explanation and warnings.

              The possible options are:

                _n_o_s_u_s_p_e_n_d:
                  If the sender would have to be suspended to do the send,
                  _n_o_s_u_s_p_e_n_d is returned instead.

                _n_o_c_o_n_n_e_c_t:
                  If the destination node would have to be auto-connected
                  before doing the send, _n_o_c_o_n_n_e_c_t is returned instead.

          WWaarrnniinngg::
              As with _e_r_l_a_n_g_:_s_e_n_d___n_o_s_u_s_p_e_n_d_/_2_,_3: Use with extreme care!


       eerrllaanngg::sseenndd__aafftteerr((TTiimmee,, DDeesstt,, MMssgg)) -->> TTiimmeerrRReeff

              Types:

                 Time = integer() >= 0
                  0 <= Time <= 4294967295
                 Dest = pid() | RegName
                  LocalPid = pid() (of a process, alive or dead, on the local
                 node)
                 Msg = term()
                 TimerRef = reference()

              Starts a timer which will send the message _M_s_g to _D_e_s_t after
              _T_i_m_e milliseconds.

              If _D_e_s_t is an atom, it is supposed to be the name of a
              registered process. The process referred to by the name is
              looked up at the time of delivery. No error is given if the name
              does not refer to a process.

              If _D_e_s_t is a pid, the timer will be automatically canceled if
              the process referred to by the pid is not alive, or when the
              process exits. This feature was introduced in erts version
              5.4.11. Note that timers will not be automatically canceled when
              _D_e_s_t is an atom.

              See also eerrllaanngg::ssttaarrtt__ttiimmeerr//33, eerrllaanngg::ccaanncceell__ttiimmeerr//11, and
              eerrllaanngg::rreeaadd__ttiimmeerr//11.

              Failure: _b_a_d_a_r_g if the arguments does not satisfy the
              requirements specified above.

       eerrllaanngg::sseenndd__nnoossuussppeenndd((DDeesstt,, MMssgg)) -->> bboooolleeaann(())

              Types:

                 Dest = ddsstt(())
                 Msg = term()
                 ddsstt(()) = pid()
                       | port()
                       | (RegName :: atom())
                       | {RegName :: atom(), Node :: node()}

              The same as eerrllaanngg::sseenndd((DDeesstt,, MMssgg,, [[nnoossuussppeenndd]])), but returns
              _t_r_u_e if the message was sent and _f_a_l_s_e if the message was not
              sent because the sender would have had to be suspended.

              This function is intended for send operations towards an
              unreliable remote node without ever blocking the sending
              (Erlang) process. If the connection to the remote node (usually
              not a real Erlang node, but a node written in C or Java) is
              overloaded, this function _w_i_l_l _n_o_t _s_e_n_d _t_h_e _m_e_s_s_a_g_e but return
              _f_a_l_s_e instead.

              The same happens, if _D_e_s_t refers to a local port that is busy.
              For all other destinations (allowed for the ordinary send
              operator _'_!_') this function sends the message and returns _t_r_u_e.

              This function is only to be used in very rare circumstances
              where a process communicates with Erlang nodes that can
              disappear without any trace causing the TCP buffers and the
              drivers queue to be over-full before the node will actually be
              shut down (due to tick timeouts) by _n_e_t___k_e_r_n_e_l. The normal
              reaction to take when this happens is some kind of premature
              shutdown of the other node.

              Note that ignoring the return value from this function would
              result in _u_n_r_e_l_i_a_b_l_e message passing, which is contradictory to
              the Erlang programming model. The message is _n_o_t sent if this
              function returns _f_a_l_s_e.

              Note also that in many systems, transient states of overloaded
              queues are normal. The fact that this function returns _f_a_l_s_e
              does not in any way mean that the other node is guaranteed to be
              non-responsive, it could be a temporary overload. Also a return
              value of _t_r_u_e does only mean that the message could be sent on
              the (TCP) channel without blocking, the message is not
              guaranteed to have arrived at the remote node. Also in the case
              of a disconnected non-responsive node, the return value is _t_r_u_e
              (mimics the behaviour of the _! operator). The expected behaviour
              as well as the actions to take when the function returns _f_a_l_s_e
              are application and hardware specific.

          WWaarrnniinngg::
              Use with extreme care!


       eerrllaanngg::sseenndd__nnoossuussppeenndd((DDeesstt,, MMssgg,, OOppttiioonnss)) -->> bboooolleeaann(())

              Types:

                 Dest = ddsstt(())
                 Msg = term()
                 Options = [noconnect]
                 ddsstt(()) = pid()
                       | port()
                       | (RegName :: atom())
                       | {RegName :: atom(), Node :: node()}

              The same as eerrllaanngg::sseenndd((DDeesstt,, MMssgg,, [[nnoossuussppeenndd || OOppttiioonnss]])), but
              with boolean return value.

              This function behaves like eerrllaanngg::sseenndd__nnoossuussppeenndd//22)), but takes a
              third parameter, a list of options. The only currently
              implemented option is _n_o_c_o_n_n_e_c_t. The option _n_o_c_o_n_n_e_c_t makes the
              function return _f_a_l_s_e if the remote node is not currently
              reachable by the local node. The normal behaviour is to try to
              connect to the node, which may stall the process for a shorter
              period. The use of the _n_o_c_o_n_n_e_c_t option makes it possible to be
              absolutely sure not to get even the slightest delay when sending
              to a remote process. This is especially useful when
              communicating with nodes who expect to always be the connecting
              part (i.e. nodes written in C or Java).

              Whenever the function returns _f_a_l_s_e (either when a suspend would
              occur or when _n_o_c_o_n_n_e_c_t was specified and the node was not
              already connected), the message is guaranteed _n_o_t to have been
              sent.

          WWaarrnniinngg::
              Use with extreme care!


       eerrllaanngg::sseett__ccooookkiiee((NNooddee,, CCooookkiiee)) -->> ttrruuee

              Types:

                 Node = node()
                 Cookie = atom()

              Sets the magic cookie of _N_o_d_e to the atom _C_o_o_k_i_e. If _N_o_d_e is the
              local node, the function also sets the cookie of all other
              unknown nodes to _C_o_o_k_i_e (see DDiissttrriibbuutteedd EErrllaanngg in the Erlang
              Reference Manual).

              Failure: _f_u_n_c_t_i_o_n___c_l_a_u_s_e if the local node is not alive.

       sseetteelleemmeenntt((IInnddeexx,, TTuuppllee11,, VVaalluuee)) -->> TTuuppllee22

              Types:

                 Index = 1..tuple_size(Tuple1)
                 Tuple1 = Tuple2 = tuple()
                 Value = term()

              Returns a tuple which is a copy of the argument _T_u_p_l_e_1 with the
              element given by the integer argument _I_n_d_e_x (the first element
              is the element with index 1) replaced by the argument _V_a_l_u_e.

              > setelement(2, {10, green, bottles}, red).
              {10,red,bottles}

       ssiizzee((IItteemm)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Item = tuple() | binary()

              Returns an integer which is the size of the argument _I_t_e_m, which
              must be either a tuple or a binary.

              > size({morni, mulle, bwange}).
              3

              Allowed in guard tests.

       ssppaawwnn((FFuunn)) -->> ppiidd(())

              Types:

                 Fun = function()

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list _[_]. Otherwise works like ssppaawwnn//33.

       ssppaawwnn((NNooddee,, FFuunn)) -->> ppiidd(())

              Types:

                 Node = node()
                 Fun = function()

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list _[_] on _N_o_d_e. If _N_o_d_e does not exist, a
              useless pid is returned. Otherwise works like ssppaawwnn//33.

       ssppaawwnn((MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> ppiidd(())

              Types:

                 Module = Function = atom()
                 Args = [term()]

              Returns the pid of a new process started by the application of
              _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n to _A_r_g_s. The new process created will be placed
              in the system scheduler queue and be run some time later.

              _e_r_r_o_r___h_a_n_d_l_e_r_:_u_n_d_e_f_i_n_e_d___f_u_n_c_t_i_o_n_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) is
              evaluated by the new process if _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n_/_A_r_i_t_y does not
              exist (where _A_r_i_t_y is the length of _A_r_g_s). The error handler can
              be redefined (see pprroocceessss__ffllaagg//22). If _e_r_r_o_r___h_a_n_d_l_e_r is
              undefined, or the user has redefined the default _e_r_r_o_r___h_a_n_d_l_e_r
              its replacement is undefined, a failure with the reason _u_n_d_e_f
              will occur.

              > spawn(speed, regulator, [high_speed, thin_cut]).
              <0.13.1>

       ssppaawwnn((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> ppiidd(())

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]

              Returns the pid of a new process started by the application of
              _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n to _A_r_g_s on _N_o_d_e. If _N_o_d_e does not exists, a
              useless pid is returned. Otherwise works like ssppaawwnn//33.

       ssppaawwnn__lliinnkk((FFuunn)) -->> ppiidd(())

              Types:

                 Fun = function()

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list []. A link is created between the calling
              process and the new process, atomically. Otherwise works like
              ssppaawwnn//33.

       ssppaawwnn__lliinnkk((NNooddee,, FFuunn)) -->> ppiidd(())

              Types:

                 Node = node()
                 Fun = function()

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list [] on _N_o_d_e. A link is created between the
              calling process and the new process, atomically. If _N_o_d_e does
              not exist, a useless pid is returned (and due to the link, an
              exit signal with exit reason _n_o_c_o_n_n_e_c_t_i_o_n will be received).
              Otherwise works like ssppaawwnn//33.

       ssppaawwnn__lliinnkk((MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> ppiidd(())

              Types:

                 Module = Function = atom()
                 Args = [term()]

              Returns the pid of a new process started by the application of
              _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n to _A_r_g_s. A link is created between the calling
              process and the new process, atomically. Otherwise works like
              ssppaawwnn//33.

       ssppaawwnn__lliinnkk((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> ppiidd(())

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]

              Returns the pid of a new process started by the application of
              _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n to _A_r_g_s on _N_o_d_e. A link is created between the
              calling process and the new process, atomically. If _N_o_d_e does
              not exist, a useless pid is returned (and due to the link, an
              exit signal with exit reason _n_o_c_o_n_n_e_c_t_i_o_n will be received).
              Otherwise works like ssppaawwnn//33.

       ssppaawwnn__mmoonniittoorr((FFuunn)) -->> {{ppiidd(()),, rreeffeerreennccee(())}}

              Types:

                 Fun = function()

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list [] and reference for a monitor created to
              the new process. Otherwise works like ssppaawwnn//33.

       ssppaawwnn__mmoonniittoorr((MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> {{ppiidd(()),, rreeffeerreennccee(())}}

              Types:

                 Module = module()
                 Function = atom()
                 Args = [term()]

              A new process is started by the application of _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n
              to _A_r_g_s, and the process is monitored at the same time. Returns
              the pid and a reference for the monitor. Otherwise works like
              ssppaawwnn//33.

       ssppaawwnn__oopptt((FFuunn,, OOppttiioonnss)) -->> ppiidd(()) || {{ppiidd(()),, rreeffeerreennccee(())}}

              Types:

                 Fun = function()
                 Options = [Option]
                 Option = link
                        | monitor
                        | {priority, Level}
                        | {fullsweep_after, Number :: integer() >= 0}
                        | {min_heap_size, Size :: integer() >= 0}
                        | {min_bin_vheap_size, VSize :: integer() >= 0}
                 Level = low | normal | high

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list _[_]. Otherwise works like ssppaawwnn__oopptt//44.

              If the option _m_o_n_i_t_o_r is given, the newly created process will
              be monitored and both the pid and reference for the monitor will
              be returned.

       ssppaawwnn__oopptt((NNooddee,, FFuunn,, OOppttiioonnss)) -->> ppiidd(()) || {{ppiidd(()),, rreeffeerreennccee(())}}

              Types:

                 Node = node()
                 Fun = function()
                 Options = [Option]
                 Option = link
                        | monitor
                        | {priority, Level}
                        | {fullsweep_after, Number :: integer() >= 0}
                        | {min_heap_size, Size :: integer() >= 0}
                        | {min_bin_vheap_size, VSize :: integer() >= 0}
                 Level = low | normal | high

              Returns the pid of a new process started by the application of
              _F_u_n to the empty list _[_] on _N_o_d_e. If _N_o_d_e does not exist, a
              useless pid is returned. Otherwise works like ssppaawwnn__oopptt//44.

       ssppaawwnn__oopptt((MMoodduullee,, FFuunnccttiioonn,, AArrggss,, OOppttiioonnss)) -->>
                    ppiidd(()) || {{ppiidd(()),, rreeffeerreennccee(())}}

              Types:

                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Options = [Option]
                 Option = link
                        | monitor
                        | {priority, Level}
                        | {fullsweep_after, Number :: integer() >= 0}
                        | {min_heap_size, Size :: integer() >= 0}
                        | {min_bin_vheap_size, VSize :: integer() >= 0}
                 Level = low | normal | high

              Works exactly like ssppaawwnn//33, except that an extra option list is
              given when creating the process.

              If the option _m_o_n_i_t_o_r is given, the newly created process will
              be monitored and both the pid and reference for the monitor will
              be returned.

                _l_i_n_k:
                  Sets a link to the parent process (like _s_p_a_w_n___l_i_n_k_/_3 does).

                _m_o_n_i_t_o_r:
                  Monitor the new process (just like mmoonniittoorr//22 does).

                _{_p_r_i_o_r_i_t_y_, _L_e_v_e_l_}:
                  Sets the priority of the new process. Equivalent to
                  executing pprroocceessss__ffllaagg((pprriioorriittyy,, LLeevveell)) in the start
                  function of the new process, except that the priority will
                  be set before the process is selected for execution for the
                  first time. For more information on priorities see
                  pprroocceessss__ffllaagg((pprriioorriittyy,, LLeevveell)).

                _{_f_u_l_l_s_w_e_e_p___a_f_t_e_r_, _N_u_m_b_e_r_}:
                  This option is only useful for performance tuning. In
                  general, you should not use this option unless you know that
                  there is problem with execution times and/or memory
                  consumption, and you should measure to make sure that the
                  option improved matters.

                  The Erlang runtime system uses a generational garbage
                  collection scheme, using an "old heap" for data that has
                  survived at least one garbage collection. When there is no
                  more room on the old heap, a fullsweep garbage collection
                  will be done.

                  The _f_u_l_l_s_w_e_e_p___a_f_t_e_r option makes it possible to specify the
                  maximum number of generational collections before forcing a
                  fullsweep even if there is still room on the old heap.
                  Setting the number to zero effectively disables the general
                  collection algorithm, meaning that all live data is copied
                  at every garbage collection.

                  Here are a few cases when it could be useful to change
                  _f_u_l_l_s_w_e_e_p___a_f_t_e_r. Firstly, if binaries that are no longer
                  used should be thrown away as soon as possible. (Set _N_u_m_b_e_r
                  to zero.) Secondly, a process that mostly have short-lived
                  data will be fullsweeped seldom or never, meaning that the
                  old heap will contain mostly garbage. To ensure a fullsweep
                  once in a while, set _N_u_m_b_e_r to a suitable value such as 10
                  or 20. Thirdly, in embedded systems with limited amount of
                  RAM and no virtual memory, one might want to preserve memory
                  by setting _N_u_m_b_e_r to zero. (The value may be set globally,
                  see eerrllaanngg::ssyysstteemm__ffllaagg//22.)

                _{_m_i_n___h_e_a_p___s_i_z_e_, _S_i_z_e_}:
                  This option is only useful for performance tuning. In
                  general, you should not use this option unless you know that
                  there is problem with execution times and/or memory
                  consumption, and you should measure to make sure that the
                  option improved matters.

                  Gives a minimum heap size in words. Setting this value
                  higher than the system default might speed up some processes
                  because less garbage collection is done. Setting too high
                  value, however, might waste memory and slow down the system
                  due to worse data locality. Therefore, it is recommended to
                  use this option only for fine-tuning an application and to
                  measure the execution time with various _S_i_z_e values.

                _{_m_i_n___b_i_n___v_h_e_a_p___s_i_z_e_, _V_S_i_z_e_}:
                  This option is only useful for performance tuning. In
                  general, you should not use this option unless you know that
                  there is problem with execution times and/or memory
                  consumption, and you should measure to make sure that the
                  option improved matters.

                  Gives a minimum binary virtual heap size in words. Setting
                  this value higher than the system default might speed up
                  some processes because less garbage collection is done.
                  Setting too high value, however, might waste memory.
                  Therefore, it is recommended to use this option only for
                  fine-tuning an application and to measure the execution time
                  with various _V_S_i_z_e values.

       ssppaawwnn__oopptt((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss,, OOppttiioonnss)) -->>
                    ppiidd(()) || {{ppiidd(()),, rreeffeerreennccee(())}}

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Options = [Option]
                 Option = link
                        | monitor
                        | {priority, Level}
                        | {fullsweep_after, Number :: integer() >= 0}
                        | {min_heap_size, Size :: integer() >= 0}
                        | {min_bin_vheap_size, VSize :: integer() >= 0}
                 Level = low | normal | high

              Returns the pid of a new process started by the application of
              _M_o_d_u_l_e_:_F_u_n_c_t_i_o_n to _A_r_g_s on _N_o_d_e. If _N_o_d_e does not exist, a
              useless pid is returned. Otherwise works like ssppaawwnn__oopptt//44.

       sspplliitt__bbiinnaarryy((BBiinn,, PPooss)) -->> {{BBiinn11,, BBiinn22}}

              Types:

                 Bin = Bin1 = Bin2 = binary()
                 Pos = 0..byte_size(Bin)

              Returns a tuple containing the binaries which are the result of
              splitting _B_i_n into two parts at position _P_o_s. This is not a
              destructive operation. After the operation, there will be three
              binaries altogether.

              > B = list_to_binary("0123456789").
              <<"0123456789">>
              > byte_size(B).
              10
              > {B1, B2} = split_binary(B,3).
              {<<"012">>,<<"3456789">>}
              > byte_size(B1).
              3
              > byte_size(B2).
              7

       eerrllaanngg::ssttaarrtt__ttiimmeerr((TTiimmee,, DDeesstt,, MMssgg)) -->> TTiimmeerrRReeff

              Types:

                 Time = integer() >= 0
                  0 <= Time <= 4294967295
                 Dest = LocalPid | RegName
                  LocalPid = pid() (of a process, alive or dead, on the local
                 node)
                  RegName = atom()
                 Msg = term()
                 TimerRef = reference()

              Starts a timer which will send the message _{_t_i_m_e_o_u_t_, _T_i_m_e_r_R_e_f_,
              _M_s_g_} to _D_e_s_t after _T_i_m_e milliseconds.

              If _D_e_s_t is an atom, it is supposed to be the name of a
              registered process. The process referred to by the name is
              looked up at the time of delivery. No error is given if the name
              does not refer to a process.

              If _D_e_s_t is a pid, the timer will be automatically canceled if
              the process referred to by the pid is not alive, or when the
              process exits. This feature was introduced in erts version
              5.4.11. Note that timers will not be automatically canceled when
              _D_e_s_t is an atom.

              See also eerrllaanngg::sseenndd__aafftteerr//33, eerrllaanngg::ccaanncceell__ttiimmeerr//11, and
              eerrllaanngg::rreeaadd__ttiimmeerr//11.

              Failure: _b_a_d_a_r_g if the arguments does not satisfy the
              requirements specified above.

       ssttaattiissttiiccss((TTyyppee)) -->> RReess

              Types:

                 Type, Res -- see below

              All times are in milliseconds unless otherwise specified.

              Returns information about the system as specified by _T_y_p_e:

                _c_o_n_t_e_x_t___s_w_i_t_c_h_e_s:
                  Returns _{_C_o_n_t_e_x_t_S_w_i_t_c_h_e_s_, _0_}, where _C_o_n_t_e_x_t_S_w_i_t_c_h_e_s is the
                  total number of context switches since the system started.

                _e_x_a_c_t___r_e_d_u_c_t_i_o_n_s:
                  Returns _{_T_o_t_a_l___E_x_a_c_t___R_e_d_u_c_t_i_o_n_s_,
                  _E_x_a_c_t___R_e_d_u_c_t_i_o_n_s___S_i_n_c_e___L_a_s_t___C_a_l_l_}.

            NNoottee::
                _s_t_a_t_i_s_t_i_c_s_(_e_x_a_c_t___r_e_d_u_c_t_i_o_n_s_) is a more expensive operation
                than ssttaattiissttiiccss((rreedduuccttiioonnss)) especially on an Erlang machine
                with SMP support.


                _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n:
                  Returns _{_N_u_m_b_e_r___o_f___G_C_s_, _W_o_r_d_s___R_e_c_l_a_i_m_e_d_, _0_}. This
                  information may not be valid for all implementations.

                > statistics(garbage_collection).
                {85,23961,0}


                _i_o:
                  Returns _{_{_i_n_p_u_t_, _I_n_p_u_t_}_, _{_o_u_t_p_u_t_, _O_u_t_p_u_t_}_}, where _I_n_p_u_t is
                  the total number of bytes received through ports, and _O_u_t_p_u_t
                  is the total number of bytes output to ports.

                _r_e_d_u_c_t_i_o_n_s:
                  Returns _{_T_o_t_a_l___R_e_d_u_c_t_i_o_n_s_, _R_e_d_u_c_t_i_o_n_s___S_i_n_c_e___L_a_s_t___C_a_l_l_}.

            NNoottee::
                From erts version 5.5 (OTP release R11B) this value does not
                include reductions performed in current time slices of
                currently scheduled processes. If an exact value is wanted,
                use ssttaattiissttiiccss((eexxaacctt__rreedduuccttiioonnss)).


                > statistics(reductions).
                {2046,11}


                _r_u_n___q_u_e_u_e:
                  Returns the length of the run queue, that is, the number of
                  processes that are ready to run.

                _r_u_n_t_i_m_e:
                  Returns _{_T_o_t_a_l___R_u_n___T_i_m_e_, _T_i_m_e___S_i_n_c_e___L_a_s_t___C_a_l_l_}. Note that
                  the run-time is the sum of the run-time for all threads in
                  the Erlang run-time system and may therefore be greater than
                  the wall-clock time.

                > statistics(runtime).
                {1690,1620}


                _s_c_h_e_d_u_l_e_r___w_a_l_l___t_i_m_e:
                  Returns a list of tuples with _{_S_c_h_e_d_u_l_e_r_I_d_, _A_c_t_i_v_e_T_i_m_e_,
                  _T_o_t_a_l_T_i_m_e_}, where _S_c_h_e_d_u_l_e_r_I_d is an integer id of the
                  scheduler, _A_c_t_i_v_e_T_i_m_e is the duration the scheduler has been
                  busy, _T_o_t_a_l_T_i_m_e is the total time duration since
                  sscchheedduulleerr__wwaallll__ttiimmee activation. The time unit is not defined
                  and may be subject to change between releases, operating
                  systems and system restarts. _s_c_h_e_d_u_l_e_r___w_a_l_l___t_i_m_e should only
                  be used to calculate relative values for scheduler-
                  utilization. _A_c_t_i_v_e_T_i_m_e can never exceed _T_o_t_a_l_T_i_m_e.

                  The definition of a busy scheduler is when it is not idle or
                  not scheduling (selecting) a process or port, meaning;
                  executing process code, executing linked-in-driver or NIF
                  code, executing built-in-functions or any other runtime
                  handling, garbage collecting or handling any other memory
                  management. Note, a scheduler may also be busy even if the
                  operating system has scheduled out the scheduler thread.

                  Returns _u_n_d_e_f_i_n_e_d if the system flag  sscchheedduulleerr__wwaallll__ttiimmee is
                  turned off.

                  The list of scheduler information is unsorted and may appear
                  in different order between calls.

                  Using _s_c_h_e_d_u_l_e_r___w_a_l_l___t_i_m_e to calculate scheduler
                  utilization.

                > erlang:system_flag(scheduler_wall_time, true).
                false
                > Ts0 = lists:sort(erlang:statistics(scheduler_wall_time)), ok.
                ok


                  Some time later we will take another snapshot and calculate
                  scheduler-utilization per scheduler.

                > Ts1 = lists:sort(erlang:statistics(scheduler_wall_time)), ok.
                ok
                > lists:map(fun({{I, A0, T0}, {I, A1, T1}}) -> {I, (A1 - A0)/(T1 - T0)} end, lists:zip(Ts0,Ts1)).
                [{1,0.9743474730177548},
                 {2,0.9744843782751444},
                 {3,0.9995902361669045},
                 {4,0.9738012596572161},
                 {5,0.9717956667018103},
                 {6,0.9739235846420741},
                 {7,0.973237033077876},
                 {8,0.9741297293248656}]


                  Using the same snapshots to calculate a total scheduler-
                  utilization.

                > {A, T} = lists:foldl(fun({{_, A0, T0}, {_, A1, T1}}, {Ai,Ti}) -> {Ai + (A1 - A0), Ti + (T1 - T0)} end, {0, 0}, lists:zip(Ts0,Ts1)), A/T.
                0.9769136803764825


            NNoottee::
                _s_c_h_e_d_u_l_e_r___w_a_l_l___t_i_m_e is by default disabled. Use
                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_s_c_h_e_d_u_l_e_r___w_a_l_l___t_i_m_e_, _t_r_u_e_) to enable it.


                _w_a_l_l___c_l_o_c_k:
                  Returns _{_T_o_t_a_l___W_a_l_l_c_l_o_c_k___T_i_m_e_,
                  _W_a_l_l_c_l_o_c_k___T_i_m_e___S_i_n_c_e___L_a_s_t___C_a_l_l_}. _w_a_l_l___c_l_o_c_k can be used in
                  the same manner as _r_u_n_t_i_m_e, except that real time is
                  measured as opposed to runtime or CPU time.

       eerrllaanngg::ssuussppeenndd__pprroocceessss((SSuussppeennddeeee,, OOppttLLiisstt)) -->> bboooolleeaann(())

              Types:

                 Suspendee = pid()
                 OptList = [Opt]
                 Opt = atom()

              Increases the suspend count on the process identified by
              _S_u_s_p_e_n_d_e_e and puts it in the suspended state if it isn't already
              in the suspended state. A suspended process will not be
              scheduled for execution until the process has been resumed.

              A process can be suspended by multiple processes and can be
              suspended multiple times by a single process. A suspended
              process will not leave the suspended state until its suspend
              count reach zero. The suspend count of _S_u_s_p_e_n_d_e_e is decreased
              when eerrllaanngg::rreessuummee__pprroocceessss((SSuussppeennddeeee)) is called by the same
              process that called _e_r_l_a_n_g_:_s_u_s_p_e_n_d___p_r_o_c_e_s_s_(_S_u_s_p_e_n_d_e_e_). All
              increased suspend counts on other processes acquired by a
              process will automatically be decreased when the process
              terminates.

              Currently the following options (_O_p_ts) are available:

                _a_s_y_n_c_h_r_o_n_o_u_s:
                   A suspend request is sent to the process identified by
                  _S_u_s_p_e_n_d_e_e. _S_u_s_p_e_n_d_e_e will eventually suspend unless it is
                  resumed before it was able to suspend. The caller of
                  _e_r_l_a_n_g_:_s_u_s_p_e_n_d___p_r_o_c_e_s_s_/_2 will return immediately, regardless
                  of whether the _S_u_s_p_e_n_d_e_e has suspended yet or not. Note that
                  the point in time when the _S_u_s_p_e_n_d_e_e will actually suspend
                  cannot be deduced from other events in the system. The only
                  guarantee given is that the _S_u_s_p_e_n_d_e_e will _e_v_e_n_t_u_a_l_l_y
                  suspend (unless it is resumed). If the _a_s_y_n_c_h_r_o_n_o_u_s option
                  has _n_o_t been passed, the caller of _e_r_l_a_n_g_:_s_u_s_p_e_n_d___p_r_o_c_e_s_s_/_2
                  will be blocked until the _S_u_s_p_e_n_d_e_e has actually suspended.

                _u_n_l_e_s_s___s_u_s_p_e_n_d_i_n_g:
                   The process identified by _S_u_s_p_e_n_d_e_e will be suspended
                  unless the calling process already is suspending the
                  _S_u_s_p_e_n_d_e_e. If _u_n_l_e_s_s___s_u_s_p_e_n_d_i_n_g is combined with the
                  _a_s_y_n_c_h_r_o_n_o_u_s option, a suspend request will be sent unless
                  the calling process already is suspending the _S_u_s_p_e_n_d_e_e or
                  if a suspend request already has been sent and is in
                  transit. If the calling process already is suspending the
                  _S_u_s_p_e_n_d_e_e, or if combined with the _a_s_y_n_c_h_r_o_n_o_u_s option and a
                  send request already is in transit, _f_a_l_s_e is returned and
                  the suspend count on _S_u_s_p_e_n_d_e_e will remain unchanged.

              If the suspend count on the process identified by _S_u_s_p_e_n_d_e_e was
              increased, _t_r_u_e is returned; otherwise, _f_a_l_s_e is returned.

          WWaarrnniinngg::
              This BIF is intended for debugging only.


              Failures:

                _b_a_d_a_r_g:
                   If _S_u_s_p_e_n_d_e_e isn't a process identifier.

                _b_a_d_a_r_g:
                   If the process identified by _S_u_s_p_e_n_d_e_e is same the process
                  as the process calling _e_r_l_a_n_g_:_s_u_s_p_e_n_d___p_r_o_c_e_s_s_/_2.

                _b_a_d_a_r_g:
                   If the process identified by _S_u_s_p_e_n_d_e_e is not alive.

                _b_a_d_a_r_g:
                   If the process identified by _S_u_s_p_e_n_d_e_e resides on another
                  node.

                _b_a_d_a_r_g:
                   If _O_p_t_L_i_s_t isn't a proper list of valid _O_p_ts.

                _s_y_s_t_e_m___l_i_m_i_t:
                   If the process identified by _S_u_s_p_e_n_d_e_e has been suspended
                  more times by the calling process than can be represented by
                  the currently used internal data structures. The current
                  system limit is larger than 2 000 000 000 suspends, and it
                  will never be less than that.

       eerrllaanngg::ssuussppeenndd__pprroocceessss((SSuussppeennddeeee)) -->> ttrruuee

              Types:

                 Suspendee = pid()

              Suspends the process identified by _S_u_s_p_e_n_d_e_e. The same as
              calling eerrllaanngg::ssuussppeenndd__pprroocceessss((SSuussppeennddeeee,, [[]])). For more
              information see the documentation of eerrllaanngg::ssuussppeenndd__pprroocceessss//22.

          WWaarrnniinngg::
              This BIF is intended for debugging only.


       eerrllaanngg::ssyysstteemm__ffllaagg((FFllaagg,, VVaalluuee)) -->> OOllddVVaalluuee

              Types:

                 Flag, Value, OldValue -- see below

          WWaarrnniinngg::
              The ccppuu__ttooppoollooggyy, and sscchheedduulleerr__bbiinndd__ttyyppee _F_l_a_gs are _d_e_p_r_e_c_a_t_e_d
              and have been scheduled for removal in erts-5.10/OTP-R16.


              Sets various system properties of the Erlang node. Returns the
              old value of the flag.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_b_a_c_k_t_r_a_c_e___d_e_p_t_h_, _D_e_p_t_h_):
                  Sets the maximum depth of call stack back-traces in the exit
                  reason element of _'_E_X_I_T_' tuples.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_c_p_u___t_o_p_o_l_o_g_y_, _C_p_u_T_o_p_o_l_o_g_y_):
                  _N_O_T_E_: This argument is _d_e_p_r_e_c_a_t_e_d and scheduled for removal
                  in erts-5.10/OTP-R16. Instead of using this argument you are
                  advised to use the _e_r_l command line argument ++sscctt. When this
                  argument has been removed a final CPU topology to use will
                  be determined at emulator boot time.

                  Sets the user defined _C_p_u_T_o_p_o_l_o_g_y. The user defined CPU
                  topology will override any automatically detected CPU
                  topology. By passing _u_n_d_e_f_i_n_e_d as _C_p_u_T_o_p_o_l_o_g_y the system
                  will revert back to the CPU topology automatically detected.
                  The returned value equals the value returned from
                  _e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_c_p_u___t_o_p_o_l_o_g_y_) before the change was made.

                  The CPU topology is used when binding schedulers to logical
                  processors. If schedulers are already bound when the CPU
                  topology is changed, the schedulers will be sent a request
                  to rebind according to the new CPU topology.

                  The user defined CPU topology can also be set by passing the
                  ++sscctt command line argument to _e_r_l.

                  For information on the _C_p_u_T_o_p_o_l_o_g_y type and more, see the
                  documentation of eerrllaanngg::ssyysstteemm__iinnffoo((ccppuu__ttooppoollooggyy)), and the
                  _e_r_l ++sscctt and ++ssbbtt command line flags.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_f_u_l_l_s_w_e_e_p___a_f_t_e_r_, _N_u_m_b_e_r_):
                  _N_u_m_b_e_r is a non-negative integer which indicates how many
                  times generational garbage collections can be done without
                  forcing a fullsweep collection. The value applies to new
                  processes; processes already running are not affected.

                  In low-memory systems (especially without virtual memory),
                  setting the value to 0 can help to conserve memory.

                  An alternative way to set this value is through the
                  (operating system) environment variable _E_R_L___F_U_L_L_S_W_E_E_P___A_F_T_E_R.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_m_i_n___h_e_a_p___s_i_z_e_, _M_i_n_H_e_a_p_S_i_z_e_):
                  Sets the default minimum heap size for processes. The size
                  is given in words. The new _m_i_n___h_e_a_p___s_i_z_e only effects
                  processes spawned after the change of _m_i_n___h_e_a_p___s_i_z_e has been
                  made. The _m_i_n___h_e_a_p___s_i_z_e can be set for individual processes
                  by use of ssppaawwnn__oopptt//NN or pprroocceessss__ffllaagg//22.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_m_i_n___b_i_n___v_h_e_a_p___s_i_z_e_, _M_i_n_B_i_n_V_H_e_a_p_S_i_z_e_):
                  Sets the default minimum binary virtual heap size for
                  processes. The size is given in words. The new
                  _m_i_n___b_i_n___v_h_h_e_a_p___s_i_z_e only effects processes spawned after the
                  change of _m_i_n___b_i_n___v_h_h_e_a_p___s_i_z_e has been made. The
                  _m_i_n___b_i_n___v_h_e_a_p___s_i_z_e can be set for individual processes by
                  use of ssppaawwnn__oopptt//NN or pprroocceessss__ffllaagg//22.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_m_u_l_t_i___s_c_h_e_d_u_l_i_n_g_, _B_l_o_c_k_S_t_a_t_e_):
                  _B_l_o_c_k_S_t_a_t_e _= _b_l_o_c_k _| _u_n_b_l_o_c_k

                  If multi-scheduling is enabled, more than one scheduler
                  thread is used by the emulator. Multi-scheduling can be
                  blocked. When multi-scheduling has been blocked, only one
                  scheduler thread will schedule Erlang processes.

                  If _B_l_o_c_k_S_t_a_t_e _=_:_= _b_l_o_c_k, multi-scheduling will be blocked.
                  If _B_l_o_c_k_S_t_a_t_e _=_:_= _u_n_b_l_o_c_k and no-one else is blocking multi-
                  scheduling and this process has only blocked one time,
                  multi-scheduling will be unblocked. One process can block
                  multi-scheduling multiple times. If a process has blocked
                  multiple times, it has to unblock exactly as many times as
                  it has blocked before it has released its multi-scheduling
                  block. If a process that has blocked multi-scheduling exits,
                  it will release its blocking of multi-scheduling.

                  The return values are _d_i_s_a_b_l_e_d, _b_l_o_c_k_e_d, or _e_n_a_b_l_e_d. The
                  returned value describes the state just after the call to
                  _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_m_u_l_t_i___s_c_h_e_d_u_l_i_n_g_, _B_l_o_c_k_S_t_a_t_e_) has been
                  made. The return values are described in the documentation
                  of eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg)).

                  _N_O_T_E: Blocking of multi-scheduling should normally not be
                  needed. If you feel that you need to block multi-scheduling,
                  think through the problem at least a couple of times again.
                  Blocking multi-scheduling should only be used as a last
                  resort since it will most likely be a _v_e_r_y _i_n_e_f_f_i_c_i_e_n_t way
                  to solve the problem.

                  See also eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg)),
                  eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg__bblloocckkeerrss)), and
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)).

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_s_c_h_e_d_u_l_e_r___b_i_n_d___t_y_p_e_, _H_o_w_):
                  _N_O_T_E_: This argument is _d_e_p_r_e_c_a_t_e_d and scheduled for removal
                  in erts-5.10/OTP-R16. Instead of using this argument you are
                  advised to use the _e_r_l command line argument ++ssbbtt. When this
                  argument has been removed a final scheduler bind type to use
                  will be determined at emulator boot time.

                  Controls if and how schedulers are bound to logical
                  processors.

                  When _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_s_c_h_e_d_u_l_e_r___b_i_n_d___t_y_p_e_, _H_o_w_) is called,
                  an asynchronous signal is sent to all schedulers online
                  which causes them to try to bind or unbind as requested.
                  _N_O_T_E_: If a scheduler fails to bind, this will often be
                  silently ignored. This since it isn't always possible to
                  verify valid logical processor identifiers. If an error is
                  reported, it will be reported to the _e_r_r_o_r___l_o_g_g_e_r. If you
                  want to verify that the schedulers actually have bound as
                  requested, call eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerr__bbiinnddiinnggss)).

                  Schedulers can currently only be bound on newer Linux,
                  Solaris, FreeBSD, and Windows systems, but more systems will
                  be supported in the future.

                  In order for the runtime system to be able to bind
                  schedulers, the CPU topology needs to be known. If the
                  runtime system fails to automatically detect the CPU
                  topology, it can be defined. For more information on how to
                  define the CPU topology, see the _e_r_l ++sscctt command line flag.

                  The runtime system will by default _n_o_t bind schedulers to
                  logical processors.

                  _N_O_T_E_: If the Erlang runtime system is the only operating
                  system process that binds threads to logical processors,
                  this improves the performance of the runtime system.
                  However, if other operating system processes (as for example
                  another Erlang runtime system) also bind threads to logical
                  processors, there might be a performance penalty instead. In
                  some cases this performance penalty might be severe. If this
                  is the case, you are advised to not bind the schedulers.

                  Schedulers can be bound in different ways. The _H_o_w argument
                  determines how schedulers are bound. _H_o_w can currently be
                  one of:

                  _u_n_b_o_u_n_d:
                    Same as the _e_r_l command line argument ++ssbbtt uu.

                  _n_o___s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt nnss.

                  _t_h_r_e_a_d___s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt ttss.

                  _p_r_o_c_e_s_s_o_r___s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt ppss.

                  _s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt ss.

                  _n_o___n_o_d_e___t_h_r_e_a_d___s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt nnnnttss.

                  _n_o___n_o_d_e___p_r_o_c_e_s_s_o_r___s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt nnnnppss.

                  _t_h_r_e_a_d___n_o___n_o_d_e___p_r_o_c_e_s_s_o_r___s_p_r_e_a_d:
                    Same as the _e_r_l command line argument ++ssbbtt ttnnnnppss.

                  _d_e_f_a_u_l_t___b_i_n_d:
                    Same as the _e_r_l command line argument ++ssbbtt ddbb.

                  The value returned equals _H_o_w before the _s_c_h_e_d_u_l_e_r___b_i_n_d___t_y_p_e
                  flag was changed.

                  Failure:

                  _n_o_t_s_u_p:
                    If binding of schedulers is not supported.

                  _b_a_d_a_r_g:
                    If _H_o_w isn't one of the documented alternatives.

                  _b_a_d_a_r_g:
                    If no CPU topology information is available.

                  The scheduler bind type can also be set by passing the ++ssbbtt
                  command line argument to _e_r_l.

                  For more information, see
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerr__bbiinndd__ttyyppee)),
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerr__bbiinnddiinnggss)), the _e_r_l ++ssbbtt and
                  ++sscctt command line flags.

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_s_c_h_e_d_u_l_e_r___w_a_l_l___t_i_m_e_, _B_o_o_l_e_a_n_):
                  Turns on/off scheduler wall time measurements.

                  For more information see,
                  eerrllaanngg::ssttaattiissttiiccss((sscchheedduulleerr__wwaallll__ttiimmee)).

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_s_c_h_e_d_u_l_e_r_s___o_n_l_i_n_e_, _S_c_h_e_d_u_l_e_r_s_O_n_l_i_n_e_):
                  Sets the amount of schedulers online. Valid range is 1 <=
                  SchedulerId <= erlang:system_info(schedulers).

                  For more information see, eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)),
                  and eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss__oonnlliinnee)).

                _e_r_l_a_n_g_:_s_y_s_t_e_m___f_l_a_g_(_t_r_a_c_e___c_o_n_t_r_o_l___w_o_r_d_, _T_C_W_):
                  Sets the value of the node's trace control word to _T_C_W. _T_C_W
                  should be an unsigned integer. For more information see
                  documentation of the sseett__ttccww function in the match
                  specification documentation in the ERTS User's Guide.

          NNoottee::
              The _s_c_h_e_d_u_l_e_r_s option has been removed as of erts version 5.5.3.
              The number of scheduler threads is determined at emulator boot
              time, and cannot be changed after that.


       eerrllaanngg::ssyysstteemm__iinnffoo((TTyyppee)) -->> RReess

              Types:

                 Type, Res -- see below

              Returns various information about the current system (emulator)
              as specified by _T_y_p_e:

                _a_l_l_o_c_a_t_e_d___a_r_e_a_s:
                  Returns a list of tuples with information about
                  miscellaneous allocated memory areas.

                  Each tuple contains an atom describing type of memory as
                  first element and amount of allocated memory in bytes as
                  second element. In those cases when there is information
                  present about allocated and used memory, a third element is
                  present. This third element contains the amount of used
                  memory in bytes.

                  _e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_a_l_l_o_c_a_t_e_d___a_r_e_a_s_) is intended for
                  debugging, and the content is highly implementation
                  dependent. The content of the results will therefore change
                  when needed without prior notice.

                  _N_o_t_e_: The sum of these values is _n_o_t the total amount of
                  memory allocated by the emulator. Some values are part of
                  other values, and some memory areas are not part of the
                  result. If you are interested in the total amount of memory
                  allocated by the emulator see eerrllaanngg::mmeemmoorryy//00,,11.

                _a_l_l_o_c_a_t_o_r:
                  Returns _{_A_l_l_o_c_a_t_o_r_, _V_e_r_s_i_o_n_, _F_e_a_t_u_r_e_s_, _S_e_t_t_i_n_g_s_}_.

                  Types:

                  * _A_l_l_o_c_a_t_o_r _= _u_n_d_e_f_i_n_e_d _| _g_l_i_b_c

                  * _V_e_r_s_i_o_n _= _[_i_n_t_e_g_e_r_(_)_]

                  * _F_e_a_t_u_r_e_s _= _[_a_t_o_m_(_)_]

                  * _S_e_t_t_i_n_g_s _= _[_{_S_u_b_s_y_s_t_e_m_, _[_{_P_a_r_a_m_e_t_e_r_, _V_a_l_u_e_}_]_}_]

                  * _S_u_b_s_y_s_t_e_m _= _a_t_o_m_(_)

                  * _P_a_r_a_m_e_t_e_r _= _a_t_o_m_(_)

                  * _V_a_l_u_e _= _t_e_r_m_(_)

                  Explanation:

                  * _A_l_l_o_c_a_t_o_r corresponds to the _m_a_l_l_o_c_(_) implementation used.
                    If _A_l_l_o_c_a_t_o_r equals _u_n_d_e_f_i_n_e_d, the _m_a_l_l_o_c_(_) implementation
                    used could not be identified. Currently _g_l_i_b_c can be
                    identified.

                  * _V_e_r_s_i_o_n is a list of integers (but not a string)
                    representing the version of the _m_a_l_l_o_c_(_) implementation
                    used.

                  * _F_e_a_t_u_r_e_s is a list of atoms representing allocation
                    features used.

                  * _S_e_t_t_i_n_g_s is a list of subsystems, their configurable
                    parameters, and used values. Settings may differ between
                    different combinations of platforms, allocators, and
                    allocation features. Memory sizes are given in bytes.

                  See also "System Flags Effecting erts_alloc" in
                  eerrttss__aalllloocc((33)).

                _a_l_l_o_c___u_t_i_l___a_l_l_o_c_a_t_o_r_s:
                  Returns a list of the names of all allocators using the ERTS
                  internal _a_l_l_o_c___u_t_i_l framework as atoms. For more information
                  see the ""tthhee aalllloocc__uuttiill ffrraammeewwoorrkk"" sseeccttiioonn iinn tthhee
                  eerrttss__aalllloocc((33)) documentation.

                _{_a_l_l_o_c_a_t_o_r_, _A_l_l_o_c_}:
                  Returns information about the specified allocator. As of
                  erts version 5.6.1 the return value is a list of _{_i_n_s_t_a_n_c_e_,
                  _I_n_s_t_a_n_c_e_N_o_, _I_n_s_t_a_n_c_e_I_n_f_o_} tuples where _I_n_s_t_a_n_c_e_I_n_f_o contains
                  information about a specific instance of the allocator. If
                  _A_l_l_o_c is not a recognized allocator, _u_n_d_e_f_i_n_e_d is returned.
                  If _A_l_l_o_c is disabled, _f_a_l_s_e is returned.

                  _N_o_t_e_: The information returned is highly implementation
                  dependent and may be changed, or removed at any time without
                  prior notice. It was initially intended as a tool when
                  developing new allocators, but since it might be of interest
                  for others it has been briefly documented.

                  The recognized allocators are listed in eerrttss__aalllloocc((33)). After
                  reading the _e_r_t_s___a_l_l_o_c_(_3_) documentation, the returned
                  information should more or less speak for itself. But it can
                  be worth explaining some things. Call counts are presented
                  by two values. The first value is giga calls, and the second
                  value is calls. _m_b_c_s, and _s_b_c_s are abbreviations for,
                  respectively, multi-block carriers, and single-block
                  carriers. Sizes are presented in bytes. When it is not a
                  size that is presented, it is the amount of something. Sizes
                  and amounts are often presented by three values, the first
                  is current value, the second is maximum value since the last
                  call to _e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_{_a_l_l_o_c_a_t_o_r_, _A_l_l_o_c_}_), and the
                  third is maximum value since the emulator was started. If
                  only one value is present, it is the current value.
                  _f_i_x___a_l_l_o_c memory block types are presented by two values.
                  The first value is memory pool size and the second value
                  used memory size.

                _{_a_l_l_o_c_a_t_o_r___s_i_z_e_s_, _A_l_l_o_c_}:
                  Returns various size information for the specified
                  allocator. The information returned is a subset of the
                  information returned by eerrllaanngg::ssyysstteemm__iinnffoo(({{aallllooccaattoorr,,
                  AAlllloocc}})).

                _b_u_i_l_d___t_y_p_e:
                  Returns an atom describing the build type of the runtime
                  system. This is normally the atom _o_p_t for optimized. Other
                  possible return values are _d_e_b_u_g, _p_u_r_i_f_y, _q_u_a_n_t_i_f_y, _p_u_r_e_c_o_v,
                  _g_c_o_v, _v_a_l_g_r_i_n_d, _g_p_r_o_f, and _l_c_n_t. Possible return values may
                  be added and/or removed at any time without prior notice.

                _c___c_o_m_p_i_l_e_r___u_s_e_d:
                  Returns a two-tuple describing the C compiler used when
                  compiling the runtime system. The first element is an atom
                  describing the name of the compiler, or _u_n_d_e_f_i_n_e_d if
                  unknown. The second element is a term describing the version
                  of the compiler, or _u_n_d_e_f_i_n_e_d if unknown.

                _c_h_e_c_k___i_o:
                  Returns a list containing miscellaneous information
                  regarding the emulators internal I/O checking. Note, the
                  content of the returned list may vary between platforms and
                  over time. The only thing guaranteed is that a list is
                  returned.

                _c_o_m_p_a_t___r_e_l:
                  Returns the compatibility mode of the local node as an
                  integer. The integer returned represents the Erlang/OTP
                  release which the current emulator has been set to be
                  backward compatible with. The compatibility mode can be
                  configured at startup by using the command line flag _+_R, see
                  eerrll((11)).

                _c_p_u___t_o_p_o_l_o_g_y:
                  Returns the _C_p_u_T_o_p_o_l_o_g_y which currently is used by the
                  emulator. The CPU topology is used when binding schedulers
                  to logical processors. The CPU topology used is the uusseerr
                  ddeeffiinneedd CCPPUU ttooppoollooggyy if such exists; otherwise, the
                  aauuttoommaattiiccaallllyy ddeetteecctteedd CCPPUU ttooppoollooggyy if such exists. If no
                  CPU topology exists, _u_n_d_e_f_i_n_e_d is returned.

                  Types:

                  * _C_p_u_T_o_p_o_l_o_g_y _= _L_e_v_e_l_E_n_t_r_y_L_i_s_t _| _u_n_d_e_f_i_n_e_d

                  * _L_e_v_e_l_E_n_t_r_y_L_i_s_t _= _[_L_e_v_e_l_E_n_t_r_y_] (all _L_e_v_e_l_E_n_t_r_ys of a
                    _L_e_v_e_l_E_n_t_r_y_L_i_s_t must contain the same _L_e_v_e_l_T_a_g, except on
                    the top level where both _n_o_d_e and _p_r_o_c_e_s_s_o_r_L_e_v_e_l_T_a_gs may
                    co-exist)

                  * _L_e_v_e_l_E_n_t_r_y _= _{_L_e_v_e_l_T_a_g_, _S_u_b_L_e_v_e_l_} _| _{_L_e_v_e_l_T_a_g_, _I_n_f_o_L_i_s_t_,
                    _S_u_b_L_e_v_e_l_} (_{_L_e_v_e_l_T_a_g_, _S_u_b_L_e_v_e_l_} _=_= _{_L_e_v_e_l_T_a_g_, _[_]_,
                    _S_u_b_L_e_v_e_l_})

                  * _L_e_v_e_l_T_a_g _= _n_o_d_e_|_p_r_o_c_e_s_s_o_r_|_c_o_r_e_|_t_h_r_e_a_d (more _L_e_v_e_l_T_a_gs may
                    be introduced in the future)

                  * _S_u_b_L_e_v_e_l _= _[_L_e_v_e_l_E_n_t_r_y_] _| _L_o_g_i_c_a_l_C_p_u_I_d

                  * _L_o_g_i_c_a_l_C_p_u_I_d _= _{_l_o_g_i_c_a_l_, _i_n_t_e_g_e_r_(_)_}

                  * _I_n_f_o_L_i_s_t _= _[_] (the _I_n_f_o_L_i_s_t may be extended in the future)

                  _n_o_d_e refers to NUMA (non-uniform memory access) nodes, and
                  _t_h_r_e_a_d refers to hardware threads (e.g. Intels hyper-
                  threads).

                  A level in the _C_p_u_T_o_p_o_l_o_g_y term can be omitted if only one
                  entry exists and the _I_n_f_o_L_i_s_t is empty.

                  _t_h_r_e_a_d can only be a sub level to _c_o_r_e. _c_o_r_e can be a sub
                  level to either _p_r_o_c_e_s_s_o_r or _n_o_d_e. _p_r_o_c_e_s_s_o_r can either be
                  on the top level or a sub level to _n_o_d_e. _n_o_d_e can either be
                  on the top level or a sub level to _p_r_o_c_e_s_s_o_r. That is, NUMA
                  nodes can be processor internal or processor external. A CPU
                  topology can consist of a mix of processor internal and
                  external NUMA nodes, as long as each logical CPU belongs to
                  one and only one NUMA node. Cache hierarchy is not part of
                  the _C_p_u_T_o_p_o_l_o_g_y type yet, but will be in the future. Other
                  things may also make it into the CPU topology in the future.
                  In other words, expect the _C_p_u_T_o_p_o_l_o_g_y type to change.

                _{_c_p_u___t_o_p_o_l_o_g_y_, _d_e_f_i_n_e_d_}:
                  Returns the user defined _C_p_u_T_o_p_o_l_o_g_y. For more information
                  see the documentation of the _e_r_l ++sscctt command line flag, and
                  the documentation of the ccppuu__ttooppoollooggyy argument.

                _{_c_p_u___t_o_p_o_l_o_g_y_, _d_e_t_e_c_t_e_d_}:
                  Returns the automatically detected _C_p_u_T_o_p_o_l_o_g_y. The emulator
                  currently only detects the CPU topology on some newer Linux,
                  Solaris, FreeBSD, and Windows systems. On Windows system
                  with more than 32 logical processors the CPU topology is not
                  detected.

                  For more information see the documentation of the
                  ccppuu__ttooppoollooggyy argument.

                _{_c_p_u___t_o_p_o_l_o_g_y_, _u_s_e_d_}:
                  Returns the _C_p_u_T_o_p_o_l_o_g_y which is used by the emulator. For
                  more information see the documentation of the ccppuu__ttooppoollooggyy
                  argument.

                _c_r_e_a_t_i_o_n:
                  Returns the creation of the local node as an integer. The
                  creation is changed when a node is restarted. The creation
                  of a node is stored in process identifiers, port
                  identifiers, and references. This makes it (to some extent)
                  possible to distinguish between identifiers from different
                  incarnations of a node. Currently valid creations are
                  integers in the range 1..3, but this may (probably will)
                  change in the future. If the node is not alive, 0 is
                  returned.

                _d_e_b_u_g___c_o_m_p_i_l_e_d:
                  Returns _t_r_u_e if the emulator has been debug compiled;
                  otherwise, _f_a_l_s_e.

                _d_i_s_t:
                  Returns a binary containing a string of distribution
                  information formatted as in Erlang crash dumps. For more
                  information see the ""HHooww ttoo iinntteerrpprreett tthhee EErrllaanngg ccrraasshh
                  dduummppss"" chapter in the ERTS User's Guide.

                _d_i_s_t___c_t_r_l:
                  Returns a list of tuples _{_N_o_d_e_, _C_o_n_t_r_o_l_l_i_n_g_E_n_t_i_t_y_}, one
                  entry for each connected remote node. The _N_o_d_e is the name
                  of the node and the _C_o_n_t_r_o_l_l_i_n_g_E_n_t_i_t_y is the port or pid
                  responsible for the communication to that node. More
                  specifically, the _C_o_n_t_r_o_l_l_i_n_g_E_n_t_i_t_y for nodes connected via
                  TCP/IP (the normal case) is the socket actually used in
                  communication with the specific node.

                _d_r_i_v_e_r___v_e_r_s_i_o_n:
                  Returns a string containing the erlang driver version used
                  by the runtime system. It will be on the form ""<<mmaajjoorr
                  vveerr>>..<<mmiinnoorr vveerr>>"".

                _d_y_n_a_m_i_c___t_r_a_c_e:
                  Returns an atom describing the dynamic trace framework
                  compiled into the virtual machine. It can currently be
                  either _d_t_r_a_c_e, _s_y_s_t_e_m_t_a_p or _n_o_n_e. For a commercial or
                  standard build, this is always _n_o_n_e, the other return values
                  indicate a custom configuration (e.g. _._/_c_o_n_f_i_g_u_r_e _-_-_w_i_t_h_-
                  _d_y_n_a_m_i_c_-_t_r_a_c_e_=_d_t_r_a_c_e). See the ddyynnttrraaccee  manual page and the
                  _R_E_A_D_M_E_._d_t_r_a_c_e/_R_E_A_D_M_E_._s_y_s_t_e_m_t_a_p files in the Erlang source
                  code top directory for more information about dynamic
                  tracing.

                _d_y_n_a_m_i_c___t_r_a_c_e___p_r_o_b_e_s:
                  Returns a _b_o_o_l_e_a_n_(_) indicating if dynamic trace probes
                  (either dtrace or systemtap) are built into the emulator.
                  This can only be _t_r_u_e if the virtual machine was built for
                  dynamic tracing (i.e. _s_y_s_t_e_m___i_n_f_o_(_d_y_n_a_m_i_c___t_r_a_c_e_) returns
                  _d_t_r_a_c_e or _s_y_s_t_e_m_t_a_p).

                _e_l_i_b___m_a_l_l_o_c:
                  This option will be removed in a future release. The return
                  value will always be _f_a_l_s_e since the elib_malloc allocator
                  has been removed.

                _d_i_s_t___b_u_f___b_u_s_y___l_i_m_i_t:
                  Returns the value of the distribution buffer busy limit in
                  bytes. This limit can be set on startup by passing the
                  ++zzddbbbbll command line flag to _e_r_l.

                _f_u_l_l_s_w_e_e_p___a_f_t_e_r:
                  Returns _{_f_u_l_l_s_w_e_e_p___a_f_t_e_r_, _i_n_t_e_g_e_r_(_)_} which is the
                  _f_u_l_l_s_w_e_e_p___a_f_t_e_r garbage collection setting used by default.
                  For more information see _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n described below.

                _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n:
                  Returns a list describing the default garbage collection
                  settings. A process spawned on the local node by a _s_p_a_w_n or
                  _s_p_a_w_n___l_i_n_k will use these garbage collection settings. The
                  default settings can be changed by use of ssyysstteemm__ffllaagg//22.
                  ssppaawwnn__oopptt//44 can spawn a process that does not use the
                  default settings.

                _h_e_a_p___s_i_z_e_s:
                  Returns a list of integers representing valid heap sizes in
                  words. All Erlang heaps are sized from sizes in this list.

                _h_e_a_p___t_y_p_e:
                  Returns the heap type used by the current emulator.
                  Currently only the following heap type exists:

                  _p_r_i_v_a_t_e:
                    Each process has a heap reserved for its use and no
                    references between heaps of different processes are
                    allowed. Messages passed between processes are copied
                    between heaps.

                _i_n_f_o:
                  Returns a binary containing a string of miscellaneous system
                  information formatted as in Erlang crash dumps. For more
                  information see the ""HHooww ttoo iinntteerrpprreett tthhee EErrllaanngg ccrraasshh
                  dduummppss"" chapter in the ERTS User's Guide.

                _k_e_r_n_e_l___p_o_l_l:
                  Returns _t_r_u_e if the emulator uses some kind of kernel-poll
                  implementation; otherwise, _f_a_l_s_e.

                _l_o_a_d_e_d:
                  Returns a binary containing a string of loaded module
                  information formatted as in Erlang crash dumps. For more
                  information see the ""HHooww ttoo iinntteerrpprreett tthhee EErrllaanngg ccrraasshh
                  dduummppss"" chapter in the ERTS User's Guide.

                _l_o_g_i_c_a_l___p_r_o_c_e_s_s_o_r_s:
                  Returns the detected number of logical processors configured
                  on the system. The return value is either an integer, or the
                  atom _u_n_k_n_o_w_n if the emulator wasn't able to detect logical
                  processors configured.

                _l_o_g_i_c_a_l___p_r_o_c_e_s_s_o_r_s___a_v_a_i_l_a_b_l_e:
                  Returns the detected number of logical processors available
                  to the Erlang runtime system. The return value is either an
                  integer, or the atom _u_n_k_n_o_w_n if the emulator wasn't able to
                  detect logical processors available. The number of logical
                  processors available is less than or equal to the number of
                  llooggiiccaall pprroocceessssoorrss oonnlliinnee.

                _l_o_g_i_c_a_l___p_r_o_c_e_s_s_o_r_s___o_n_l_i_n_e:
                  Returns the detected number of logical processors online on
                  the system. The return value is either an integer, or the
                  atom _u_n_k_n_o_w_n if the emulator wasn't able to detect logical
                  processors online. The number of logical processors online
                  is less than or equal to the number of llooggiiccaall pprroocceessssoorrss
                  ccoonnffiigguurreedd.

                _m_a_c_h_i_n_e:
                  Returns a string containing the Erlang machine name.

                _m_i_n___h_e_a_p___s_i_z_e:
                  Returns _{_m_i_n___h_e_a_p___s_i_z_e_, _M_i_n_H_e_a_p_S_i_z_e_} where _M_i_n_H_e_a_p_S_i_z_e is
                  the current system wide minimum heap size for spawned
                  processes.

                _m_i_n___b_i_n___v_h_e_a_p___s_i_z_e:
                  Returns _{_m_i_n___b_i_n___v_h_e_a_p___s_i_z_e_, _M_i_n_B_i_n_V_H_e_a_p_S_i_z_e_} where
                  _M_i_n_B_i_n_V_H_e_a_p_S_i_z_e is the current system wide minimum binary
                  virtual heap size for spawned processes.

                _m_o_d_i_f_i_e_d___t_i_m_i_n_g___l_e_v_e_l:
                  Returns the modified timing level (an integer) if modified
                  timing has been enabled; otherwise, _u_n_d_e_f_i_n_e_d. See the _+_T
                  command line flag in the documentation of the eerrll((11)) command
                  for more information on modified timing.

                _m_u_l_t_i___s_c_h_e_d_u_l_i_n_g:
                  Returns _d_i_s_a_b_l_e_d, _b_l_o_c_k_e_d, or _e_n_a_b_l_e_d. A description of the
                  return values:

                  _d_i_s_a_b_l_e_d:
                    The emulator has only one scheduler thread. The emulator
                    does not have SMP support, or have been started with only
                    one scheduler thread.

                  _b_l_o_c_k_e_d:
                    The emulator has more than one scheduler thread, but all
                    scheduler threads but one have been blocked, i.e., only
                    one scheduler thread will schedule Erlang processes and
                    execute Erlang code.

                  _e_n_a_b_l_e_d:
                    The emulator has more than one scheduler thread, and no
                    scheduler threads have been blocked, i.e., all available
                    scheduler threads will schedule Erlang processes and
                    execute Erlang code.

                  See also eerrllaanngg::ssyysstteemm__ffllaagg((mmuullttii__sscchheedduulliinngg,, BBlloocckkSSttaattee)),
                  eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg__bblloocckkeerrss)), and
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)).

                _m_u_l_t_i___s_c_h_e_d_u_l_i_n_g___b_l_o_c_k_e_r_s:
                  Returns a list of _P_I_Ds when multi-scheduling is blocked;
                  otherwise, the empty list. The _P_I_Ds in the list is _P_I_Ds of
                  the processes currently blocking multi-scheduling. A _P_I_D
                  will only be present once in the list, even if the
                  corresponding process has blocked multiple times.

                  See also eerrllaanngg::ssyysstteemm__ffllaagg((mmuullttii__sscchheedduulliinngg,, BBlloocckkSSttaattee)),
                  eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg)), and
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)).

                _o_t_p___r_e_l_e_a_s_e:
                  Returns a string containing the OTP release number.

                _p_r_o_c_e_s_s___c_o_u_n_t:
                  Returns the number of processes currently existing at the
                  local node as an integer. The same value as
                  _l_e_n_g_t_h_(_p_r_o_c_e_s_s_e_s_(_)_) returns.

                _p_r_o_c_e_s_s___l_i_m_i_t:
                  Returns the maximum number of concurrently existing
                  processes at the local node as an integer. This limit can be
                  configured at startup by using the command line flag _+_P, see
                  eerrll((11)).

                _p_r_o_c_s:
                  Returns a binary containing a string of process and port
                  information formatted as in Erlang crash dumps. For more
                  information see the ""HHooww ttoo iinntteerrpprreett tthhee EErrllaanngg ccrraasshh
                  dduummppss"" chapter in the ERTS User's Guide.

                _s_c_h_e_d_u_l_e_r___b_i_n_d___t_y_p_e:
                  Returns information on how user has requested schedulers to
                  be bound or not bound.

                  _N_O_T_E_: Even though user has requested schedulers to be bound,
                  they might have silently failed to bind. In order to inspect
                  actual scheduler bindings call
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerr__bbiinnddiinnggss)).

                  For more information, see the _e_r_l ++ssbbtt command line
                  argument, and eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerr__bbiinnddiinnggss)).

                _s_c_h_e_d_u_l_e_r___b_i_n_d_i_n_g_s:
                  Returns information on currently used scheduler bindings.

                  A tuple of a size equal to eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)) is
                  returned. The elements of the tuple are integers or the atom
                  _u_n_b_o_u_n_d. Logical processor identifiers are represented as
                  integers. The _Nth element of the tuple equals the current
                  binding for the scheduler with the scheduler identifier
                  equal to _N. E.g., if the schedulers have been bound,
                  _e_l_e_m_e_n_t_(_e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_s_c_h_e_d_u_l_e_r___i_d_)_,
                  _e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_s_c_h_e_d_u_l_e_r___b_i_n_d_i_n_g_s_)_) will return the
                  identifier of the logical processor that the calling process
                  is executing on.

                  Note that only schedulers online can be bound to logical
                  processors.

                  For more information, see the _e_r_l ++ssbbtt command line
                  argument, eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss__oonnlliinnee)).

                _s_c_h_e_d_u_l_e_r___i_d:
                  Returns the scheduler id (_S_c_h_e_d_u_l_e_r_I_d) of the scheduler
                  thread that the calling process is executing on. _S_c_h_e_d_u_l_e_r_I_d
                  is a positive integer; where _1 _<_= _S_c_h_e_d_u_l_e_r_I_d _<_=
                  _e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_s_c_h_e_d_u_l_e_r_s_). See also
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)).

                _s_c_h_e_d_u_l_e_r_s:
                  Returns the number of scheduler threads used by the
                  emulator. Scheduler threads online schedules Erlang
                  processes and Erlang ports, and execute Erlang code and
                  Erlang linked in driver code.

                  The number of scheduler threads is determined at emulator
                  boot time and cannot be changed after that. The amount of
                  schedulers online can however be changed at any time.

                  See also eerrllaanngg::ssyysstteemm__ffllaagg((sscchheedduulleerrss__oonnlliinnee,,
                  SScchheedduulleerrssOOnnlliinnee)), eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss__oonnlliinnee)),
                  eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerr__iidd)),
                  eerrllaanngg::ssyysstteemm__ffllaagg((mmuullttii__sscchheedduulliinngg,, BBlloocckkSSttaattee)),
                  eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg)), and and
                  eerrllaanngg::ssyysstteemm__iinnffoo((mmuullttii__sscchheedduulliinngg__bblloocckkeerrss)).

                _s_c_h_e_d_u_l_e_r_s___o_n_l_i_n_e:
                  Returns the amount of schedulers online. The scheduler
                  identifiers of schedulers online satisfy the following
                  relationship: _1 _<_= _S_c_h_e_d_u_l_e_r_I_d _<_=
                  _e_r_l_a_n_g_:_s_y_s_t_e_m___i_n_f_o_(_s_c_h_e_d_u_l_e_r_s___o_n_l_i_n_e_).

                  For more information, see eerrllaanngg::ssyysstteemm__iinnffoo((sscchheedduulleerrss)),
                  and eerrllaanngg::ssyysstteemm__ffllaagg((sscchheedduulleerrss__oonnlliinnee,, SScchheedduulleerrssOOnnlliinnee)).

                _s_m_p___s_u_p_p_o_r_t:
                  Returns _t_r_u_e if the emulator has been compiled with smp
                  support; otherwise, _f_a_l_s_e.

                _s_y_s_t_e_m___v_e_r_s_i_o_n:
                  Returns a string containing version number and some
                  important properties such as the number of schedulers.

                _s_y_s_t_e_m___a_r_c_h_i_t_e_c_t_u_r_e:
                  Returns a string containing the processor and OS
                  architecture the emulator is built for.

                _t_h_r_e_a_d_s:
                  Returns _t_r_u_e if the emulator has been compiled with thread
                  support; otherwise, _f_a_l_s_e is returned.

                _t_h_r_e_a_d___p_o_o_l___s_i_z_e:
                  Returns the number of async threads in the async thread pool
                  used for asynchronous driver calls (ddrriivveerr__aassyynncc(())) as an
                  integer.

                _t_r_a_c_e___c_o_n_t_r_o_l___w_o_r_d:
                  Returns the value of the node's trace control word. For more
                  information see documentation of the function _g_e_t___t_c_w in
                  "Match Specifications in Erlang", EERRTTSS UUsseerr''ss GGuuiiddee.

                _u_p_d_a_t_e___c_p_u___i_n_f_o:
                  The runtime system rereads the CPU information available and
                  updates its internally stored information about the ddeetteecctteedd
                  CCPPUU ttooppoollooggyy and the amount of logical processors
                  ccoonnffiigguurreedd, oonnlliinnee, and aavvaaiillaabbllee. If the CPU information
                  has changed since the last time it was read, the atom
                  _c_h_a_n_g_e_d is returned; otherwise, the atom _u_n_c_h_a_n_g_e_d is
                  returned. If the CPU information has changed you probably
                  want to aaddjjuusstt tthhee aammoouunntt ooff sscchheedduulleerrss oonnlliinnee. You
                  typically want to have as many schedulers online as llooggiiccaall
                  pprroocceessssoorrss aavvaaiillaabbllee.

                _v_e_r_s_i_o_n:
                  Returns a string containing the version number of the
                  emulator.

                _w_o_r_d_s_i_z_e:
                  Same as _{_w_o_r_d_s_i_z_e_, _i_n_t_e_r_n_a_l_}_.

                _{_w_o_r_d_s_i_z_e_, _i_n_t_e_r_n_a_l_}:
                  Returns the size of Erlang term words in bytes as an
                  integer, i.e. on a 32-bit architecture 4 is returned, and on
                  a pure 64-bit architecture 8 is returned. On a halfword
                  64-bit emulator, 4 is returned, as the Erlang terms are
                  stored using a virtual wordsize of half the system's
                  wordsize.

                _{_w_o_r_d_s_i_z_e_, _e_x_t_e_r_n_a_l_}:
                  Returns the true wordsize of the emulator, i.e. the size of
                  a pointer, in bytes as an integer. On a pure 32-bit
                  architecture 4 is returned, on both a halfword and pure
                  64-bit architecture, 8 is returned.

          NNoottee::
              The _s_c_h_e_d_u_l_e_r argument has changed name to _s_c_h_e_d_u_l_e_r___i_d. This in
              order to avoid mixup with the _s_c_h_e_d_u_l_e_r_s argument. The _s_c_h_e_d_u_l_e_r
              argument was introduced in ERTS version 5.5 and renamed in ERTS
              version 5.5.1.


       eerrllaanngg::ssyysstteemm__mmoonniittoorr(()) -->> MMoonnSSeettttiinnggss

              Types:

                 MonSettings -> {MonitorPid, Options} | undefined
                  MonitorPid = pid()
                  Options = [Option]
                  Option = {long_gc, Time} | {large_heap, Size} | busy_port |
                 busy_dist_port
                  Time = Size = integer()

              Returns the current system monitoring settings set by
              eerrllaanngg::ssyysstteemm__mmoonniittoorr//22 as _{_M_o_n_i_t_o_r_P_i_d_, _O_p_t_i_o_n_s_}, or _u_n_d_e_f_i_n_e_d
              if there are no settings. The order of the options may be
              different from the one that was set.

       eerrllaanngg::ssyysstteemm__mmoonniittoorr((uunnddeeffiinneedd || {{MMoonniittoorrPPiidd,, OOppttiioonnss}})) -->> MMoonnSSeettttiinnggss

              Types:

                 MonitorPid, Options, MonSettings -- see below

              When called with the argument _u_n_d_e_f_i_n_e_d, all system performance
              monitoring settings are cleared.

              Calling the function with _{_M_o_n_i_t_o_r_P_i_d_, _O_p_t_i_o_n_s_} as argument, is
              the same as calling eerrllaanngg::ssyysstteemm__mmoonniittoorr((MMoonniittoorrPPiidd,, OOppttiioonnss)).

              Returns the previous system monitor settings just like
              eerrllaanngg::ssyysstteemm__mmoonniittoorr//00.

       eerrllaanngg::ssyysstteemm__mmoonniittoorr((MMoonniittoorrPPiidd,, [[OOppttiioonn]])) -->> MMoonnSSeettttiinnggss

              Types:

                 MonitorPid = pid()
                 Option = {long_gc, Time} | {large_heap, Size} | busy_port |
                 busy_dist_port
                  Time = Size = integer()
                 MonSettings = {OldMonitorPid, [Option]}
                  OldMonitorPid = pid()

              Sets system performance monitoring options. _M_o_n_i_t_o_r_P_i_d is a
              local pid that will receive system monitor messages, and the
              second argument is a list of monitoring options:

                _{_l_o_n_g___g_c_, _T_i_m_e_}:
                  If a garbage collection in the system takes at least _T_i_m_e
                  wallclock milliseconds, a message _{_m_o_n_i_t_o_r_, _G_c_P_i_d_, _l_o_n_g___g_c_,
                  _I_n_f_o_} is sent to _M_o_n_i_t_o_r_P_i_d. _G_c_P_i_d is the pid that was
                  garbage collected and _I_n_f_o is a list of two-element tuples
                  describing the result of the garbage collection. One of the
                  tuples is _{_t_i_m_e_o_u_t_, _G_c_T_i_m_e_} where _G_c_T_i_m_e is the actual time
                  for the garbage collection in milliseconds. The other tuples
                  are tagged with _h_e_a_p___s_i_z_e, _h_e_a_p___b_l_o_c_k___s_i_z_e, _s_t_a_c_k___s_i_z_e,
                  _m_b_u_f___s_i_z_e, _o_l_d___h_e_a_p___s_i_z_e, and _o_l_d___h_e_a_p___b_l_o_c_k___s_i_z_e. These
                  tuples are explained in the documentation of the ggcc__ssttaarrtt
                  trace message (see eerrllaanngg::ttrraaccee//33). New tuples may be added,
                  and the order of the tuples in the _I_n_f_o list may be changed
                  at any time without prior notice.

                _{_l_a_r_g_e___h_e_a_p_, _S_i_z_e_}:
                  If a garbage collection in the system results in the
                  allocated size of a heap being at least _S_i_z_e words, a
                  message _{_m_o_n_i_t_o_r_, _G_c_P_i_d_, _l_a_r_g_e___h_e_a_p_, _I_n_f_o_} is sent to
                  _M_o_n_i_t_o_r_P_i_d. _G_c_P_i_d and _I_n_f_o are the same as for _l_o_n_g___g_c
                  above, except that the tuple tagged with _t_i_m_e_o_u_t is not
                  present. _N_o_t_e: As of erts version 5.6 the monitor message is
                  sent if the sum of the sizes of all memory blocks allocated
                  for all heap generations is equal to or larger than _S_i_z_e.
                  Previously the monitor message was sent if the memory block
                  allocated for the youngest generation was equal to or larger
                  than _S_i_z_e.

                _b_u_s_y___p_o_r_t:
                  If a process in the system gets suspended because it sends
                  to a busy port, a message _{_m_o_n_i_t_o_r_, _S_u_s_P_i_d_, _b_u_s_y___p_o_r_t_, _P_o_r_t_}
                  is sent to _M_o_n_i_t_o_r_P_i_d. _S_u_s_P_i_d is the pid that got suspended
                  when sending to _P_o_r_t.

                _b_u_s_y___d_i_s_t___p_o_r_t:
                  If a process in the system gets suspended because it sends
                  to a process on a remote node whose inter-node communication
                  was handled by a busy port, a message _{_m_o_n_i_t_o_r_, _S_u_s_P_i_d_,
                  _b_u_s_y___d_i_s_t___p_o_r_t_, _P_o_r_t_} is sent to _M_o_n_i_t_o_r_P_i_d. _S_u_s_P_i_d is the
                  pid that got suspended when sending through the inter-node
                  communication port _P_o_r_t.

              Returns the previous system monitor settings just like
              eerrllaanngg::ssyysstteemm__mmoonniittoorr//00.

          NNoottee::
              If a monitoring process gets so large that it itself starts to
              cause system monitor messages when garbage collecting, the
              messages will enlarge the process's message queue and probably
              make the problem worse.

              Keep the monitoring process neat and do not set the system
              monitor limits too tight.


              Failure: _b_a_d_a_r_g if _M_o_n_i_t_o_r_P_i_d does not exist.

       eerrllaanngg::ssyysstteemm__pprrooffiillee(()) -->> PPrrooffiilleerrSSeettttiinnggss

              Types:

                 ProfilerSettings -> {ProfilerPid, Options} | undefined
                  ProfilerPid = pid() | port()
                  Options = [Option]
                  Option = runnable_procs | runnable_ports | scheduler |
                 exclusive

              Returns the current system profiling settings set by
              eerrllaanngg::ssyysstteemm__pprrooffiillee//22 as _{_P_r_o_f_i_l_e_r_P_i_d_, _O_p_t_i_o_n_s_}, or _u_n_d_e_f_i_n_e_d
              if there are no settings. The order of the options may be
              different from the one that was set.

       eerrllaanngg::ssyysstteemm__pprrooffiillee((PPrrooffiilleerrPPiidd,, OOppttiioonnss)) -->> PPrrooffiilleerrSSeettttiinnggss

              Types:

                 ProfilerSettings -> {ProfilerPid, Options} | undefined
                  ProfilerPid = pid() | port()
                  Options = [Option]
                  Option = runnable_procs | runnable_ports | scheduler |
                 exclusive

              Sets system profiler options. _P_r_o_f_i_l_e_r_P_i_d is a local pid or port
              that will receive profiling messages. The receiver is excluded
              from all profiling. The second argument is a list of profiling
              options:

                _r_u_n_n_a_b_l_e___p_r_o_c_s:
                  If a process is put into or removed from the run queue a
                  message, _{_p_r_o_f_i_l_e_, _P_i_d_, _S_t_a_t_e_, _M_f_a_, _T_s_}, is sent to
                  _P_r_o_f_i_l_e_r_P_i_d. Running processes that is reinserted into the
                  run queue after having been preemptively scheduled out will
                  not trigger this message.

                _r_u_n_n_a_b_l_e___p_o_r_t_s:
                  If a port is put into or removed from the run queue a
                  message, _{_p_r_o_f_i_l_e_, _P_o_r_t_, _S_t_a_t_e_, _0_, _T_s_}, is sent to
                  _P_r_o_f_i_l_e_r_P_i_d.

                _s_c_h_e_d_u_l_e_r:
                  If a scheduler is put to sleep or awoken a message,
                  _{_p_r_o_f_i_l_e_, _s_c_h_e_d_u_l_e_r_, _I_d_, _S_t_a_t_e_, _N_o_S_c_h_e_d_s_, _T_s_}, is sent to
                  _P_r_o_f_i_l_e_r_P_i_d.

                _e_x_c_l_u_s_i_v_e:
                  If a synchronous call to a port from a process is done, the
                  calling process is considered not runnable during the call
                  runtime to the port. The calling process is notified as
                  _i_n_a_c_t_i_v_e and subsequently _a_c_t_i_v_e when the port callback
                  returns.

          NNoottee::
              _e_r_l_a_n_g_:_s_y_s_t_e_m___p_r_o_f_i_l_e is considered experimental and its
              behaviour may change in the future.


       tteerrmm__ttoo__bbiinnaarryy((TTeerrmm)) -->> eexxtt__bbiinnaarryy(())

              Types:

                 Term = term()

              Returns a binary data object which is the result of encoding
              _T_e_r_m according to the Erlang external term format.

              This can be used for a variety of purposes, for example writing
              a term to a file in an efficient way, or sending an Erlang term
              to some type of communications channel not supported by
              distributed Erlang.

              See also bbiinnaarryy__ttoo__tteerrmm//11.

       tteerrmm__ttoo__bbiinnaarryy((TTeerrmm,, [[OOppttiioonn]])) -->> eexxtt__bbiinnaarryy(())

              Types:

                 Term = term()
                 Option = compressed | {compressed,Level} |
                 {minor_version,Version}

              Returns a binary data object which is the result of encoding
              _T_e_r_m according to the Erlang external term format.

              If the option _c_o_m_p_r_e_s_s_e_d is provided, the external term format
              will be compressed. The compressed format is automatically
              recognized by _b_i_n_a_r_y___t_o___t_e_r_m_/_1 in R7B and later.

              It is also possible to specify a compression level by giving the
              option _{_c_o_m_p_r_e_s_s_e_d_,_L_e_v_e_l_}, where _L_e_v_e_l is an integer from 0
              through 9. _0 means that no compression will be done (it is the
              same as not giving any _c_o_m_p_r_e_s_s_e_d option); _1 will take the least
              time but may not compress as well as the higher levels; _9 will
              take the most time and may produce a smaller result. Note the
              "mays" in the preceding sentence; depending on the input term,
              level 9 compression may or may not produce a smaller result than
              level 1 compression.

              Currently, _c_o_m_p_r_e_s_s_e_d gives the same result as _{_c_o_m_p_r_e_s_s_e_d_,_6_}.

              The option _{_m_i_n_o_r___v_e_r_s_i_o_n_,_V_e_r_s_i_o_n_} can be use to control some
              details of the encoding. This option was introduced in R11B-4.
              Currently, the allowed values for _V_e_r_s_i_o_n are _0 and _1.

              _{_m_i_n_o_r___v_e_r_s_i_o_n_,_1_} forces any floats in the term to be encoded in
              a more space-efficient and exact way (namely in the 64-bit IEEE
              format, rather than converted to a textual representation).
              _b_i_n_a_r_y___t_o___t_e_r_m_/_1 in R11B-4 and later is able decode the new
              representation.

              _{_m_i_n_o_r___v_e_r_s_i_o_n_,_0_} is currently the default, meaning that floats
              will be encoded using a textual representation; this option is
              useful if you want to ensure that releases prior to R11B-4 can
              decode resulting binary.

              See also bbiinnaarryy__ttoo__tteerrmm//11.

       tthhrrooww((AAnnyy))

              Types:

                 Any = term()

              A non-local return from a function. If evaluated within a _c_a_t_c_h,
              _c_a_t_c_h will return the value _A_n_y.

              > catch throw({hello, there}).
              {hello,there}

              Failure: _n_o_c_a_t_c_h if not evaluated within a catch.

       ttiimmee(()) -->> {{HHoouurr,, MMiinnuuttee,, SSeeccoonndd}}

              Types:

                 Hour = Minute = Second = integer() >= 0

              Returns the current time as _{_H_o_u_r_, _M_i_n_u_t_e_, _S_e_c_o_n_d_}.

              The time zone and daylight saving time correction depend on the
              underlying OS.

              > time().
              {9,42,44}

       ttll((LLiisstt11)) -->> LLiisstt22

              Types:

                 List1 = List2 = [term()]

              Returns the tail of _L_i_s_t_1, that is, the list minus the first
              element.

              > tl([geesties, guilies, beasties]).
              [guilies, beasties]

              Allowed in guard tests.

              Failure: _b_a_d_a_r_g if _L_i_s_t is the empty list [].

       eerrllaanngg::ttrraaccee((PPiiddSSppeecc,, HHooww,, FFllaaggLLiisstt)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 PidSpec = pid() | existing | new | all
                 How = boolean()
                 FlagList = [Flag]
                  Flag -- see below

              Turns on (if _H_o_w _=_= _t_r_u_e) or off (if _H_o_w _=_= _f_a_l_s_e) the trace
              flags in _F_l_a_g_L_i_s_t for the process or processes represented by
              _P_i_d_S_p_e_c.

              _P_i_d_S_p_e_c is either a pid for a local process, or one of the
              following atoms:

                _e_x_i_s_t_i_n_g:
                  All processes currently existing.

                _n_e_w:
                  All processes that will be created in the future.

                _a_l_l:
                  All currently existing processes and all processes that will
                  be created in the future.

              _F_l_a_g_L_i_s_t can contain any number of the following flags (the
              "message tags" refers to the list of messages following below):

                _a_l_l:
                  Set all trace flags except _{_t_r_a_c_e_r_, _T_r_a_c_e_r_} and
                  _c_p_u___t_i_m_e_s_t_a_m_p that are in their nature different than the
                  others.

                _s_e_n_d:
                  Trace sending of messages.

                  Message tags: _s_e_n_d, _s_e_n_d___t_o___n_o_n___e_x_i_s_t_i_n_g___p_r_o_c_e_s_s.

                _'_r_e_c_e_i_v_e_':
                  Trace receiving of messages.

                  Message tags: _'_r_e_c_e_i_v_e_'.

                _p_r_o_c_s:
                  Trace process related events.

                  Message tags: _s_p_a_w_n, _e_x_i_t, _r_e_g_i_s_t_e_r, _u_n_r_e_g_i_s_t_e_r, _l_i_n_k,
                  _u_n_l_i_n_k, _g_e_t_t_i_n_g___l_i_n_k_e_d, _g_e_t_t_i_n_g___u_n_l_i_n_k_e_d.

                _c_a_l_l:
                  Trace certain function calls. Specify which function calls
                  to trace by calling eerrllaanngg::ttrraaccee__ppaatttteerrnn//33.

                  Message tags: _c_a_l_l, _r_e_t_u_r_n___f_r_o_m.

                _s_i_l_e_n_t:
                  Used in conjunction with the _c_a_l_l trace flag. The _c_a_l_l,
                  _r_e_t_u_r_n___f_r_o_m and _r_e_t_u_r_n___t_o trace messages are inhibited if
                  this flag is set, but if there are match specs they are
                  executed as normal.

                  Silent mode is inhibited by executing _e_r_l_a_n_g_:_t_r_a_c_e_(___, _f_a_l_s_e_,
                  _[_s_i_l_e_n_t_|___]_), or by a match spec executing the _{_s_i_l_e_n_t_,
                  _f_a_l_s_e_} function.

                  The _s_i_l_e_n_t trace flag facilitates setting up a trace on many
                  or even all processes in the system. Then the interesting
                  trace can be activated and deactivated using the
                  _{_s_i_l_e_n_t_,_B_o_o_l_} match spec function, giving a high degree of
                  control of which functions with which arguments that
                  triggers the trace.

                  Message tags: _c_a_l_l, _r_e_t_u_r_n___f_r_o_m, _r_e_t_u_r_n___t_o. Or rather, the
                  absence of.

                _r_e_t_u_r_n___t_o:
                  Used in conjunction with the _c_a_l_l trace flag. Trace the
                  actual return from a traced function back to its caller.
                  Only works for functions traced with the _l_o_c_a_l option to
                  eerrllaanngg::ttrraaccee__ppaatttteerrnn//33.

                  The semantics is that a trace message is sent when a call
                  traced function actually returns, that is, when a chain of
                  tail recursive calls is ended. There will be only one trace
                  message sent per chain of tail recursive calls, why the
                  properties of tail recursiveness for function calls are kept
                  while tracing with this flag. Using _c_a_l_l and _r_e_t_u_r_n___t_o trace
                  together makes it possible to know exactly in which function
                  a process executes at any time.

                  To get trace messages containing return values from
                  functions, use the _{_r_e_t_u_r_n___t_r_a_c_e_} match_spec action instead.

                  Message tags: _r_e_t_u_r_n___t_o.

                _r_u_n_n_i_n_g:
                  Trace scheduling of processes.

                  Message tags: _i_n, and _o_u_t.

                _e_x_i_t_i_n_g:
                  Trace scheduling of an exiting processes.

                  Message tags: _i_n___e_x_i_t_i_n_g, _o_u_t___e_x_i_t_i_n_g, and _o_u_t___e_x_i_t_e_d.

                _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n:
                  Trace garbage collections of processes.

                  Message tags: _g_c___s_t_a_r_t, _g_c___e_n_d.

                _t_i_m_e_s_t_a_m_p:
                  Include a time stamp in all trace messages. The time stamp
                  (Ts) is of the same form as returned by _e_r_l_a_n_g_:_n_o_w_(_).

                _c_p_u___t_i_m_e_s_t_a_m_p:
                  A global trace flag for the Erlang node that makes all trace
                  timestamps be in CPU time, not wallclock. It is only allowed
                  with _P_i_d_S_p_e_c_=_=_a_l_l. If the host machine operating system does
                  not support high resolution CPU time measurements, _t_r_a_c_e_/_3
                  exits with _b_a_d_a_r_g.

                _a_r_i_t_y:
                  Used in conjunction with the _c_a_l_l trace flag. _{_M_, _F_, _A_r_i_t_y_}
                  will be specified instead of _{_M_, _F_, _A_r_g_s_} in call trace
                  messages.

                _s_e_t___o_n___s_p_a_w_n:
                  Makes any process created by a traced process inherit its
                  trace flags, including the _s_e_t___o_n___s_p_a_w_n flag.

                _s_e_t___o_n___f_i_r_s_t___s_p_a_w_n:
                  Makes the first process created by a traced process inherit
                  its trace flags, excluding the _s_e_t___o_n___f_i_r_s_t___s_p_a_w_n flag.

                _s_e_t___o_n___l_i_n_k:
                  Makes any process linked by a traced process inherit its
                  trace flags, including the _s_e_t___o_n___l_i_n_k flag.

                _s_e_t___o_n___f_i_r_s_t___l_i_n_k:
                  Makes the first process linked to by a traced process
                  inherit its trace flags, excluding the _s_e_t___o_n___f_i_r_s_t___l_i_n_k
                  flag.

                _{_t_r_a_c_e_r_, _T_r_a_c_e_r_}:
                  Specify where to send the trace messages. _T_r_a_c_e_r must be the
                  pid of a local process or the port identifier of a local
                  port. If this flag is not given, trace messages will be sent
                  to the process that called _e_r_l_a_n_g_:_t_r_a_c_e_/_3.

              The effect of combining _s_e_t___o_n___f_i_r_s_t___l_i_n_k with _s_e_t___o_n___l_i_n_k is
              the same as having _s_e_t___o_n___f_i_r_s_t___l_i_n_k alone. Likewise for
              _s_e_t___o_n___s_p_a_w_n and _s_e_t___o_n___f_i_r_s_t___s_p_a_w_n.

              If the _t_i_m_e_s_t_a_m_p flag is not given, the tracing process will
              receive the trace messages described below. _P_i_d is the pid of
              the traced process in which the traced event has occurred. The
              third element of the tuple is the message tag.

              If the _t_i_m_e_s_t_a_m_p flag is given, the first element of the tuple
              will be _t_r_a_c_e___t_s instead and the timestamp is added last in the
              tuple.

                _{_t_r_a_c_e_, _P_i_d_, _'_r_e_c_e_i_v_e_'_, _M_s_g_}:
                  When _P_i_d receives the message _M_s_g.

                _{_t_r_a_c_e_, _P_i_d_, _s_e_n_d_, _M_s_g_, _T_o_}:
                  When _P_i_d sends the message _M_s_g to the process _T_o.

                _{_t_r_a_c_e_, _P_i_d_, _s_e_n_d___t_o___n_o_n___e_x_i_s_t_i_n_g___p_r_o_c_e_s_s_, _M_s_g_, _T_o_}:
                  When _P_i_d sends the message _M_s_g to the non-existing process
                  _T_o.

                _{_t_r_a_c_e_, _P_i_d_, _c_a_l_l_, _{_M_, _F_, _A_r_g_s_}_}:
                  When _P_i_d calls a traced function. The return values of calls
                  are never supplied, only the call and its arguments.

                  Note that the trace flag _a_r_i_t_y can be used to change the
                  contents of this message, so that _A_r_i_t_y is specified instead
                  of _A_r_g_s.

                _{_t_r_a_c_e_, _P_i_d_, _r_e_t_u_r_n___t_o_, _{_M_, _F_, _A_r_i_t_y_}_}:
                  When _P_i_d returns _t_o the specified function. This trace
                  message is sent if both the _c_a_l_l and the _r_e_t_u_r_n___t_o flags are
                  set, and the function is set to be traced on _l_o_c_a_l function
                  calls. The message is only sent when returning from a chain
                  of tail recursive function calls where at least one call
                  generated a _c_a_l_l trace message (that is, the functions match
                  specification matched and _{_m_e_s_s_a_g_e_, _f_a_l_s_e_} was not an
                  action).

                _{_t_r_a_c_e_, _P_i_d_, _r_e_t_u_r_n___f_r_o_m_, _{_M_, _F_, _A_r_i_t_y_}_, _R_e_t_u_r_n_V_a_l_u_e_}:
                  When _P_i_d returns _f_r_o_m the specified function. This trace
                  message is sent if the _c_a_l_l flag is set, and the function
                  has a match specification with a _r_e_t_u_r_n___t_r_a_c_e or
                  _e_x_c_e_p_t_i_o_n___t_r_a_c_e action.

                _{_t_r_a_c_e_, _P_i_d_, _e_x_c_e_p_t_i_o_n___f_r_o_m_, _{_M_, _F_, _A_r_i_t_y_}_, _{_C_l_a_s_s_, _V_a_l_u_e_}_}:
                  When _P_i_d exits _f_r_o_m the specified function due to an
                  exception. This trace message is sent if the _c_a_l_l flag is
                  set, and the function has a match specification with an
                  _e_x_c_e_p_t_i_o_n___t_r_a_c_e action.

                _{_t_r_a_c_e_, _P_i_d_, _s_p_a_w_n_, _P_i_d_2_, _{_M_, _F_, _A_r_g_s_}_}:
                  When _P_i_d spawns a new process _P_i_d_2 with the specified
                  function call as entry point.

                  Note that _A_r_g_s is supposed to be the argument list, but may
                  be any term in the case of an erroneous spawn.

                _{_t_r_a_c_e_, _P_i_d_, _e_x_i_t_, _R_e_a_s_o_n_}:
                  When _P_i_d exits with reason _R_e_a_s_o_n.

                _{_t_r_a_c_e_, _P_i_d_, _l_i_n_k_, _P_i_d_2_}:
                  When _P_i_d links to a process _P_i_d_2.

                _{_t_r_a_c_e_, _P_i_d_, _u_n_l_i_n_k_, _P_i_d_2_}:
                  When _P_i_d removes the link from a process _P_i_d_2.

                _{_t_r_a_c_e_, _P_i_d_, _g_e_t_t_i_n_g___l_i_n_k_e_d_, _P_i_d_2_}:
                  When _P_i_d gets linked to a process _P_i_d_2.

                _{_t_r_a_c_e_, _P_i_d_, _g_e_t_t_i_n_g___u_n_l_i_n_k_e_d_, _P_i_d_2_}:
                  When _P_i_d gets unlinked from a process _P_i_d_2.

                _{_t_r_a_c_e_, _P_i_d_, _r_e_g_i_s_t_e_r_, _R_e_g_N_a_m_e_}:
                  When _P_i_d gets the name _R_e_g_N_a_m_e registered.

                _{_t_r_a_c_e_, _P_i_d_, _u_n_r_e_g_i_s_t_e_r_, _R_e_g_N_a_m_e_}:
                  When _P_i_d gets the name _R_e_g_N_a_m_e unregistered. Note that this
                  is done automatically when a registered process exits.

                _{_t_r_a_c_e_, _P_i_d_, _i_n_, _{_M_, _F_, _A_r_i_t_y_} _| _0_}:
                  When _P_i_d is scheduled to run. The process will run in
                  function _{_M_, _F_, _A_r_i_t_y_}. On some rare occasions the current
                  function cannot be determined, then the last element _A_r_i_t_y
                  is 0.

                _{_t_r_a_c_e_, _P_i_d_, _o_u_t_, _{_M_, _F_, _A_r_i_t_y_} _| _0_}:
                  When _P_i_d is scheduled out. The process was running in
                  function {M, F, Arity}. On some rare occasions the current
                  function cannot be determined, then the last element _A_r_i_t_y
                  is 0.

                _{_t_r_a_c_e_, _P_i_d_, _g_c___s_t_a_r_t_, _I_n_f_o_}:
                  Sent when garbage collection is about to be started. _I_n_f_o is
                  a list of two-element tuples, where the first element is a
                  key, and the second is the value. You should not depend on
                  the tuples have any defined order. Currently, the following
                  keys are defined:

                  _h_e_a_p___s_i_z_e:
                    The size of the used part of the heap.

                  _h_e_a_p___b_l_o_c_k___s_i_z_e:
                    The size of the memory block used for storing the heap and
                    the stack.

                  _o_l_d___h_e_a_p___s_i_z_e:
                    The size of the used part of the old heap.

                  _o_l_d___h_e_a_p___b_l_o_c_k___s_i_z_e:
                    The size of the memory block used for storing the old
                    heap.

                  _s_t_a_c_k___s_i_z_e:
                    The actual size of the stack.

                  _r_e_c_e_n_t___s_i_z_e:
                    The size of the data that survived the previous garbage
                    collection.

                  _m_b_u_f___s_i_z_e:
                    The combined size of message buffers associated with the
                    process.

                  _b_i_n___v_h_e_a_p___s_i_z_e:
                    The total size of unique off-heap binaries referenced from
                    the process heap.

                  _b_i_n___v_h_e_a_p___b_l_o_c_k___s_i_z_e:
                    The total size of binaries, in words, allowed in the
                    virtual heap in the process before doing a garbage
                    collection.

                  _b_i_n___o_l_d___v_h_e_a_p___s_i_z_e:
                    The total size of unique off-heap binaries referenced from
                    the process old heap.

                  _b_i_n___v_h_e_a_p___b_l_o_c_k___s_i_z_e:
                    The total size of binaries, in words, allowed in the
                    virtual old heap in the process before doing a garbage
                    collection.

                  All sizes are in words.

                _{_t_r_a_c_e_, _P_i_d_, _g_c___e_n_d_, _I_n_f_o_}:
                  Sent when garbage collection is finished. _I_n_f_o contains the
                  same kind of list as in the _g_c___s_t_a_r_t message, but the sizes
                  reflect the new sizes after garbage collection.

              If the tracing process dies, the flags will be silently removed.

              Only one process can trace a particular process. For this
              reason, attempts to trace an already traced process will fail.

              Returns: A number indicating the number of processes that
              matched _P_i_d_S_p_e_c. If _P_i_d_S_p_e_c is a pid, the return value will be
              _1. If _P_i_d_S_p_e_c is _a_l_l or _e_x_i_s_t_i_n_g the return value will be the
              number of processes running, excluding tracer processes. If
              _P_i_d_S_p_e_c is _n_e_w, the return value will be _0.

              Failure: If specified arguments are not supported. For example
              _c_p_u___t_i_m_e_s_t_a_m_p is not supported on all platforms.

       eerrllaanngg::ttrraaccee__ddeelliivveerreedd((TTrraacceeee)) -->> RReeff

              Types:

                 Tracee = pid() | all
                 Ref = reference()

              The delivery of trace messages is dislocated on the time-line
              compared to other events in the system. If you know that the
              _T_r_a_c_e_e has passed some specific point in its execution, and you
              want to know when at least all trace messages corresponding to
              events up to this point have reached the tracer you can use
              _e_r_l_a_n_g_:_t_r_a_c_e___d_e_l_i_v_e_r_e_d_(_T_r_a_c_e_e_). A _{_t_r_a_c_e___d_e_l_i_v_e_r_e_d_, _T_r_a_c_e_e_, _R_e_f_}
              message is sent to the caller of _e_r_l_a_n_g_:_t_r_a_c_e___d_e_l_i_v_e_r_e_d_(_T_r_a_c_e_e_)
              when it is guaranteed that all trace messages have been
              delivered to the tracer up to the point that the _T_r_a_c_e_e had
              reached at the time of the call to
              _e_r_l_a_n_g_:_t_r_a_c_e___d_e_l_i_v_e_r_e_d_(_T_r_a_c_e_e_).

              Note that the _t_r_a_c_e___d_e_l_i_v_e_r_e_d message does _n_o_t imply that trace
              messages have been delivered; instead, it implies that all trace
              messages that _s_h_o_u_l_d be delivered have been delivered. It is not
              an error if _T_r_a_c_e_e isn't, and hasn't been traced by someone, but
              if this is the case, _n_o trace messages will have been delivered
              when the _t_r_a_c_e___d_e_l_i_v_e_r_e_d message arrives.

              Note that _T_r_a_c_e_e has to refer to a process currently, or
              previously existing on the same node as the caller of
              _e_r_l_a_n_g_:_t_r_a_c_e___d_e_l_i_v_e_r_e_d_(_T_r_a_c_e_e_) resides on. The special _T_r_a_c_e_e
              atom _a_l_l denotes all processes that currently are traced in the
              node.

              An example: Process _A is tracee, port _B is tracer, and process _C
              is the port owner of _B. _C wants to close _B when _A exits. _C can
              ensure that the trace isn't truncated by calling
              _e_r_l_a_n_g_:_t_r_a_c_e___d_e_l_i_v_e_r_e_d_(_A_) when _A exits and wait for the
              _{_t_r_a_c_e___d_e_l_i_v_e_r_e_d_, _A_, _R_e_f_} message before closing _B.

              Failure: _b_a_d_a_r_g if _T_r_a_c_e_e does not refer to a process (dead or
              alive) on the same node as the caller of
              _e_r_l_a_n_g_:_t_r_a_c_e___d_e_l_i_v_e_r_e_d_(_T_r_a_c_e_e_) resides on.

       eerrllaanngg::ttrraaccee__iinnffoo((PPiiddOOrrFFuunncc,, IItteemm)) -->> RReess

              Types:

                 PidOrFunc = pid() | new | {Module, Function, Arity} | on_load
                  Module = Function = atom()
                  Arity = arity()
                 Item, Res -- see below

              Returns trace information about a process or function.

              To get information about a process, _P_i_d_O_r_F_u_n_c should be a pid or
              the atom _n_e_w. The atom _n_e_w means that the default trace state
              for processes to be created will be returned. _I_t_e_m must have one
              of the following values:

                _f_l_a_g_s:
                  Return a list of atoms indicating what kind of traces is
                  enabled for the process. The list will be empty if no traces
                  are enabled, and one or more of the followings atoms if
                  traces are enabled: _s_e_n_d, _'_r_e_c_e_i_v_e_', _s_e_t___o_n___s_p_a_w_n, _c_a_l_l,
                  _r_e_t_u_r_n___t_o, _p_r_o_c_s, _s_e_t___o_n___f_i_r_s_t___s_p_a_w_n, _s_e_t___o_n___l_i_n_k, _r_u_n_n_i_n_g,
                  _g_a_r_b_a_g_e___c_o_l_l_e_c_t_i_o_n, _t_i_m_e_s_t_a_m_p, and _a_r_i_t_y. The order is
                  arbitrary.

                _t_r_a_c_e_r:
                  Return the identifier for process or port tracing this
                  process. If this process is not being traced, the return
                  value will be _[_].

              To get information about a function, _P_i_d_O_r_F_u_n_c should be a
              three-element tuple: _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_i_t_y_} or the atom
              _o_n___l_o_a_d. No wildcards are allowed. Returns _u_n_d_e_f_i_n_e_d if the
              function does not exist or _f_a_l_s_e if the function is not traced
              at all. _I_t_e_m must have one of the following values:

                _t_r_a_c_e_d:
                  Return _g_l_o_b_a_l if this function is traced on global function
                  calls, _l_o_c_a_l if this function is traced on local function
                  calls (i.e local and global function calls), and _f_a_l_s_e if
                  neither local nor global function calls are traced.

                _m_a_t_c_h___s_p_e_c:
                  Return the match specification for this function, if it has
                  one. If the function is locally or globally traced but has
                  no match specification defined, the returned value is _[_].

                _m_e_t_a:
                  Return the meta trace tracer process or port for this
                  function, if it has one. If the function is not meta traced
                  the returned value is _f_a_l_s_e, and if the function is meta
                  traced but has once detected that the tracer proc is
                  invalid, the returned value is [].

                _m_e_t_a___m_a_t_c_h___s_p_e_c:
                  Return the meta trace match specification for this function,
                  if it has one. If the function is meta traced but has no
                  match specification defined, the returned value is _[_].

                _c_a_l_l___c_o_u_n_t:
                  Return the call count value for this function or _t_r_u_e for
                  the pseudo function _o_n___l_o_a_d if call count tracing is active.
                  Return _f_a_l_s_e otherwise. See also eerrllaanngg::ttrraaccee__ppaatttteerrnn//33.

                _c_a_l_l___t_i_m_e:
                  Return the call time values for this function or _t_r_u_e for
                  the pseudo function _o_n___l_o_a_d if call time tracing is active.
                  Returns _f_a_l_s_e otherwise. The call time values returned,
                  _[_{_P_i_d_, _C_o_u_n_t_, _S_, _U_s_}_], is a list of each process that has
                  executed the function and its specific counters. See also
                  eerrllaanngg::ttrraaccee__ppaatttteerrnn//33.

                _a_l_l:
                  Return a list containing the _{_I_t_e_m_, _V_a_l_u_e_} tuples for all
                  other items, or return _f_a_l_s_e if no tracing is active for
                  this function.

              The actual return value will be _{_I_t_e_m_, _V_a_l_u_e_}, where _V_a_l_u_e is
              the requested information as described above. If a pid for a
              dead process was given, or the name of a non-existing function,
              _V_a_l_u_e will be _u_n_d_e_f_i_n_e_d.

              If _P_i_d_O_r_F_u_n_c is the _o_n___l_o_a_d, the information returned refers to
              the default value for code that will be loaded.

       eerrllaanngg::ttrraaccee__ppaatttteerrnn((MMFFAA,, MMaattcchhSSppeecc)) -->> iinntteeggeerr(()) >>== 00

              The same as eerrllaanngg::ttrraaccee__ppaatttteerrnn((MMFFAA,, MMaattcchhSSppeecc,, [[]])), retained
              for backward compatibility.

       eerrllaanngg::ttrraaccee__ppaatttteerrnn((MMFFAA,, MMaattcchhSSppeecc,, FFllaaggLLiisstt)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 MFA, MatchSpec, FlagList -- see below

              This BIF is used to enable or disable call tracing for exported
              functions. It must be combined with eerrllaanngg::ttrraaccee//33 to set the
              _c_a_l_l trace flag for one or more processes.

              Conceptually, call tracing works like this: Inside the Erlang
              virtual machine there is a set of processes to be traced and a
              set of functions to be traced. Tracing will be enabled on the
              intersection of the set. That is, if a process included in the
              traced process set calls a function included in the traced
              function set, the trace action will be taken. Otherwise, nothing
              will happen.

              Use eerrllaanngg::ttrraaccee//33 to add or remove one or more processes to the
              set of traced processes. Use _e_r_l_a_n_g_:_t_r_a_c_e___p_a_t_t_e_r_n_/_2 to add or
              remove exported functions to the set of traced functions.

              The _e_r_l_a_n_g_:_t_r_a_c_e___p_a_t_t_e_r_n_/_3 BIF can also add match specifications
              to an exported function. A match specification comprises a
              pattern that the arguments to the function must match, a guard
              expression which must evaluate to _t_r_u_e and an action to be
              performed. The default action is to send a trace message. If the
              pattern does not match or the guard fails, the action will not
              be executed.

              The _M_F_A argument should be a tuple like _{_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_,
              _A_r_i_t_y_} or the atom _o_n___l_o_a_d (described below). It can be the
              module, function, and arity for an exported function (or a BIF
              in any module). The _'___' atom can be used to mean any of that
              kind. Wildcards can be used in any of the following ways:

                _{_M_o_d_u_l_e_,_F_u_n_c_t_i_o_n_,_'___'_}:
                  All exported functions of any arity named _F_u_n_c_t_i_o_n in module
                  _M_o_d_u_l_e.

                _{_M_o_d_u_l_e_,_'___'_,_'___'_}:
                  All exported functions in module _M_o_d_u_l_e.

                _{_'___'_,_'___'_,_'___'_}:
                  All exported functions in all loaded modules.

              Other combinations, such as _{_M_o_d_u_l_e_,_'___'_,_A_r_i_t_y_}, are not allowed.
              Local functions will match wildcards only if the _l_o_c_a_l option is
              in the _F_l_a_g_L_i_s_t.

              If the _M_F_A argument is the atom _o_n___l_o_a_d, the match specification
              and flag list will be used on all modules that are newly loaded.

              The _M_a_t_c_h_S_p_e_c argument can take any of the following forms:

                _f_a_l_s_e:
                  Disable tracing for the matching function(s). Any match
                  specification will be removed.

                _t_r_u_e:
                  Enable tracing for the matching function(s).

                _M_a_t_c_h_S_p_e_c_L_i_s_t:
                  A list of match specifications. An empty list is equivalent
                  to _t_r_u_e. See the ERTS User's Guide for a description of
                  match specifications.

                _r_e_s_t_a_r_t:
                  For the _F_l_a_g_L_i_s_t option _c_a_l_l___c_o_u_n_t and _c_a_l_l___t_i_m_e: restart
                  the existing counters. The behaviour is undefined for other
                  _F_l_a_g_L_i_s_t options.

                _p_a_u_s_e:
                  For the _F_l_a_g_L_i_s_t option _c_a_l_l___c_o_u_n_t and _c_a_l_l___t_i_m_e: pause the
                  existing counters. The behaviour is undefined for other
                  _F_l_a_g_L_i_s_t options.

              The _F_l_a_g_L_i_s_t parameter is a list of options. The following
              options are allowed:

                _g_l_o_b_a_l:
                  Turn on or off call tracing for global function calls (that
                  is, calls specifying the module explicitly). Only exported
                  functions will match and only global calls will generate
                  trace messages. This is the default.

                _l_o_c_a_l:
                  Turn on or off call tracing for all types of function calls.
                  Trace messages will be sent whenever any of the specified
                  functions are called, regardless of how they are called. If
                  the _r_e_t_u_r_n___t_o flag is set for the process, a _r_e_t_u_r_n___t_o
                  message will also be sent when this function returns to its
                  caller.

                _m_e_t_a _| _{_m_e_t_a_, _P_i_d_}:
                  Turn on or off meta tracing for all types of function calls.
                  Trace messages will be sent to the tracer process or port
                  _P_i_d whenever any of the specified functions are called,
                  regardless of how they are called. If no _P_i_d is specified,
                  _s_e_l_f_(_) is used as a default tracer process.

                  Meta tracing traces all processes and does not care about
                  the process trace flags set by _t_r_a_c_e_/_3, the trace flags are
                  instead fixed to _[_c_a_l_l_, _t_i_m_e_s_t_a_m_p_].

                  The match spec function _{_r_e_t_u_r_n___t_r_a_c_e_} works with meta trace
                  and send its trace message to the same tracer process.

                _c_a_l_l___c_o_u_n_t:
                  Starts (_M_a_t_c_h_S_p_e_c _=_= _t_r_u_e) or stops (_M_a_t_c_h_S_p_e_c _=_= _f_a_l_s_e)
                  call count tracing for all types of function calls. For
                  every function a counter is incremented when the function is
                  called, in any process. No process trace flags need to be
                  activated.

                  If call count tracing is started while already running, the
                  count is restarted from zero. Running counters can be paused
                  with _M_a_t_c_h_S_p_e_c _=_= _p_a_u_s_e. Paused and running counters can be
                  restarted from zero with _M_a_t_c_h_S_p_e_c _=_= _r_e_s_t_a_r_t.

                  The counter value can be read with eerrllaanngg::ttrraaccee__iinnffoo//22.

                _c_a_l_l___t_i_m_e:
                  Starts (_M_a_t_c_h_S_p_e_c _=_= _t_r_u_e) or stops (_M_a_t_c_h_S_p_e_c _=_= _f_a_l_s_e)
                  call time tracing for all types of function calls. For every
                  function a counter is incremented when the function is
                  called. Time spent in the function is accumulated in two
                  other counters, seconds and micro-seconds. The counters are
                  stored for each call traced process.

                  If call time tracing is started while already running, the
                  count and time is restarted from zero. Running counters can
                  be paused with _M_a_t_c_h_S_p_e_c _=_= _p_a_u_s_e. Paused and running
                  counters can be restarted from zero with _M_a_t_c_h_S_p_e_c _=_=
                  _r_e_s_t_a_r_t.

                  The counter value can be read with eerrllaanngg::ttrraaccee__iinnffoo//22.

              The _g_l_o_b_a_l and _l_o_c_a_l options are mutually exclusive and _g_l_o_b_a_l
              is the default (if no options are specified). The _c_a_l_l___c_o_u_n_t and
              _m_e_t_a options perform a kind of local tracing, and can also not
              be combined with _g_l_o_b_a_l. A function can be either globally or
              locally traced. If global tracing is specified for a specified
              set of functions; local, meta, call time and call count tracing
              for the matching set of local functions will be disabled, and
              vice versa.

              When disabling trace, the option must match the type of trace
              that is set on the function, so that local tracing must be
              disabled with the _l_o_c_a_l option and global tracing with the
              _g_l_o_b_a_l option (or no option at all), and so forth.

              There is no way to directly change part of a match specification
              list. If a function has a match specification, you can replace
              it with a completely new one. If you need to change an existing
              match specification, use the eerrllaanngg::ttrraaccee__iinnffoo//22 BIF to retrieve
              the existing match specification.

              Returns the number of exported functions that matched the _M_F_A
              argument. This will be zero if none matched at all.

       ttrruunncc((NNuummbbeerr)) -->> iinntteeggeerr(())

              Types:

                 Number = number()

              Returns an integer by the truncating _N_u_m_b_e_r.

              > trunc(5.5).
              5

              Allowed in guard tests.

       ttuuppllee__ssiizzee((TTuuppllee)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 Tuple = tuple()

              Returns an integer which is the number of elements in _T_u_p_l_e.

              > tuple_size({morni, mulle, bwange}).
              3

              Allowed in guard tests.

       ttuuppllee__ttoo__lliisstt((TTuuppllee)) -->> [[tteerrmm(())]]

              Types:

                 Tuple = tuple()

              Returns a list which corresponds to _T_u_p_l_e. _T_u_p_l_e may contain any
              Erlang terms.

              > tuple_to_list({share, {'Ericsson_B', 163}}).
              [share,{'Ericsson_B',163}]

       eerrllaanngg::uunniivveerrssaallttiimmee(()) -->> DDaatteeTTiimmee

              Types:

                 DateTime = ccaalleennddaarr::ddaatteettiimmee(())

              Returns the current date and time according to Universal Time
              Coordinated (UTC), also called GMT, in the form _{_{_Y_e_a_r_, _M_o_n_t_h_,
              _D_a_y_}_, _{_H_o_u_r_, _M_i_n_u_t_e_, _S_e_c_o_n_d_}_} if supported by the underlying
              operating system. If not, _e_r_l_a_n_g_:_u_n_i_v_e_r_s_a_l_t_i_m_e_(_) is equivalent
              to _e_r_l_a_n_g_:_l_o_c_a_l_t_i_m_e_(_).

              > erlang:universaltime().
              {{1996,11,6},{14,18,43}}

       eerrllaanngg::uunniivveerrssaallttiimmee__ttoo__llooccaallttiimmee(({{DDaattee11,, TTiimmee11}})) -->> {{DDaattee22,, TTiimmee22}}

              Types:

                 Date1 = Date2 = ccaalleennddaarr::ddaattee(())
                 Time1 = Time2 = ccaalleennddaarr::ttiimmee(())

              Converts Universal Time Coordinated (UTC) date and time to local
              date and time, if this is supported by the underlying OS.
              Otherwise, no conversion is done, and _{_D_a_t_e_1_, _T_i_m_e_1_} is
              returned.

              > erlang:universaltime_to_localtime({{1996,11,6},{14,18,43}}).
              {{1996,11,7},{15,18,43}}

              Failure: _b_a_d_a_r_g if _D_a_t_e_1 or _T_i_m_e_1 do not denote a valid date or
              time.

       uunnlliinnkk((IIdd)) -->> ttrruuee

              Types:

                 Id = pid() | port()

              Removes the link, if there is one, between the calling process
              and the process or port referred to by _I_d.

              Returns _t_r_u_e and does not fail, even if there is no link to _I_d,
              or if _I_d does not exist.

              Once _u_n_l_i_n_k_(_I_d_) has returned it is guaranteed that the link
              between the caller and the entity referred to by _I_d has no
              effect on the caller in the future (unless the link is setup
              again). If caller is trapping exits, an _{_'_E_X_I_T_'_, _I_d_, ___} message
              due to the link might have been placed in the caller's message
              queue prior to the call, though. Note, the _{_'_E_X_I_T_'_, _I_d_, ___}
              message can be the result of the link, but can also be the
              result of _I_d calling _e_x_i_t_/_2. Therefore, it _m_a_y be appropriate to
              cleanup the message queue when trapping exits after the call to
              _u_n_l_i_n_k_(_I_d_), as follow:

                  unlink(Id),
                  receive
                      {'EXIT', Id, _} ->
                          true
                  after 0 ->
                          true
                  end

          NNoottee::
              Prior to OTP release R11B (erts version 5.5) _u_n_l_i_n_k_/_1 behaved
              completely asynchronous, i.e., the link was active until the
              "unlink signal" reached the linked entity. This had one
              undesirable effect, though. You could never know when you were
              guaranteed _n_o_t to be effected by the link.

              Current behavior can be viewed as two combined operations:
              asynchronously send an "unlink signal" to the linked entity and
              ignore any future results of the link.


       uunnrreeggiisstteerr((RReeggNNaammee)) -->> ttrruuee

              Types:

                 RegName = atom()

              Removes the registered name _R_e_g_N_a_m_e, associated with a pid or a
              port identifier.

              > unregister(db).
              true

              Users are advised not to unregister system processes.

              Failure: _b_a_d_a_r_g if _R_e_g_N_a_m_e is not a registered name.

       wwhheerreeiiss((RReeggNNaammee)) -->> ppiidd(()) || ppoorrtt(()) || uunnddeeffiinneedd

              Returns the pid or port identifier with the registered name
              _R_e_g_N_a_m_e. Returns _u_n_d_e_f_i_n_e_d if the name is not registered.

              > whereis(db).
              <0.43.0>

       eerrllaanngg::yyiieelldd(()) -->> ttrruuee

              Voluntarily let other processes (if any) get a chance to
              execute. Using _e_r_l_a_n_g_:_y_i_e_l_d_(_) is similar to _r_e_c_e_i_v_e _a_f_t_e_r _1 _-_>
              _o_k _e_n_d, except that _y_i_e_l_d_(_) is faster.

          WWaarrnniinngg::
              There is seldom or never any need to use this BIF, especially in
              the SMP-emulator as other processes will have a chance to run in
              another scheduler thread anyway. Using this BIF without a
              thorough grasp of how the scheduler works may cause performance
              degradation.




Ericsson AB                       erts 5.9.2                         erlang(3)
