lists(3)                   Erlang Module Definition                   lists(3)



NNAAMMEE
       lists - List Processing Functions

DDEESSCCRRIIPPTTIIOONN
       This module contains functions for list processing.

       Unless otherwise stated, all functions assume that position numbering
       starts at 1. That is, the first element of a list is at position 1.

       Two terms _T_1 and _T_2 compare equal if _T_1 _=_= _T_2 evaluates to _t_r_u_e. They
       match if _T_1 _=_:_= _T_2 evaluates to _t_r_u_e.

       Whenever an _o_r_d_e_r_i_n_g _f_u_n_c_t_i_o_n _F is expected as argument, it is assumed
       that the following properties hold of _F for all x, y and z:

         * if x _F y and y _F x then x = y (_F is antisymmetric);

         * if x _F y and y _F z then x _F z (_F is transitive);

         * x _F y or y _F x (_F is total).

       An example of a typical ordering function is less than or equal to,
       _=_<_/_2.

EEXXPPOORRTTSS
       aallll((PPrreedd,, LLiisstt)) -->> bboooolleeaann(())

              Types:

                 Pred = fun((Elem :: T) -> boolean())
                 List = [T]
                 T = term()

              Returns _t_r_u_e if _P_r_e_d_(_E_l_e_m_) returns _t_r_u_e for all elements _E_l_e_m in
              _L_i_s_t, otherwise _f_a_l_s_e.

       aannyy((PPrreedd,, LLiisstt)) -->> bboooolleeaann(())

              Types:

                 Pred = fun((Elem :: T) -> boolean())
                 List = [T]
                 T = term()

              Returns _t_r_u_e if _P_r_e_d_(_E_l_e_m_) returns _t_r_u_e for at least one element
              _E_l_e_m in _L_i_s_t.

       aappppeenndd((LLiissttOOffLLiissttss)) -->> LLiisstt11

              Types:

                 ListOfLists = [List]
                 List = List1 = [T]
                 T = term()

              Returns a list in which all the sub-lists of _L_i_s_t_O_f_L_i_s_t_s have
              been appended. For example:

              > lists:append([[1, 2, 3], [a, b], [4, 5, 6]]).
              [1,2,3,a,b,4,5,6]

       aappppeenndd((LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 List1 = List2 = List3 = [T]
                 T = term()

              Returns a new list _L_i_s_t_3 which is made from the elements of
              _L_i_s_t_1 followed by the elements of _L_i_s_t_2. For example:

              > lists:append("abc", "def").
              "abcdef"

              _l_i_s_t_s_:_a_p_p_e_n_d_(_A_, _B_) is equivalent to _A _+_+ _B.

       ccoonnccaatt((TThhiinnggss)) -->> ssttrriinngg(())

              Types:

                 Things = [Thing]
                 Thing = atom() | integer() | float() | string()

              Concatenates the text representation of the elements of _T_h_i_n_g_s.
              The elements of _T_h_i_n_g_s can be atoms, integers, floats or
              strings.

              > lists:concat([doc, '/', file, '.', 3]).
              "doc/file.3"

       ddeelleettee((EElleemm,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Elem = T
                 List1 = List2 = [T]
                 T = term()

              Returns a copy of _L_i_s_t_1 where the first element matching _E_l_e_m is
              deleted, if there is such an element.

       ddrrooppwwhhiillee((PPrreedd,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Pred = fun((Elem :: T) -> boolean())
                 List1 = List2 = [T]
                 T = term()

              Drops elements _E_l_e_m from _L_i_s_t_1 while _P_r_e_d_(_E_l_e_m_) returns _t_r_u_e and
              returns the remaining list.

       dduupplliiccaattee((NN,, EElleemm)) -->> LLiisstt

              Types:

                 N = integer() >= 0
                 Elem = T
                 List = [T]
                 T = term()

              Returns a list which contains _N copies of the term _E_l_e_m. For
              example:

              > lists:duplicate(5, xx).
              [xx,xx,xx,xx,xx]

       ffiilltteerr((PPrreedd,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Pred = fun((Elem :: T) -> boolean())
                 List1 = List2 = [T]
                 T = term()

              _L_i_s_t_2 is a list of all elements _E_l_e_m in _L_i_s_t_1 for which
              _P_r_e_d_(_E_l_e_m_) returns _t_r_u_e.

       ffllaattlleennggtthh((DDeeeeppLLiisstt)) -->> iinntteeggeerr(()) >>== 00

              Types:

                 DeepList = [term() | DeepList]

              Equivalent to _l_e_n_g_t_h_(_f_l_a_t_t_e_n_(_D_e_e_p_L_i_s_t_)_), but more efficient.

       ffllaattmmaapp((FFuunn,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Fun = fun((A) -> [B])
                 List1 = [A]
                 List2 = [B]
                 A = B = term()

              Takes a function from _As to lists of _Bs, and a list of _As
              (_L_i_s_t_1) and produces a list of _Bs by applying the function to
              every element in _L_i_s_t_1 and appending the resulting lists.

              That is, _f_l_a_t_m_a_p behaves as if it had been defined as follows:

              flatmap(Fun, List1) ->
                  append(map(Fun, List1)).

              Example:

              > lists:flatmap(fun(X)->[X,X] end, [a,b,c]).
              [a,a,b,b,c,c]

       ffllaatttteenn((DDeeeeppLLiisstt)) -->> LLiisstt

              Types:

                 DeepList = [term() | DeepList]
                 List = [term()]

              Returns a flattened version of _D_e_e_p_L_i_s_t.

       ffllaatttteenn((DDeeeeppLLiisstt,, TTaaiill)) -->> LLiisstt

              Types:

                 DeepList = [term() | DeepList]
                 Tail = List = [term()]

              Returns a flattened version of _D_e_e_p_L_i_s_t with the tail _T_a_i_l
              appended.

       ffoollddll((FFuunn,, AAcccc00,, LLiisstt)) -->> AAcccc11

              Types:

                 Fun = fun((Elem :: T, AccIn) -> AccOut)
                 Acc0 = Acc1 = AccIn = AccOut = term()
                 List = [T]
                 T = term()

              Calls _F_u_n_(_E_l_e_m_, _A_c_c_I_n_) on successive elements _A of _L_i_s_t,
              starting with _A_c_c_I_n _=_= _A_c_c_0. _F_u_n_/_2 must return a new accumulator
              which is passed to the next call. The function returns the final
              value of the accumulator. _A_c_c_0 is returned if the list is empty.
              For example:

              > lists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]).
              15
              > lists:foldl(fun(X, Prod) -> X * Prod end, 1, [1,2,3,4,5]).
              120

       ffoollddrr((FFuunn,, AAcccc00,, LLiisstt)) -->> AAcccc11

              Types:

                 Fun = fun((Elem :: T, AccIn) -> AccOut)
                 Acc0 = Acc1 = AccIn = AccOut = term()
                 List = [T]
                 T = term()

              Like _f_o_l_d_l_/_3, but the list is traversed from right to left. For
              example:

              > P = fun(A, AccIn) -> io:format("~p ", [A]), AccIn end.
              #Fun<erl_eval.12.2225172>
              > lists:foldl(P, void, [1,2,3]).
              1 2 3 void
              > lists:foldr(P, void, [1,2,3]).
              3 2 1 void

              _f_o_l_d_l_/_3 is tail recursive and would usually be preferred to
              _f_o_l_d_r_/_3.

       ffoorreeaacchh((FFuunn,, LLiisstt)) -->> ookk

              Types:

                 Fun = fun((Elem :: T) -> term())
                 List = [T]
                 T = term()

              Calls _F_u_n_(_E_l_e_m_) for each element _E_l_e_m in _L_i_s_t. This function is
              used for its side effects and the evaluation order is defined to
              be the same as the order of the elements in the list.

       kkeeyyddeelleettee((KKeeyy,, NN,, TTuupplleeLLiisstt11)) -->> TTuupplleeLLiisstt22

              Types:

                 Key = term()
                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = TupleList2 = [Tuple]
                 Tuple = tuple()

              Returns a copy of _T_u_p_l_e_L_i_s_t_1 where the first occurrence of a
              tuple whose _Nth element compares equal to _K_e_y is deleted, if
              there is such a tuple.

       kkeeyyffiinndd((KKeeyy,, NN,, TTuupplleeLLiisstt)) -->> TTuuppllee || ffaallssee

              Types:

                 Key = term()
                 N = 1..tuple_size(Tuple)
                 TupleList = [Tuple]
                 Tuple = tuple()

              Searches the list of tuples _T_u_p_l_e_L_i_s_t for a tuple whose _Nth
              element compares equal to _K_e_y. Returns _T_u_p_l_e if such a tuple is
              found, otherwise _f_a_l_s_e.

       kkeeyymmaapp((FFuunn,, NN,, TTuupplleeLLiisstt11)) -->> TTuupplleeLLiisstt22

              Types:

                 Fun = fun((Term1 :: term()) -> Term2 :: term())
                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = TupleList2 = [Tuple]
                 Tuple = tuple()

              Returns a list of tuples where, for each tuple in _T_u_p_l_e_L_i_s_t_1,
              the _Nth element _T_e_r_m_1 of the tuple has been replaced with the
              result of calling _F_u_n_(_T_e_r_m_1_).

              Examples:

              > Fun = fun(Atom) -> atom_to_list(Atom) end.
              #Fun<erl_eval.6.10732646>
              2> lists:keymap(Fun, 2, [{name,jane,22},{name,lizzie,20},{name,lydia,15}]).
              [{name,"jane",22},{name,"lizzie",20},{name,"lydia",15}]

       kkeeyymmeemmbbeerr((KKeeyy,, NN,, TTuupplleeLLiisstt)) -->> bboooolleeaann(())

              Types:

                 Key = term()
                 N = 1..tuple_size(Tuple)
                 TupleList = [Tuple]
                  Tuple = tuple()

              Returns _t_r_u_e if there is a tuple in _T_u_p_l_e_L_i_s_t whose _Nth element
              compares equal to _K_e_y, otherwise _f_a_l_s_e.

       kkeeyymmeerrggee((NN,, TTuupplleeLLiisstt11,, TTuupplleeLLiisstt22)) -->> TTuupplleeLLiisstt33

              Types:

                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = [T1]
                 TupleList2 = [T2]
                 TupleList3 = [(T1 | T2)]
                 T1 = T2 = Tuple
                 Tuple = tuple()

              Returns the sorted list formed by merging _T_u_p_l_e_L_i_s_t_1 and
              _T_u_p_l_e_L_i_s_t_2. The merge is performed on the _Nth element of each
              tuple. Both _T_u_p_l_e_L_i_s_t_1 and _T_u_p_l_e_L_i_s_t_2 must be key-sorted prior
              to evaluating this function. When two tuples compare equal, the
              tuple from _T_u_p_l_e_L_i_s_t_1 is picked before the tuple from
              _T_u_p_l_e_L_i_s_t_2.

       kkeeyyrreeppllaaccee((KKeeyy,, NN,, TTuupplleeLLiisstt11,, NNeewwTTuuppllee)) -->> TTuupplleeLLiisstt22

              Types:

                 Key = term()
                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = TupleList2 = [Tuple]
                 NewTuple = Tuple
                 Tuple = tuple()

              Returns a copy of _T_u_p_l_e_L_i_s_t_1 where the first occurrence of a _T
              tuple whose _Nth element compares equal to _K_e_y is replaced with
              _N_e_w_T_u_p_l_e, if there is such a tuple _T.

       kkeeyysseeaarrcchh((KKeeyy,, NN,, TTuupplleeLLiisstt)) -->> {{vvaalluuee,, TTuuppllee}} || ffaallssee

              Types:

                 Key = term()
                 N = 1..tuple_size(Tuple)
                 TupleList = [Tuple]
                 Tuple = tuple()

              Searches the list of tuples _T_u_p_l_e_L_i_s_t for a tuple whose _Nth
              element compares equal to _K_e_y. Returns _{_v_a_l_u_e_, _T_u_p_l_e_} if such a
              tuple is found, otherwise _f_a_l_s_e.

          NNoottee::
              This function is retained for backward compatibility. The
              function _l_i_s_t_s_:_k_e_y_f_i_n_d_/_3 (introduced in R13A) is in most cases
              more convenient.


       kkeeyyssoorrtt((NN,, TTuupplleeLLiisstt11)) -->> TTuupplleeLLiisstt22

              Types:

                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = TupleList2 = [Tuple]
                 Tuple = tuple()

              Returns a list containing the sorted elements of the list
              _T_u_p_l_e_L_i_s_t_1. Sorting is performed on the _Nth element of the
              tuples. The sort is stable.

       kkeeyyssttoorree((KKeeyy,, NN,, TTuupplleeLLiisstt11,, NNeewwTTuuppllee)) -->> TTuupplleeLLiisstt22

              Types:

                 Key = term()
                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = [Tuple]
                 TupleList2 = [Tuple, ...]
                 NewTuple = Tuple
                 Tuple = tuple()

              Returns a copy of _T_u_p_l_e_L_i_s_t_1 where the first occurrence of a
              tuple _T whose _Nth element compares equal to _K_e_y is replaced with
              _N_e_w_T_u_p_l_e, if there is such a tuple _T. If there is no such tuple
              _T a copy of _T_u_p_l_e_L_i_s_t_1 where [_N_e_w_T_u_p_l_e] has been appended to the
              end is returned.

       kkeeyyttaakkee((KKeeyy,, NN,, TTuupplleeLLiisstt11)) -->> {{vvaalluuee,, TTuuppllee,, TTuupplleeLLiisstt22}} || ffaallssee

              Types:

                 Key = term()
                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = TupleList2 = [tuple()]
                 Tuple = tuple()

              Searches the list of tuples _T_u_p_l_e_L_i_s_t_1 for a tuple whose _Nth
              element compares equal to _K_e_y. Returns _{_v_a_l_u_e_, _T_u_p_l_e_,
              _T_u_p_l_e_L_i_s_t_2_} if such a tuple is found, otherwise _f_a_l_s_e.
              _T_u_p_l_e_L_i_s_t_2 is a copy of _T_u_p_l_e_L_i_s_t_1 where the first occurrence of
              _T_u_p_l_e has been removed.

       llaasstt((LLiisstt)) -->> LLaasstt

              Types:

                 List = [T, ...]
                 Last = T
                 T = term()

              Returns the last element in _L_i_s_t.

       mmaapp((FFuunn,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Fun = fun((A) -> B)
                 List1 = [A]
                 List2 = [B]
                 A = B = term()

              Takes a function from _As to _Bs, and a list of _As and produces a
              list of _Bs by applying the function to every element in the
              list. This function is used to obtain the return values. The
              evaluation order is implementation dependent.

       mmaappffoollddll((FFuunn,, AAcccc00,, LLiisstt11)) -->> {{LLiisstt22,, AAcccc11}}

              Types:

                 Fun = fun((A, AccIn) -> {B, AccOut})
                 Acc0 = Acc1 = AccIn = AccOut = term()
                 List1 = [A]
                 List2 = [B]
                 A = B = term()

              _m_a_p_f_o_l_d_l combines the operations of _m_a_p_/_2 and _f_o_l_d_l_/_3 into one
              pass. An example, summing the elements in a list and double them
              at the same time:

              > lists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end,
              0, [1,2,3,4,5]).
              {[2,4,6,8,10],15}

       mmaappffoollddrr((FFuunn,, AAcccc00,, LLiisstt11)) -->> {{LLiisstt22,, AAcccc11}}

              Types:

                 Fun = fun((A, AccIn) -> {B, AccOut})
                 Acc0 = Acc1 = AccIn = AccOut = term()
                 List1 = [A]
                 List2 = [B]
                 A = B = term()

              _m_a_p_f_o_l_d_r combines the operations of _m_a_p_/_2 and _f_o_l_d_r_/_3 into one
              pass.

       mmaaxx((LLiisstt)) -->> MMaaxx

              Types:

                 List = [T, ...]
                 Max = T
                 T = term()

              Returns the first element of _L_i_s_t that compares greater than or
              equal to all other elements of _L_i_s_t.

       mmeemmbbeerr((EElleemm,, LLiisstt)) -->> bboooolleeaann(())

              Types:

                 Elem = term()
                 List = [term()]

              Returns _t_r_u_e if _E_l_e_m matches some element of _L_i_s_t, otherwise
              _f_a_l_s_e.

       mmeerrggee((LLiissttOOffLLiissttss)) -->> LLiisstt11

              Types:

                 ListOfLists = [List]
                 List = List1 = [T]
                 T = term()

              Returns the sorted list formed by merging all the sub-lists of
              _L_i_s_t_O_f_L_i_s_t_s. All sub-lists must be sorted prior to evaluating
              this function. When two elements compare equal, the element from
              the sub-list with the lowest position in _L_i_s_t_O_f_L_i_s_t_s is picked
              before the other element.

       mmeerrggee((LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 List1 = [X]
                 List2 = [Y]
                 List3 = [(X | Y)]
                 X = Y = term()

              Returns the sorted list formed by merging _L_i_s_t_1 and _L_i_s_t_2. Both
              _L_i_s_t_1 and _L_i_s_t_2 must be sorted prior to evaluating this
              function. When two elements compare equal, the element from
              _L_i_s_t_1 is picked before the element from _L_i_s_t_2.

       mmeerrggee((FFuunn,, LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 Fun = fun((A, B) -> boolean())
                 List1 = [A]
                 List2 = [B]
                 List3 = [(A | B)]
                 A = B = term()

              Returns the sorted list formed by merging _L_i_s_t_1 and _L_i_s_t_2. Both
              _L_i_s_t_1 and _L_i_s_t_2 must be sorted according to the oorrddeerriinngg
              ffuunnccttiioonn _F_u_n prior to evaluating this function. _F_u_n_(_A_, _B_) should
              return _t_r_u_e if _A compares less than or equal to _B in the
              ordering, _f_a_l_s_e otherwise. When two elements compare equal, the
              element from _L_i_s_t_1 is picked before the element from _L_i_s_t_2.

       mmeerrggee33((LLiisstt11,, LLiisstt22,, LLiisstt33)) -->> LLiisstt44

              Types:

                 List1 = [X]
                 List2 = [Y]
                 List3 = [Z]
                 List4 = [(X | Y | Z)]
                 X = Y = Z = term()

              Returns the sorted list formed by merging _L_i_s_t_1, _L_i_s_t_2 and
              _L_i_s_t_3. All of _L_i_s_t_1, _L_i_s_t_2 and _L_i_s_t_3 must be sorted prior to
              evaluating this function. When two elements compare equal, the
              element from _L_i_s_t_1, if there is such an element, is picked
              before the other element, otherwise the element from _L_i_s_t_2 is
              picked before the element from _L_i_s_t_3.

       mmiinn((LLiisstt)) -->> MMiinn

              Types:

                 List = [T, ...]
                 Min = T
                 T = term()

              Returns the first element of _L_i_s_t that compares less than or
              equal to all other elements of _L_i_s_t.

       nntthh((NN,, LLiisstt)) -->> EElleemm

              Types:

                 N = integer() >= 1
                   1..length(List)
                 List = [T, ...]
                 Elem = T
                 T = term()

              Returns the _Nth element of _L_i_s_t. For example:

              > lists:nth(3, [a, b, c, d, e]).
              c

       nntthhttaaiill((NN,, LLiisstt)) -->> TTaaiill

              Types:

                 N = integer() >= 0
                   0..length(List)
                 List = [T, ...]
                 Tail = [T]
                 T = term()

              Returns the _Nth tail of _L_i_s_t, that is, the sublist of _L_i_s_t
              starting at _N_+_1 and continuing up to the end of the list. For
              example:

              > lists:nthtail(3, [a, b, c, d, e]).
              [d,e]
              > tl(tl(tl([a, b, c, d, e]))).
              [d,e]
              > lists:nthtail(0, [a, b, c, d, e]).
              [a,b,c,d,e]
              > lists:nthtail(5, [a, b, c, d, e]).
              []

       ppaarrttiittiioonn((PPrreedd,, LLiisstt)) -->> {{SSaattiissffyyiinngg,, NNoottSSaattiissffyyiinngg}}

              Types:

                 Pred = fun((Elem :: T) -> boolean())
                 List = Satisfying = NotSatisfying = [T]
                 T = term()

              Partitions _L_i_s_t into two lists, where the first list contains
              all elements for which _P_r_e_d_(_E_l_e_m_) returns _t_r_u_e, and the second
              list contains all elements for which _P_r_e_d_(_E_l_e_m_) returns _f_a_l_s_e.

              Examples:

              > lists:partition(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).
              {[1,3,5,7],[2,4,6]}
              > lists:partition(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]).
              {[a,b,c,d,e],[1,2,3,4]}

              See also _s_p_l_i_t_w_i_t_h_/_2 for a different way to partition a list.

       pprreeffiixx((LLiisstt11,, LLiisstt22)) -->> bboooolleeaann(())

              Types:

                 List1 = List2 = [T]
                 T = term()

              Returns _t_r_u_e if _L_i_s_t_1 is a prefix of _L_i_s_t_2, otherwise _f_a_l_s_e.

       rreevveerrssee((LLiisstt11)) -->> LLiisstt22

              Types:

                 List1 = List2 = [T]
                 T = term()

              Returns a list with the elements in _L_i_s_t_1 in reverse order.

       rreevveerrssee((LLiisstt11,, TTaaiill)) -->> LLiisstt22

              Types:

                 List1 = Tail = List2 = [term()]

              Returns a list with the elements in _L_i_s_t_1 in reverse order, with
              the tail _T_a_i_l appended. For example:

              > lists:reverse([1, 2, 3, 4], [a, b, c]).
              [4,3,2,1,a,b,c]

       sseeqq((FFrroomm,, TToo)) -->> SSeeqq

       sseeqq((FFrroomm,, TToo,, IInnccrr)) -->> SSeeqq

              Types:

                 From = To = Incr = integer()
                 Seq = [integer()]

              Returns a sequence of integers which starts with _F_r_o_m and
              contains the successive results of adding _I_n_c_r to the previous
              element, until _T_o has been reached or passed (in the latter
              case, _T_o is not an element of the sequence). _I_n_c_r defaults to 1.

              Failure: If _T_o_<_F_r_o_m_-_I_n_c_r and _I_n_c_r is positive, or if _T_o_>_F_r_o_m_-
              _I_n_c_r and _I_n_c_r is negative, or if _I_n_c_r_=_=_0 and _F_r_o_m_/_=_T_o.

              The following equalities hold for all sequences:

              length(lists:seq(From, To)) == To-From+1
              length(lists:seq(From, To, Incr)) == (To-From+Incr) div Incr

              Examples:

              > lists:seq(1, 10).
              [1,2,3,4,5,6,7,8,9,10]
              > lists:seq(1, 20, 3).
              [1,4,7,10,13,16,19]
              > lists:seq(1, 0, 1).
              []
              > lists:seq(10, 6, 4).
              []
              > lists:seq(1, 1, 0).
              [1]

       ssoorrtt((LLiisstt11)) -->> LLiisstt22

              Types:

                 List1 = List2 = [T]
                 T = term()

              Returns a list containing the sorted elements of _L_i_s_t_1.

       ssoorrtt((FFuunn,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Fun = fun((A :: T, B :: T) -> boolean())
                 List1 = List2 = [T]
                 T = term()

              Returns a list containing the sorted elements of _L_i_s_t_1,
              according to the oorrddeerriinngg ffuunnccttiioonn _F_u_n. _F_u_n_(_A_, _B_) should return
              _t_r_u_e if _A compares less than or equal to _B in the ordering,
              _f_a_l_s_e otherwise.

       sspplliitt((NN,, LLiisstt11)) -->> {{LLiisstt22,, LLiisstt33}}

              Types:

                 N = integer() >= 0
                   0..length(List1)
                 List1 = List2 = List3 = [T]
                 T = term()

              Splits _L_i_s_t_1 into _L_i_s_t_2 and _L_i_s_t_3. _L_i_s_t_2 contains the first _N
              elements and _L_i_s_t_3 the rest of the elements (the _Nth tail).

       sspplliittwwiitthh((PPrreedd,, LLiisstt)) -->> {{LLiisstt11,, LLiisstt22}}

              Types:

                 Pred = fun((T) -> boolean())
                 List = List1 = List2 = [T]
                 T = term()

              Partitions _L_i_s_t into two lists according to _P_r_e_d. _s_p_l_i_t_w_i_t_h_/_2
              behaves as if it is defined as follows:

              splitwith(Pred, List) ->
                  {takewhile(Pred, List), dropwhile(Pred, List)}.

              Examples:

              > lists:splitwith(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).
              {[1],[2,3,4,5,6,7]}
              > lists:splitwith(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]).
              {[a,b],[1,c,d,2,3,4,e]}

              See also _p_a_r_t_i_t_i_o_n_/_2 for a different way to partition a list.

       ssuubblliisstt((LLiisstt11,, LLeenn)) -->> LLiisstt22

              Types:

                 List1 = List2 = [T]
                 Len = integer() >= 0
                 T = term()

              Returns the sub-list of _L_i_s_t_1 starting at position 1 and with
              (max) _L_e_n elements. It is not an error for _L_e_n to exceed the
              length of the list, in that case the whole list is returned.

       ssuubblliisstt((LLiisstt11,, SSttaarrtt,, LLeenn)) -->> LLiisstt22

              Types:

                 List1 = List2 = [T]
                 Start = integer() >= 1
                   1..(length(List1)+1)
                 Len = integer() >= 0
                 T = term()

              Returns the sub-list of _L_i_s_t_1 starting at _S_t_a_r_t and with (max)
              _L_e_n elements. It is not an error for _S_t_a_r_t_+_L_e_n to exceed the
              length of the list.

              > lists:sublist([1,2,3,4], 2, 2).
              [2,3]
              > lists:sublist([1,2,3,4], 2, 5).
              [2,3,4]
              > lists:sublist([1,2,3,4], 5, 2).
              []

       ssuubbttrraacctt((LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 List1 = List2 = List3 = [T]
                 T = term()

              Returns a new list _L_i_s_t_3 which is a copy of _L_i_s_t_1, subjected to
              the following procedure: for each element in _L_i_s_t_2, its first
              occurrence in _L_i_s_t_1 is deleted. For example:

              > lists:subtract("123212", "212").
              "312".

              _l_i_s_t_s_:_s_u_b_t_r_a_c_t_(_A_, _B_) is equivalent to _A _-_- _B.

          WWaarrnniinngg::
              The complexity of _l_i_s_t_s_:_s_u_b_t_r_a_c_t_(_A_, _B_) is proportional to
              _l_e_n_g_t_h_(_A_)_*_l_e_n_g_t_h_(_B_), meaning that it will be very slow if both _A
              and _B are long lists. (Using ordered lists and
              oorrddsseettss::ssuubbttrraacctt//22 is a much better choice if both lists are
              long.)


       ssuuffffiixx((LLiisstt11,, LLiisstt22)) -->> bboooolleeaann(())

              Types:

                 List1 = List2 = [T]
                 T = term()

              Returns _t_r_u_e if _L_i_s_t_1 is a suffix of _L_i_s_t_2, otherwise _f_a_l_s_e.

       ssuumm((LLiisstt)) -->> nnuummbbeerr(())

              Types:

                 List = [number()]

              Returns the sum of the elements in _L_i_s_t.

       ttaakkeewwhhiillee((PPrreedd,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Pred = fun((Elem :: T) -> boolean())
                 List1 = List2 = [T]
                 T = term()

              Takes elements _E_l_e_m from _L_i_s_t_1 while _P_r_e_d_(_E_l_e_m_) returns _t_r_u_e,
              that is, the function returns the longest prefix of the list for
              which all elements satisfy the predicate.

       uukkeeyymmeerrggee((NN,, TTuupplleeLLiisstt11,, TTuupplleeLLiisstt22)) -->> TTuupplleeLLiisstt33

              Types:

                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = [T1]
                 TupleList2 = [T2]
                 TupleList3 = [(T1 | T2)]
                 T1 = T2 = Tuple
                 Tuple = tuple()

              Returns the sorted list formed by merging _T_u_p_l_e_L_i_s_t_1 and
              _T_u_p_l_e_L_i_s_t_2. The merge is performed on the _Nth element of each
              tuple. Both _T_u_p_l_e_L_i_s_t_1 and _T_u_p_l_e_L_i_s_t_2 must be key-sorted without
              duplicates prior to evaluating this function. When two tuples
              compare equal, the tuple from _T_u_p_l_e_L_i_s_t_1 is picked and the one
              from _T_u_p_l_e_L_i_s_t_2 deleted.

       uukkeeyyssoorrtt((NN,, TTuupplleeLLiisstt11)) -->> TTuupplleeLLiisstt22

              Types:

                 N = integer() >= 1
                   1..tuple_size(Tuple)
                 TupleList1 = TupleList2 = [Tuple]
                 Tuple = tuple()

              Returns a list containing the sorted elements of the list
              _T_u_p_l_e_L_i_s_t_1 where all but the first tuple of the tuples comparing
              equal have been deleted. Sorting is performed on the _Nth element
              of the tuples.

       uummeerrggee((LLiissttOOffLLiissttss)) -->> LLiisstt11

              Types:

                 ListOfLists = [List]
                 List = List1 = [T]
                 T = term()

              Returns the sorted list formed by merging all the sub-lists of
              _L_i_s_t_O_f_L_i_s_t_s. All sub-lists must be sorted and contain no
              duplicates prior to evaluating this function. When two elements
              compare equal, the element from the sub-list with the lowest
              position in _L_i_s_t_O_f_L_i_s_t_s is picked and the other one deleted.

       uummeerrggee((LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 List1 = [X]
                 List2 = [Y]
                 List3 = [(X | Y)]
                 X = Y = term()

              Returns the sorted list formed by merging _L_i_s_t_1 and _L_i_s_t_2. Both
              _L_i_s_t_1 and _L_i_s_t_2 must be sorted and contain no duplicates prior
              to evaluating this function. When two elements compare equal,
              the element from _L_i_s_t_1 is picked and the one from _L_i_s_t_2 deleted.

       uummeerrggee((FFuunn,, LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 Fun = fun((A, B) -> boolean())
                 List1 = [A]
                 List2 = [B]
                 List3 = [(A | B)]
                 A = B = term()

              Returns the sorted list formed by merging _L_i_s_t_1 and _L_i_s_t_2. Both
              _L_i_s_t_1 and _L_i_s_t_2 must be sorted according to the oorrddeerriinngg
              ffuunnccttiioonn _F_u_n and contain no duplicates prior to evaluating this
              function. _F_u_n_(_A_, _B_) should return _t_r_u_e if _A compares less than
              or equal to _B in the ordering, _f_a_l_s_e otherwise. When two
              elements compare equal, the element from _L_i_s_t_1 is picked and the
              one from _L_i_s_t_2 deleted.

       uummeerrggee33((LLiisstt11,, LLiisstt22,, LLiisstt33)) -->> LLiisstt44

              Types:

                 List1 = [X]
                 List2 = [Y]
                 List3 = [Z]
                 List4 = [(X | Y | Z)]
                 X = Y = Z = term()

              Returns the sorted list formed by merging _L_i_s_t_1, _L_i_s_t_2 and
              _L_i_s_t_3. All of _L_i_s_t_1, _L_i_s_t_2 and _L_i_s_t_3 must be sorted and contain
              no duplicates prior to evaluating this function. When two
              elements compare equal, the element from _L_i_s_t_1 is picked if
              there is such an element, otherwise the element from _L_i_s_t_2 is
              picked, and the other one deleted.

       uunnzziipp((LLiisstt11)) -->> {{LLiisstt22,, LLiisstt33}}

              Types:

                 List1 = [{A, B}]
                 List2 = [A]
                 List3 = [B]
                 A = B = term()

              "Unzips" a list of two-tuples into two lists, where the first
              list contains the first element of each tuple, and the second
              list contains the second element of each tuple.

       uunnzziipp33((LLiisstt11)) -->> {{LLiisstt22,, LLiisstt33,, LLiisstt44}}

              Types:

                 List1 = [{A, B, C}]
                 List2 = [A]
                 List3 = [B]
                 List4 = [C]
                 A = B = C = term()

              "Unzips" a list of three-tuples into three lists, where the
              first list contains the first element of each tuple, the second
              list contains the second element of each tuple, and the third
              list contains the third element of each tuple.

       uussoorrtt((LLiisstt11)) -->> LLiisstt22

              Types:

                 List1 = List2 = [T]
                 T = term()

              Returns a list containing the sorted elements of _L_i_s_t_1 where all
              but the first element of the elements comparing equal have been
              deleted.

       uussoorrtt((FFuunn,, LLiisstt11)) -->> LLiisstt22

              Types:

                 Fun = fun((T, T) -> boolean())
                 List1 = List2 = [T]
                 T = term()

              Returns a list which contains the sorted elements of _L_i_s_t_1 where
              all but the first element of the elements comparing equal
              according to the oorrddeerriinngg ffuunnccttiioonn _F_u_n have been deleted. _F_u_n_(_A_,
              _B_) should return _t_r_u_e if _A compares less than or equal to _B in
              the ordering, _f_a_l_s_e otherwise.

       zziipp((LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 List1 = [A]
                 List2 = [B]
                 List3 = [{A, B}]
                 A = B = term()

              "Zips" two lists of equal length into one list of two-tuples,
              where the first element of each tuple is taken from the first
              list and the second element is taken from corresponding element
              in the second list.

       zziipp33((LLiisstt11,, LLiisstt22,, LLiisstt33)) -->> LLiisstt44

              Types:

                 List1 = [A]
                 List2 = [B]
                 List3 = [C]
                 List4 = [{A, B, C}]
                 A = B = C = term()

              "Zips" three lists of equal length into one list of three-
              tuples, where the first element of each tuple is taken from the
              first list, the second element is taken from corresponding
              element in the second list, and the third element is taken from
              the corresponding element in the third list.

       zziippwwiitthh((CCoommbbiinnee,, LLiisstt11,, LLiisstt22)) -->> LLiisstt33

              Types:

                 Combine = fun((X, Y) -> T)
                 List1 = [X]
                 List2 = [Y]
                 List3 = [T]
                 X = Y = T = term()

              Combine the elements of two lists of equal length into one list.
              For each pair _X_, _Y of list elements from the two lists, the
              element in the result list will be _C_o_m_b_i_n_e_(_X_, _Y_).

              _z_i_p_w_i_t_h_(_f_u_n_(_X_, _Y_) _-_> _{_X_,_Y_} _e_n_d_, _L_i_s_t_1_, _L_i_s_t_2_) is equivalent to
              _z_i_p_(_L_i_s_t_1_, _L_i_s_t_2_).

              Example:

              > lists:zipwith(fun(X, Y) -> X+Y end, [1,2,3], [4,5,6]).
              [5,7,9]

       zziippwwiitthh33((CCoommbbiinnee,, LLiisstt11,, LLiisstt22,, LLiisstt33)) -->> LLiisstt44

              Types:

                 Combine = fun((X, Y, Z) -> T)
                 List1 = [X]
                 List2 = [Y]
                 List3 = [Z]
                 List4 = [T]
                 X = Y = Z = T = term()

              Combine the elements of three lists of equal length into one
              list. For each triple _X_, _Y_, _Z of list elements from the three
              lists, the element in the result list will be _C_o_m_b_i_n_e_(_X_, _Y_, _Z_).

              _z_i_p_w_i_t_h_3_(_f_u_n_(_X_, _Y_, _Z_) _-_> _{_X_,_Y_,_Z_} _e_n_d_, _L_i_s_t_1_, _L_i_s_t_2_, _L_i_s_t_3_) is
              equivalent to _z_i_p_3_(_L_i_s_t_1_, _L_i_s_t_2_, _L_i_s_t_3_).

              Examples:

              > lists:zipwith3(fun(X, Y, Z) -> X+Y+Z end, [1,2,3], [4,5,6], [7,8,9]).
              [12,15,18]
              > lists:zipwith3(fun(X, Y, Z) -> [X,Y,Z] end, [a,b,c], [x,y,z], [1,2,3]).
              [[a,x,1],[b,y,2],[c,z,3]]



Ericsson AB                      stdlib 1.18.2                        lists(3)
