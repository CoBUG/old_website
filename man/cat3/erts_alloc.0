erts_alloc(3)                 C Library Functions                erts_alloc(3)



NNAAMMEE
       erts_alloc - An Erlang Run-Time System internal memory allocator
       library.

DDEESSCCRRIIPPTTIIOONN
       _e_r_t_s___a_l_l_o_c is an Erlang Run-Time System internal memory allocator
       library. _e_r_t_s___a_l_l_o_c provides the Erlang Run-Time System with a number
       of memory allocators.

AALLLLOOCCAATTOORRSS
       Currently the following allocators are present:

         _t_e_m_p___a_l_l_o_c:
           Allocator used for temporary allocations.

         _e_h_e_a_p___a_l_l_o_c:
           Allocator used for Erlang heap data, such as Erlang process heaps.

         _b_i_n_a_r_y___a_l_l_o_c:
           Allocator used for Erlang binary data.

         _e_t_s___a_l_l_o_c:
           Allocator used for ETS data.

         _d_r_i_v_e_r___a_l_l_o_c:
           Allocator used for driver data.

         _s_l___a_l_l_o_c:
           Allocator used for memory blocks that are expected to be short-
           lived.

         _l_l___a_l_l_o_c:
           Allocator used for memory blocks that are expected to be long-
           lived, for example Erlang code.

         _f_i_x___a_l_l_o_c:
           A fast allocator used for some frequently used fixed size data
           types.

         _s_t_d___a_l_l_o_c:
           Allocator used for most memory blocks not allocated via any of the
           other allocators described above.

         _s_y_s___a_l_l_o_c:
           This is normally the default _m_a_l_l_o_c implementation used on the
           specific OS.

         _m_s_e_g___a_l_l_o_c:
           A memory segment allocator. _m_s_e_g___a_l_l_o_c is used by other allocators
           for allocating memory segments and is currently only available on
           systems that have the _m_m_a_p system call. Memory segments that are
           deallocated are kept for a while in a segment cache before they are
           destroyed. When segments are allocated, cached segments are used if
           possible instead of creating new segments. This in order to reduce
           the number of system calls made.

         _s_b_m_b_c___a_l_l_o_c:
           Allocator used by other allocators for allocation of carriers where
           only small blocks are placed. Currently this allocator is disabled
           by default.

       _s_y_s___a_l_l_o_c is always enabled and cannot be disabled. _m_s_e_g___a_l_l_o_c is
       always enabled if it is available and an allocator that uses it is
       enabled. All other allocators can be eennaabblleedd oorr ddiissaabblleedd. By default
       all allocators are enabled. When an allocator is disabled, _s_y_s___a_l_l_o_c is
       used instead of the disabled allocator. _s_b_m_b_c___a_l_l_o_c is an exception. If
       _s_b_m_b_c___a_l_l_o_c is disabled, other allocators will not handle small blocks
       in separate carriers.

       The main idea with the _e_r_t_s___a_l_l_o_c library is to separate memory blocks
       that are used differently into different memory areas, and by this
       achieving less memory fragmentation. By putting less effort in finding
       a good fit for memory blocks that are frequently allocated than for
       those less frequently allocated, a performance gain can be achieved.

TTHHEE AALLLLOOCC__UUTTIILL FFRRAAMMEEWWOORRKK
       Internally a framework called _a_l_l_o_c___u_t_i_l is used for implementing
       allocators. _s_y_s___a_l_l_o_c, and _m_s_e_g___a_l_l_o_c do not use this framework; hence,
       the following does _n_o_t apply to them.

       An allocator manages multiple areas, called carriers, in which memory
       blocks are placed. A carrier is either placed in a separate memory
       segment (allocated via _m_s_e_g___a_l_l_o_c), in the heap segment (allocated via
       _s_y_s___a_l_l_o_c), or inside another carrier (in case it is a carrier created
       by _s_b_m_b_c___a_l_l_o_c). Multiblock carriers are used for storage of several
       blocks. Singleblock carriers are used for storage of one block. Blocks
       that are larger than the value of the singleblock carrier threshold
       (ssbbcctt) parameter are placed in singleblock carriers. Blocks that are
       smaller than the value of the _s_b_c_t parameter are placed in multiblock
       carriers. Blocks that are smaller than the small block multiblock
       carrier threshold (ssbbmmbbcctt) will be placed in multiblock carriers only
       used for small blocks. Normally an allocator creates a "main multiblock
       carrier". Main multiblock carriers are never deallocated. The size of
       the main multiblock carrier is determined by the value of the mmmmbbccss
       parameter.

       Sizes of multiblock carriers allocated via _m_s_e_g___a_l_l_o_c are decided based
       on the values of the largest multiblock carrier size (llmmbbccss), the
       smallest multiblock carrier size (ssmmbbccss), and the multiblock carrier
       growth stages (mmbbccggss) parameters. If _n_c is the current number of
       multiblock carriers (the main multiblock carrier excluded) managed by
       an allocator, the size of the next _m_s_e_g___a_l_l_o_c multiblock carrier
       allocated by this allocator will roughly be _s_m_b_c_s_+_n_c_*_(_l_m_b_c_s_-
       _s_m_b_c_s_)_/_m_b_c_g_s when _n_c _<_= _m_b_c_g_s, and _l_m_b_c_s when _n_c _> _m_b_c_g_s. If the value
       of the _s_b_c_t parameter should be larger than the value of the _l_m_b_c_s
       parameter, the allocator may have to create multiblock carriers that
       are larger than the value of the _l_m_b_c_s parameter, though. The size of
       multiblock carriers for small blocks is determined by the small block
       multiblock carrier size (ssbbmmbbccss). Singleblock carriers allocated via
       _m_s_e_g___a_l_l_o_c are sized to whole pages.

       Sizes of carriers allocated via _s_y_s___a_l_l_o_c are decided based on the
       value of the _s_y_s___a_l_l_o_c carrier size (yyccss) parameter. The size of a
       carrier is the least number of multiples of the value of the _y_c_s
       parameter that satisfies the request.

       Coalescing of free blocks are always performed immediately. Boundary
       tags (headers and footers) in free blocks are used which makes the time
       complexity for coalescing constant.

       The memory allocation strategy used for multiblock carriers by an
       allocator is configurable via the aass parameter. Currently the following
       strategies are available:

         BBeesstt ffiitt::
           Strategy: Find the smallest block that satisfies the requested
           block size.

           Implementation: A balanced binary search tree is used. The time
           complexity is proportional to log N, where N is the number of sizes
           of free blocks.

         AAddddrreessss oorrddeerr bbeesstt ffiitt::
           Strategy: Find the smallest block that satisfies the requested
           block size. If multiple blocks are found, choose the one with the
           lowest address.

           Implementation: A balanced binary search tree is used. The time
           complexity is proportional to log N, where N is the number of free
           blocks.

         AAddddrreessss oorrddeerr ffiirrsstt ffiitt::
           Strategy: Find the block with the lowest address that satisfies the
           requested block size.

           Implementation: A balanced binary search tree is used. The time
           complexity is proportional to log N, where N is the number of free
           blocks.

         GGoooodd ffiitt::
           Strategy: Try to find the best fit, but settle for the best fit
           found during a limited search.

           Implementation: The implementation uses segregated free lists with
           a maximum block search depth (in each list) in order to find a good
           fit fast. When the maximum block search depth is small (by default
           3) this implementation has a time complexity that is constant. The
           maximum block search depth is configurable via the mmbbssdd parameter.

         AA ffiitt::
           Strategy: Do not search for a fit, inspect only one free block to
           see if it satisfies the request. This strategy is only intended to
           be used for temporary allocations.

           Implementation: Inspect the first block in a free-list. If it
           satisfies the request, it is used; otherwise, a new carrier is
           created. The implementation has a time complexity that is constant.

           As of erts version 5.6.1 the emulator will refuse to use this
           strategy on other allocators than _t_e_m_p___a_l_l_o_c. This since it will
           only cause problems for other allocators.

       Apart from the ordinary allocators described above a number of pre-
       allocators are used for some specific data types. These pre-allocators
       pre-allocate a fixed amount of memory for certain data types when the
       run-time system starts. As long as pre-allocated memory is available,
       it will be used. When no pre-allocated memory is available, memory will
       be allocated in ordinary allocators. These pre-allocators are typically
       much faster than the ordinary allocators, but can only satisfy a
       limited amount of requests.

   NNoottee::
       Currently only allocators using the best fit and the address order best
       fit strategies are able to use "small block multi block carriers".


SSYYSSTTEEMM FFLLAAGGSS EEFFFFEECCTTIINNGG EERRTTSS__AALLLLOOCC
   WWaarrnniinngg::
       Only use these flags if you are absolutely sure what you are doing.
       Unsuitable settings may cause serious performance degradation and even
       a system crash at any time during operation.


       Memory allocator system flags have the following syntax: _+_M_<_S_>_<_P_> _<_V_>
       where _<_S_> is a letter identifying a subsystem, _<_P_> is a parameter, and
       _<_V_> is the value to use. The flags can be passed to the Erlang emulator
       (eerrll) as command line arguments.

       System flags effecting specific allocators have an upper-case letter as
       _<_S_>. The following letters are used for the currently present
       allocators:

         * _B_: _b_i_n_a_r_y___a_l_l_o_c

         * _C_: _s_b_m_b_c___a_l_l_o_c

         * _D_: _s_t_d___a_l_l_o_c

         * _E_: _e_t_s___a_l_l_o_c

         * _F_: _f_i_x___a_l_l_o_c

         * _H_: _e_h_e_a_p___a_l_l_o_c

         * _L_: _l_l___a_l_l_o_c

         * _M_: _m_s_e_g___a_l_l_o_c

         * _R_: _d_r_i_v_e_r___a_l_l_o_c

         * _S_: _s_l___a_l_l_o_c

         * _T_: _t_e_m_p___a_l_l_o_c

         * _Y_: _s_y_s___a_l_l_o_c

       The following flags are available for configuration of _m_s_e_g___a_l_l_o_c:

         _+_M_M_a_m_c_b_f _<_s_i_z_e_>:
            Absolute max cache bad fit (in kilobytes). A segment in the memory
           segment cache is not reused if its size exceeds the requested size
           with more than the value of this parameter. Default value is 4096.

         _+_M_M_r_m_c_b_f _<_r_a_t_i_o_>:
            Relative max cache bad fit (in percent). A segment in the memory
           segment cache is not reused if its size exceeds the requested size
           with more than relative max cache bad fit percent of the requested
           size. Default value is 20.

         _+_M_M_m_c_s _<_a_m_o_u_n_t_>:
            Max cached segments. The maximum number of memory segments stored
           in the memory segment cache. Valid range is 0-30. Default value is
           5.

       The following flags are available for configuration of _s_y_s___a_l_l_o_c:

         _+_M_Y_e _t_r_u_e:
            Enable _s_y_s___a_l_l_o_c. Note: _s_y_s___a_l_l_o_c cannot be disabled.

         _+_M_Y_m _l_i_b_c:
           _m_a_l_l_o_c library to use. Currently only _l_i_b_c is available. _l_i_b_c
           enables the standard _l_i_b_c malloc implementation. By default _l_i_b_c is
           used.

         _+_M_Y_t_t _<_s_i_z_e_>:
            Trim threshold size (in kilobytes). This is the maximum amount of
           free memory at the top of the heap (allocated by _s_b_r_k) that will be
           kept by _m_a_l_l_o_c (not released to the operating system). When the
           amount of free memory at the top of the heap exceeds the trim
           threshold, _m_a_l_l_o_c will release it (by calling _s_b_r_k). Trim threshold
           is given in kilobytes. Default trim threshold is 128. _N_o_t_e_: This
           flag will only have any effect when the emulator has been linked
           with the GNU C library, and uses its _m_a_l_l_o_c implementation.

         _+_M_Y_t_p _<_s_i_z_e_>:
            Top pad size (in kilobytes). This is the amount of extra memory
           that will be allocated by _m_a_l_l_o_c when _s_b_r_k is called to get more
           memory from the operating system. Default top pad size is 0. _N_o_t_e_:
           This flag will only have any effect when the emulator has been
           linked with the GNU C library, and uses its _m_a_l_l_o_c implementation.

       The following flags are available for configuration of allocators based
       on _a_l_l_o_c___u_t_i_l. If _u is used as subsystem identifier (i.e., _<_S_> _= _u) all
       allocators based on _a_l_l_o_c___u_t_i_l will be effected. If _B, _D, _E, _F, _H, _L,
       _R, _S, or _T is used as subsystem identifier, only the specific allocator
       identified will be effected:

         _+_M_<_S_>_a_s _b_f_|_a_o_b_f_|_a_o_f_f_|_g_f_|_a_f:
            Allocation strategy. Valid strategies are _b_f (best fit), _a_o_b_f
           (address order best fit), _a_o_f_f (address order first fit), _g_f (good
           fit), and _a_f (a fit). See tthhee ddeessccrriippttiioonn ooff aallllooccaattiioonn ssttrraatteeggiieess
           in "the _a_l_l_o_c___u_t_i_l framework" section.

         _+_M_<_S_>_a_s_b_c_s_t _<_s_i_z_e_>:
            Absolute singleblock carrier shrink threshold (in kilobytes). When
           a block located in an _m_s_e_g___a_l_l_o_c singleblock carrier is shrunk, the
           carrier will be left unchanged if the amount of unused memory is
           less than this threshold; otherwise, the carrier will be shrunk.
           See also rrssbbccsstt.

         _+_M_<_S_>_e _t_r_u_e_|_f_a_l_s_e:
            Enable allocator _<_S_>.

         _+_M_<_S_>_l_m_b_c_s _<_s_i_z_e_>:
            Largest (_m_s_e_g___a_l_l_o_c) multiblock carrier size (in kilobytes). See
           tthhee ddeessccrriippttiioonn oonn hhooww ssiizzeess ffoorr mmsseegg__aalllloocc mmuullttiibblloocckk ccaarrrriieerrss aarree
           ddeecciiddeedd in "the _a_l_l_o_c___u_t_i_l framework" section.

         _+_M_<_S_>_m_b_c_g_s _<_r_a_t_i_o_>:
            (_m_s_e_g___a_l_l_o_c) multiblock carrier growth stages. See tthhee ddeessccrriippttiioonn
           oonn hhooww ssiizzeess ffoorr mmsseegg__aalllloocc mmuullttiibblloocckk ccaarrrriieerrss aarree ddeecciiddeedd in "the
           _a_l_l_o_c___u_t_i_l framework" section.

         _+_M_<_S_>_m_b_s_d _<_d_e_p_t_h_>:
            Max block search depth. This flag has effect only if the good fit
           strategy has been selected for allocator _<_S_>. When the good fit
           strategy is used, free blocks are placed in segregated free-lists.
           Each free list contains blocks of sizes in a specific range. The
           max block search depth sets a limit on the maximum number of blocks
           to inspect in a free list during a search for suitable block
           satisfying the request.

         _+_M_<_S_>_m_m_b_c_s _<_s_i_z_e_>:
            Main multiblock carrier size. Sets the size of the main multiblock
           carrier for allocator _<_S_>. The main multiblock carrier is allocated
           via _s_y_s___a_l_l_o_c and is never deallocated.

         _+_M_<_S_>_m_m_m_b_c _<_a_m_o_u_n_t_>:
            Max _m_s_e_g___a_l_l_o_c multiblock carriers. Maximum number of multiblock
           carriers allocated via _m_s_e_g___a_l_l_o_c by allocator _<_S_>. When this limit
           has been reached, new multiblock carriers will be allocated via
           _s_y_s___a_l_l_o_c.

         _+_M_<_S_>_m_m_s_b_c _<_a_m_o_u_n_t_>:
            Max _m_s_e_g___a_l_l_o_c singleblock carriers. Maximum number of singleblock
           carriers allocated via _m_s_e_g___a_l_l_o_c by allocator _<_S_>. When this limit
           has been reached, new singleblock carriers will be allocated via
           _s_y_s___a_l_l_o_c.

         _+_M_<_S_>_r_a_m_v _<_b_o_o_l_>:
            Realloc always moves. When enabled, reallocate operations will
           more or less be translated into an allocate, copy, free sequence.
           This often reduce memory fragmentation, but costs performance.

         _+_M_<_S_>_r_m_b_c_m_t _<_r_a_t_i_o_>:
            Relative multiblock carrier move threshold (in percent). When a
           block located in a multiblock carrier is shrunk, the block will be
           moved if the ratio of the size of the returned memory compared to
           the previous size is more than this threshold; otherwise, the block
           will be shrunk at current location.

         _+_M_<_S_>_r_s_b_c_m_t _<_r_a_t_i_o_>:
            Relative singleblock carrier move threshold (in percent). When a
           block located in a singleblock carrier is shrunk to a size smaller
           than the value of the ssbbcctt parameter, the block will be left
           unchanged in the singleblock carrier if the ratio of unused memory
           is less than this threshold; otherwise, it will be moved into a
           multiblock carrier.

         _+_M_<_S_>_r_s_b_c_s_t _<_r_a_t_i_o_>:
            Relative singleblock carrier shrink threshold (in percent). When a
           block located in an _m_s_e_g___a_l_l_o_c singleblock carrier is shrunk, the
           carrier will be left unchanged if the ratio of unused memory is
           less than this threshold; otherwise, the carrier will be shrunk.
           See also aassbbccsstt.

         _+_M_<_S_>_s_b_c_t _<_s_i_z_e_>:
            Singleblock carrier threshold. Blocks larger than this threshold
           will be placed in singleblock carriers. Blocks smaller than this
           threshold will be placed in multiblock carriers.

         _+_M_<_S_>_s_b_m_b_c_s _<_s_i_z_e_>:
            Small block multiblock carrier size (in bytes). Memory blocks
           smaller than the small block multiblock carrier threshold (ssbbmmbbcctt)
           will be placed in multiblock carriers used for small blocks only.
           This parameter determines the size of such carriers.

         _+_M_<_S_>_s_b_m_b_c_t _<_s_i_z_e_>:
            Small block multiblock carrier threshold (in bytes). Memory blocks
           smaller than this threshold will be placed in multiblock carriers
           used for small blocks only.

         _+_M_<_S_>_s_m_b_c_s _<_s_i_z_e_>:
            Smallest (_m_s_e_g___a_l_l_o_c) multiblock carrier size (in kilobytes). See
           tthhee ddeessccrriippttiioonn oonn hhooww ssiizzeess ffoorr mmsseegg__aalllloocc mmuullttiibblloocckk ccaarrrriieerrss aarree
           ddeecciiddeedd in "the _a_l_l_o_c___u_t_i_l framework" section.

         _+_M_<_S_>_t _t_r_u_e_|_f_a_l_s_e:
           Multiple, thread specific instances of the allocator. This option
           will only have any effect on the runtime system with SMP support.
           Default behaviour on the runtime system with SMP support:

           _l_l___a_l_l_o_c:
             _1 instance.

           OOtthheerr aallllooccaattoorrss::
             _N_o_S_c_h_e_d_u_l_e_r_s_+_1 instances. Each scheduler will use a lock-free
             instance of its own and other threads will use a common instance.

           It was previously (before ERTS version 5.9) possible to configure a
           smaller amount of thread specific instances than schedulers. This
           is, however, not possible any more.

       Currently the following flags are available for configuration of
       _a_l_l_o_c___u_t_i_l, i.e. all allocators based on _a_l_l_o_c___u_t_i_l will be effected:

         _+_M_u_y_c_s _<_s_i_z_e_>:
           _s_y_s___a_l_l_o_c carrier size. Carriers allocated via _s_y_s___a_l_l_o_c will be
           allocated in sizes which are multiples of the _s_y_s___a_l_l_o_c carrier
           size. This is not true for main multiblock carriers and carriers
           allocated during a memory shortage, though.

         _+_M_u_m_m_c _<_a_m_o_u_n_t_>:
            Max _m_s_e_g___a_l_l_o_c carriers. Maximum number of carriers placed in
           separate memory segments. When this limit has been reached, new
           carriers will be placed in memory retrieved from _s_y_s___a_l_l_o_c.

       Instrumentation flags:

         _+_M_i_m _t_r_u_e_|_f_a_l_s_e:
            A map over current allocations is kept by the emulator. The
           allocation map can be retrieved via the _i_n_s_t_r_u_m_e_n_t module. _+_M_i_m
           _t_r_u_e implies _+_M_i_s _t_r_u_e. _+_M_i_m _t_r_u_e is the same as --iinnssttrr.

         _+_M_i_s _t_r_u_e_|_f_a_l_s_e:
            Status over allocated memory is kept by the emulator. The
           allocation status can be retrieved via the _i_n_s_t_r_u_m_e_n_t module.

         _+_M_i_t _X:
            Reserved for future use. Do _n_o_t use this flag.

   NNoottee::
       When instrumentation of the emulator is enabled, the emulator uses more
       memory and runs slower.


       Other flags:

         _+_M_e_a _m_i_n_|_m_a_x_|_r_9_c_|_r_1_0_b_|_r_1_1_b_|_c_o_n_f_i_g:


           _m_i_n:
              Disables all allocators that can be disabled.

           _m_a_x:
              Enables all allocators (currently default).

           _r_9_c_|_r_1_0_b_|_r_1_1_b:
              Configures all allocators as they were configured in respective
             OTP release. These will eventually be removed.

           _c_o_n_f_i_g:
              Disables features that cannot be enabled while creating an
             allocator configuration with eerrttss__aalllloocc__ccoonnffiigg((33)). Note, this
             option should only be used while running _e_r_t_s___a_l_l_o_c___c_o_n_f_i_g, _n_o_t
             when using the created configuration.

       Only some default values have been presented here.
       eerrllaanngg::ssyysstteemm__iinnffoo((aallllooccaattoorr)), and eerrllaanngg::ssyysstteemm__iinnffoo(({{aallllooccaattoorr,,
       AAlllloocc}})) can be used in order to obtain currently used settings and
       current status of the allocators.

   NNoottee::
       Most of these flags are highly implementation dependent, and they may
       be changed or removed without prior notice.

       _e_r_t_s___a_l_l_o_c is not obliged to strictly use the settings that have been
       passed to it (it may even ignore them).


       eerrttss__aalllloocc__ccoonnffiigg((33)) is a tool that can be used to aid creation of an
       _e_r_t_s___a_l_l_o_c configuration that is suitable for a limited number of
       runtime scenarios.

SSEEEE AALLSSOO
       eerrttss__aalllloocc__ccoonnffiigg((33)), eerrll((11)), iinnssttrruummeenntt((33)), eerrllaanngg((33))



Ericsson AB                       erts 5.9.2                     erts_alloc(3)
