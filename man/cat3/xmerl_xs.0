xmerl_xs(3)                Erlang Module Definition                xmerl_xs(3)



NNAAMMEE
       xmerl_xs -
              Erlang has similarities to XSLT since both languages
            have a functional programming approach.

DDEESSCCRRIIPPTTIIOONN
       Erlang has similarities to XSLT since both languages have a functional
       programming approach. Using _x_m_e_r_l___x_p_a_t_h it is possible to write XSLT
       like transforms in Erlang.

       XSLT stylesheets are often used when transforming XML documents, to
       other XML documents or (X)HTML for presentation. XSLT contains quite
       many functions and learning them all may take some effort. This
       document assumes a basic level of understanding of XSLT.

       Since XSLT is based on a functional programming approach with pattern
       matching and recursion it is possible to write similar style sheets in
       Erlang. At least for basic transforms. This document describes how to
       use the XPath implementation together with Erlangs pattern matching and
       a couple of functions to write XSLT like transforms.

       This approach is probably easier for an Erlanger but if you need to use
       real XSLT stylesheets in order to "comply to the standard" there is an
       adapter available to the Sablotron XSLT package which is written i C++.
       See also the Tutorial.

EEXXPPOORRTTSS
       bbuuiilltt__iinn__rruulleess((FFuunn,, EE)) -->> LLiisstt

              The default fallback behaviour. Template funs should end with:
              _t_e_m_p_l_a_t_e_(_E_) _-_> _b_u_i_l_t___i_n___r_u_l_e_s_(_f_u_n _t_e_m_p_l_a_t_e_/_1_, _E_).

       sseelleecctt((SSttrriinngg::::ssttrriinngg(()),, EE)) -->> EE

              Extracts the nodes from the xml tree according to XPath.

              _S_e_e _a_l_s_o_: vvaalluuee__ooff//11.

       vvaalluuee__ooff((EE)) -->> LLiisstt

              Types:

                 E = unknown()

              Concatenates all text nodes within the tree.

              Example:


                <xsl:template match="title">
                  <div align="center">
                    <h1><xsl:value-of select="." /></h1>
                  </div>
                </xsl:template>


              becomes:


                 template(E = #xmlElement{name='title'}) ->
                   ["<div align="center"><h1>",
                     value_of(select(".", E)), "</h1></div>"]


       xxssllaappppllyy((FFuunn::::FFuunnccttiioonn,, EELLiisstt::::lliisstt(()))) -->> LLiisstt

              Types:

                 Function = () -> list()

              xslapply is a wrapper to make things look similar to xsl:apply-
              templates.

              Example, original XSLT:


                <xsl:template match="doc/title">
                  <h1>
                    <xsl:apply-templates/>
                  </h1>
                </xsl:template>


              becomes in Erlang:


                template(E = #xmlElement{ parents=[{'doc',_}|_], name='title'}) ->
                  ["<h1>",
                   xslapply(fun template/1, E),
                   "</h1>"];


AAUUTTHHOORRSS
       _<_>



                                  xmerl 1.3.2                      xmerl_xs(3)
