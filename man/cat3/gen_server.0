gen_server(3)              Erlang Module Definition              gen_server(3)



NNAAMMEE
       gen_server - Generic Server Behaviour

DDEESSCCRRIIPPTTIIOONN
       A behaviour module for implementing the server of a client-server
       relation. A generic server process (gen_server) implemented using this
       module will have a standard set of interface functions and include
       functionality for tracing and error reporting. It will also fit into an
       OTP supervision tree. Refer to OOTTPP DDeessiiggnn PPrriinncciipplleess for more
       information.

       A gen_server assumes all specific parts to be located in a callback
       module exporting a pre-defined set of functions. The relationship
       between the behaviour functions and the callback functions can be
       illustrated as follows:

       gen_server module            Callback module
       -----------------            ---------------
       gen_server:start_link -----> Module:init/1

       gen_server:call
       gen_server:multi_call -----> Module:handle_call/3

       gen_server:cast
       gen_server:abcast     -----> Module:handle_cast/2

       -                     -----> Module:handle_info/2

       -                     -----> Module:terminate/2

       -                     -----> Module:code_change/3

       If a callback function fails or returns a bad value, the gen_server
       will terminate.

       A gen_server handles system messages as documented in ssyyss((33)). The _s_y_s
       module can be used for debugging a gen_server.

       Note that a gen_server does not trap exit signals automatically, this
       must be explicitly initiated in the callback module.

       Unless otherwise stated, all functions in this module fail if the
       specified gen_server does not exist or if bad arguments are given.

       The gen_server process can go into hibernation (see eerrllaanngg((33))) if a
       callback function specifies _'_h_i_b_e_r_n_a_t_e_' instead of a timeout value.
       This might be useful if the server is expected to be idle for a long
       time. However this feature should be used with care as hibernation
       implies at least two garbage collections (when hibernating and shortly
       after waking up) and is not something you'd want to do between each
       call to a busy server.

EEXXPPOORRTTSS
       ssttaarrtt__lliinnkk((MMoodduullee,, AArrggss,, OOppttiioonnss)) -->> RReessuulltt
       ssttaarrtt__lliinnkk((SSeerrvveerrNNaammee,, MMoodduullee,, AArrggss,, OOppttiioonnss)) -->> RReessuulltt

              Types:

                 ServerName = {local,Name} | {global,GlobalName} |
                 {via,Module,ViaName}
                  Name = atom()
                  GlobalName = ViaName = term()
                 Module = atom()
                 Args = term()
                 Options = [Option]
                  Option = {debug,Dbgs} | {timeout,Time} | {spawn_opt,SOpts}
                  Dbgs = [Dbg]
                  Dbg = trace | log | statistics | {log_to_file,FileName} |
                 {install,{Func,FuncState}}
                  SOpts = [term()]
                 Result = {ok,Pid} | ignore | {error,Error}
                  Pid = pid()
                  Error = {already_started,Pid} | term()

              Creates a gen_server process as part of a supervision tree. The
              function should be called, directly or indirectly, by the
              supervisor. It will, among other things, ensure that the
              gen_server is linked to the supervisor.

              The gen_server process calls _M_o_d_u_l_e_:_i_n_i_t_/_1 to initialize. To
              ensure a synchronized start-up procedure, _s_t_a_r_t___l_i_n_k_/_3_,_4 does
              not return until _M_o_d_u_l_e_:_i_n_i_t_/_1 has returned.

              If _S_e_r_v_e_r_N_a_m_e_=_{_l_o_c_a_l_,_N_a_m_e_} the gen_server is registered locally
              as _N_a_m_e using _r_e_g_i_s_t_e_r_/_2. If _S_e_r_v_e_r_N_a_m_e_=_{_g_l_o_b_a_l_,_G_l_o_b_a_l_N_a_m_e_} the
              gen_server is registered globally as _G_l_o_b_a_l_N_a_m_e using
              _g_l_o_b_a_l_:_r_e_g_i_s_t_e_r___n_a_m_e_/_2. If no name is provided, the gen_server
              is not registered. If _E_v_e_n_t_M_g_r_N_a_m_e_=_{_v_i_a_,_M_o_d_u_l_e_,_V_i_a_N_a_m_e_}, the
              event manager will register with the registry represented by
              _M_o_d_u_l_e. The _M_o_d_u_l_e callback should export the functions
              _r_e_g_i_s_t_e_r___n_a_m_e_/_2, _u_n_r_e_g_i_s_t_e_r___n_a_m_e_/_1, _w_h_e_r_e_i_s___n_a_m_e_/_1 and _s_e_n_d_/_2,
              which should behave like the corresponding functions in _g_l_o_b_a_l.
              Thus, _{_v_i_a_,_g_l_o_b_a_l_,_G_l_o_b_a_l_N_a_m_e_} is a valid reference.

              _M_o_d_u_l_e is the name of the callback module.

              _A_r_g_s is an arbitrary term which is passed as the argument to
              _M_o_d_u_l_e_:_i_n_i_t_/_1.

              If the option _{_t_i_m_e_o_u_t_,_T_i_m_e_} is present, the gen_server is
              allowed to spend _T_i_m_e milliseconds initializing or it will be
              terminated and the start function will return _{_e_r_r_o_r_,_t_i_m_e_o_u_t_}.

              If the option _{_d_e_b_u_g_,_D_b_g_s_} is present, the corresponding _s_y_s
              function will be called for each item in _D_b_g_s. See ssyyss((33)).

              If the option _{_s_p_a_w_n___o_p_t_,_S_O_p_t_s_} is present, _S_O_p_t_s will be passed
              as option list to the _s_p_a_w_n___o_p_t BIF which is used to spawn the
              gen_server. See eerrllaanngg((33)).

          NNoottee::
              Using the spawn option _m_o_n_i_t_o_r is currently not allowed, but
              will cause the function to fail with reason _b_a_d_a_r_g.


              If the gen_server is successfully created and initialized the
              function returns _{_o_k_,_P_i_d_}, where _P_i_d is the pid of the
              gen_server. If there already exists a process with the specified
              _S_e_r_v_e_r_N_a_m_e the function returns _{_e_r_r_o_r_,_{_a_l_r_e_a_d_y___s_t_a_r_t_e_d_,_P_i_d_}_},
              where _P_i_d is the pid of that process.

              If _M_o_d_u_l_e_:_i_n_i_t_/_1 fails with _R_e_a_s_o_n, the function returns
              _{_e_r_r_o_r_,_R_e_a_s_o_n_}. If _M_o_d_u_l_e_:_i_n_i_t_/_1 returns _{_s_t_o_p_,_R_e_a_s_o_n_} or
              _i_g_n_o_r_e, the process is terminated and the function returns
              _{_e_r_r_o_r_,_R_e_a_s_o_n_} or _i_g_n_o_r_e, respectively.

       ssttaarrtt((MMoodduullee,, AArrggss,, OOppttiioonnss)) -->> RReessuulltt
       ssttaarrtt((SSeerrvveerrNNaammee,, MMoodduullee,, AArrggss,, OOppttiioonnss)) -->> RReessuulltt

              Types:

                 ServerName = {local,Name} | {global,GlobalName} |
                 {via,Module,ViaName}
                  Name = atom()
                  GlobalName = ViaName = term()
                 Module = atom()
                 Args = term()
                 Options = [Option]
                  Option = {debug,Dbgs} | {timeout,Time} | {spawn_opt,SOpts}
                  Dbgs = [Dbg]
                  Dbg = trace | log | statistics | {log_to_file,FileName} |
                 {install,{Func,FuncState}}
                  SOpts = [term()]
                 Result = {ok,Pid} | ignore | {error,Error}
                  Pid = pid()
                  Error = {already_started,Pid} | term()

              Creates a stand-alone gen_server process, i.e. a gen_server
              which is not part of a supervision tree and thus has no
              supervisor.

              See ssttaarrtt__lliinnkk//33,,44 for a description of arguments and return
              values.

       ccaallll((SSeerrvveerrRReeff,, RReeqquueesstt)) -->> RReeppllyy
       ccaallll((SSeerrvveerrRReeff,, RReeqquueesstt,, TTiimmeeoouutt)) -->> RReeppllyy

              Types:

                 ServerRef = Name | {Name,Node} | {global,GlobalName} |
                 {via,Module,ViaName} | pid()
                  Node = atom()
                  GlobalName = ViaName = term()
                 Request = term()
                 Timeout = int()>0 | infinity
                 Reply = term()

              Makes a synchronous call to the gen_server _S_e_r_v_e_r_R_e_f by sending
              a request and waiting until a reply arrives or a timeout occurs.
              The gen_server will call _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3 to handle the
              request.

              _S_e_r_v_e_r_R_e_f can be:

                * the pid,

                * _N_a_m_e, if the gen_server is locally registered,

                * _{_N_a_m_e_,_N_o_d_e_}, if the gen_server is locally registered at
                  another node, or

                * _{_g_l_o_b_a_l_,_G_l_o_b_a_l_N_a_m_e_}, if the gen_server is globally
                  registered.

                * _{_v_i_a_,_M_o_d_u_l_e_,_V_i_a_N_a_m_e_}, if the gen_server is registered
                  through an alternative process registry.

              _R_e_q_u_e_s_t is an arbitrary term which is passed as one of the
              arguments to _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3.

              _T_i_m_e_o_u_t is an integer greater than zero which specifies how many
              milliseconds to wait for a reply, or the atom _i_n_f_i_n_i_t_y to wait
              indefinitely. Default value is 5000. If no reply is received
              within the specified time, the function call fails. If the
              caller catches the failure and continues running, and the server
              is just late with the reply, it may arrive at any time later
              into the caller's message queue. The caller must in this case be
              prepared for this and discard any such garbage messages that are
              two element tuples with a reference as the first element.

              The return value _R_e_p_l_y is defined in the return value of
              _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3.

              The call may fail for several reasons, including timeout and the
              called gen_server dying before or during the call.

              The ancient behaviour of sometimes consuming the server exit
              message if the server died during the call while linked to the
              client has been removed in OTP R12B/Erlang 5.6.

       mmuullttii__ccaallll((NNaammee,, RReeqquueesstt)) -->> RReessuulltt
       mmuullttii__ccaallll((NNooddeess,, NNaammee,, RReeqquueesstt)) -->> RReessuulltt
       mmuullttii__ccaallll((NNooddeess,, NNaammee,, RReeqquueesstt,, TTiimmeeoouutt)) -->> RReessuulltt

              Types:

                 Nodes = [Node]
                  Node = atom()
                 Name = atom()
                 Request = term()
                 Timeout = int()>=0 | infinity
                 Result = {Replies,BadNodes}
                  Replies = [{Node,Reply}]
                  Reply = term()
                 BadNodes = [Node]

              Makes a synchronous call to all gen_servers locally registered
              as _N_a_m_e at the specified nodes by first sending a request to
              every node and then waiting for the replies. The gen_servers
              will call _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3 to handle the request.

              The function returns a tuple _{_R_e_p_l_i_e_s_,_B_a_d_N_o_d_e_s_} where _R_e_p_l_i_e_s is
              a list of _{_N_o_d_e_,_R_e_p_l_y_} and _B_a_d_N_o_d_e_s is a list of node that
              either did not exist, or where the gen_server _N_a_m_e did not exist
              or did not reply.

              _N_o_d_e_s is a list of node names to which the request should be
              sent. Default value is the list of all known nodes
              _[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_].

              _N_a_m_e is the locally registered name of each gen_server.

              _R_e_q_u_e_s_t is an arbitrary term which is passed as one of the
              arguments to _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3.

              _T_i_m_e_o_u_t is an integer greater than zero which specifies how many
              milliseconds to wait for each reply, or the atom _i_n_f_i_n_i_t_y to
              wait indefinitely. Default value is _i_n_f_i_n_i_t_y. If no reply is
              received from a node within the specified time, the node is
              added to _B_a_d_N_o_d_e_s.

              When a reply _R_e_p_l_y is received from the gen_server at a node
              _N_o_d_e, _{_N_o_d_e_,_R_e_p_l_y_} is added to _R_e_p_l_i_e_s. _R_e_p_l_y is defined in the
              return value of _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3.

          WWaarrnniinngg::
              If one of the nodes is not capable of process monitors, for
              example C or Java nodes, and the gen_server is not started when
              the requests are sent, but starts within 2 seconds, this
              function waits the whole _T_i_m_e_o_u_t, which may be infinity.

              This problem does not exist if all nodes are Erlang nodes.


              To avoid that late answers (after the timeout) pollutes the
              caller's message queue, a middleman process is used to do the
              actual calls. Late answers will then be discarded when they
              arrive to a terminated process.

       ccaasstt((SSeerrvveerrRReeff,, RReeqquueesstt)) -->> ookk

              Types:

                 ServerRef = Name | {Name,Node} | {global,GlobalName} |
                 {via,Module,ViaName} | pid()
                  Node = atom()
                  GlobalName = ViaName = term()
                 Request = term()

              Sends an asynchronous request to the gen_server _S_e_r_v_e_r_R_e_f and
              returns _o_k immediately, ignoring if the destination node or
              gen_server does not exist. The gen_server will call
              _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_s_t_/_2 to handle the request.

              See ccaallll//22,,33 for a description of _S_e_r_v_e_r_R_e_f.

              _R_e_q_u_e_s_t is an arbitrary term which is passed as one of the
              arguments to _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_s_t_/_2.

       aabbccaasstt((NNaammee,, RReeqquueesstt)) -->> aabbccaasstt
       aabbccaasstt((NNooddeess,, NNaammee,, RReeqquueesstt)) -->> aabbccaasstt

              Types:

                 Nodes = [Node]
                  Node = atom()
                 Name = atom()
                 Request = term()

              Sends an asynchronous request to the gen_servers locally
              registered as _N_a_m_e at the specified nodes. The function returns
              immediately and ignores nodes that do not exist, or where the
              gen_server _N_a_m_e does not exist. The gen_servers will call
              _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_s_t_/_2 to handle the request.

              See mmuullttii__ccaallll//22,,33,,44 for a description of the arguments.

       rreeppllyy((CClliieenntt,, RReeppllyy)) -->> RReessuulltt

              Types:

                 Client - see below
                 Reply = term()
                 Result = term()

              This function can be used by a gen_server to explicitly send a
              reply to a client that called _c_a_l_l_/_2_,_3 or _m_u_l_t_i___c_a_l_l_/_2_,_3_,_4, when
              the reply cannot be defined in the return value of
              _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3.

              _C_l_i_e_n_t must be the _F_r_o_m argument provided to the callback
              function. _R_e_p_l_y is an arbitrary term, which will be given back
              to the client as the return value of _c_a_l_l_/_2_,_3 or
              _m_u_l_t_i___c_a_l_l_/_2_,_3_,_4.

              The return value _R_e_s_u_l_t is not further defined, and should
              always be ignored.

       eenntteerr__lloooopp((MMoodduullee,, OOppttiioonnss,, SSttaattee))
       eenntteerr__lloooopp((MMoodduullee,, OOppttiioonnss,, SSttaattee,, SSeerrvveerrNNaammee))
       eenntteerr__lloooopp((MMoodduullee,, OOppttiioonnss,, SSttaattee,, TTiimmeeoouutt))
       eenntteerr__lloooopp((MMoodduullee,, OOppttiioonnss,, SSttaattee,, SSeerrvveerrNNaammee,, TTiimmeeoouutt))

              Types:

                 Module = atom()
                 Options = [Option]
                  Option = {debug,Dbgs}
                  Dbgs = [Dbg]
                  Dbg = trace | log | statistics
                  | {log_to_file,FileName} | {install,{Func,FuncState}}
                 State = term()
                 ServerName = {local,Name} | {global,GlobalName} |
                 {via,Module,ViaName}
                  Name = atom()
                  GlobalName = ViaName = term()
                 Timeout = int() | infinity

              Makes an existing process into a gen_server. Does not return,
              instead the calling process will enter the gen_server receive
              loop and become a gen_server process. The process _m_u_s_t have been
              started using one of the start functions in _p_r_o_c___l_i_b, see
              pprroocc__lliibb((33)). The user is responsible for any initialization of
              the process, including registering a name for it.

              This function is useful when a more complex initialization
              procedure is needed than the gen_server behaviour provides.

              _M_o_d_u_l_e, _O_p_t_i_o_n_s and _S_e_r_v_e_r_N_a_m_e have the same meanings as when
              calling ggeenn__sseerrvveerr::ssttaarrtt[[__lliinnkk]]//33,,44. However, if _S_e_r_v_e_r_N_a_m_e is
              specified, the process must have been registered accordingly
              _b_e_f_o_r_e this function is called.

              _S_t_a_t_e and _T_i_m_e_o_u_t have the same meanings as in the return value
              of MMoodduullee::iinniitt//11. Also, the callback module _M_o_d_u_l_e does not need
              to export an _i_n_i_t_/_1 function.

              Failure: If the calling process was not started by a _p_r_o_c___l_i_b
              start function, or if it is not registered according to
              _S_e_r_v_e_r_N_a_m_e.

CCAALLLLBBAACCKK FFUUNNCCTTIIOONNSS
       The following functions should be exported from a _g_e_n___s_e_r_v_e_r callback
       module.

EEXXPPOORRTTSS
       MMoodduullee::iinniitt((AArrggss)) -->> RReessuulltt

              Types:

                 Args = term()
                 Result = {ok,State} | {ok,State,Timeout} |
                 {ok,State,hibernate}
                  | {stop,Reason} | ignore
                  State = term()
                  Timeout = int()>=0 | infinity
                  Reason = term()

              Whenever a gen_server is started using ggeenn__sseerrvveerr::ssttaarrtt//33,,44 or
              ggeenn__sseerrvveerr::ssttaarrtt__lliinnkk//33,,44, this function is called by the new
              process to initialize.

              _A_r_g_s is the _A_r_g_s argument provided to the start function.

              If the initialization is successful, the function should return
              _{_o_k_,_S_t_a_t_e_}, _{_o_k_,_S_t_a_t_e_,_T_i_m_e_o_u_t_} or _{_o_k_,_S_t_a_t_e_,_h_i_b_e_r_n_a_t_e_}, where
              _S_t_a_t_e is the internal state of the gen_server.

              If an integer timeout value is provided, a timeout will occur
              unless a request or a message is received within _T_i_m_e_o_u_t
              milliseconds. A timeout is represented by the atom _t_i_m_e_o_u_t which
              should be handled by the _h_a_n_d_l_e___i_n_f_o_/_2 callback function. The
              atom _i_n_f_i_n_i_t_y can be used to wait indefinitely, this is the
              default value.

              If _h_i_b_e_r_n_a_t_e is specified instead of a timeout value, the
              process will go into hibernation when waiting for the next
              message to arrive (by calling pprroocc__lliibb::hhiibbeerrnnaattee//33).

              If something goes wrong during the initialization the function
              should return _{_s_t_o_p_,_R_e_a_s_o_n_} where _R_e_a_s_o_n is any term, or _i_g_n_o_r_e.

       MMoodduullee::hhaannddllee__ccaallll((RReeqquueesstt,, FFrroomm,, SSttaattee)) -->> RReessuulltt

              Types:

                 Request = term()
                 From = {pid(),Tag}
                 State = term()
                 Result = {reply,Reply,NewState} |
                 {reply,Reply,NewState,Timeout}
                  | {reply,Reply,NewState,hibernate}
                  | {noreply,NewState} | {noreply,NewState,Timeout}
                  | {noreply,NewState,hibernate}
                  | {stop,Reason,Reply,NewState} | {stop,Reason,NewState}
                  Reply = term()
                  NewState = term()
                  Timeout = int()>=0 | infinity
                  Reason = term()

              Whenever a gen_server receives a request sent using
              ggeenn__sseerrvveerr::ccaallll//22,,33 or ggeenn__sseerrvveerr::mmuullttii__ccaallll//22,,33,,44, this
              function is called to handle the request.

              _R_e_q_u_e_s_t is the _R_e_q_u_e_s_t argument provided to _c_a_l_l or _m_u_l_t_i___c_a_l_l.

              _F_r_o_m is a tuple _{_P_i_d_,_T_a_g_} where _P_i_d is the pid of the client and
              _T_a_g is a unique tag.

              _S_t_a_t_e is the internal state of the gen_server.

              If the function returns _{_r_e_p_l_y_,_R_e_p_l_y_,_N_e_w_S_t_a_t_e_},
              _{_r_e_p_l_y_,_R_e_p_l_y_,_N_e_w_S_t_a_t_e_,_T_i_m_e_o_u_t_} or
              _{_r_e_p_l_y_,_R_e_p_l_y_,_N_e_w_S_t_a_t_e_,_h_i_b_e_r_n_a_t_e_}, _R_e_p_l_y will be given back to
              _F_r_o_m as the return value of _c_a_l_l_/_2_,_3 or included in the return
              value of _m_u_l_t_i___c_a_l_l_/_2_,_3_,_4. The gen_server then continues
              executing with the possibly updated internal state _N_e_w_S_t_a_t_e. See
              _M_o_d_u_l_e_:_i_n_i_t_/_1 for a description of _T_i_m_e_o_u_t and _h_i_b_e_r_n_a_t_e.

              If the functions returns _{_n_o_r_e_p_l_y_,_N_e_w_S_t_a_t_e_},
              _{_n_o_r_e_p_l_y_,_N_e_w_S_t_a_t_e_,_T_i_m_e_o_u_t_} or _{_n_o_r_e_p_l_y_,_N_e_w_S_t_a_t_e_,_h_i_b_e_r_n_a_t_e_}, the
              gen_server will continue executing with _N_e_w_S_t_a_t_e. Any reply to
              _F_r_o_m must be given explicitly using ggeenn__sseerrvveerr::rreeppllyy//22.

              If the function returns _{_s_t_o_p_,_R_e_a_s_o_n_,_R_e_p_l_y_,_N_e_w_S_t_a_t_e_}, _R_e_p_l_y will
              be given back to _F_r_o_m. If the function returns
              _{_s_t_o_p_,_R_e_a_s_o_n_,_N_e_w_S_t_a_t_e_}, any reply to _F_r_o_m must be given
              explicitly using _g_e_n___s_e_r_v_e_r_:_r_e_p_l_y_/_2. The gen_server will then
              call _M_o_d_u_l_e_:_t_e_r_m_i_n_a_t_e_(_R_e_a_s_o_n_,_N_e_w_S_t_a_t_e_) and terminate.

       MMoodduullee::hhaannddllee__ccaasstt((RReeqquueesstt,, SSttaattee)) -->> RReessuulltt

              Types:

                 Request = term()
                 State = term()
                 Result = {noreply,NewState} | {noreply,NewState,Timeout}
                  | {noreply,NewState,hibernate}
                  | {stop,Reason,NewState}
                  NewState = term()
                  Timeout = int()>=0 | infinity
                  Reason = term()

              Whenever a gen_server receives a request sent using
              ggeenn__sseerrvveerr::ccaasstt//22 or ggeenn__sseerrvveerr::aabbccaasstt//22,,33, this function is
              called to handle the request.

              See _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3 for a description of the arguments and
              possible return values.

       MMoodduullee::hhaannddllee__iinnffoo((IInnffoo,, SSttaattee)) -->> RReessuulltt

              Types:

                 Info = timeout | term()
                 State = term()
                 Result = {noreply,NewState} | {noreply,NewState,Timeout}
                  | {noreply,NewState,hibernate}
                  | {stop,Reason,NewState}
                  NewState = term()
                  Timeout = int()>=0 | infinity
                  Reason = normal | term()

              This function is called by a gen_server when a timeout occurs or
              when it receives any other message than a synchronous or
              asynchronous request (or a system message).

              _I_n_f_o is either the atom _t_i_m_e_o_u_t, if a timeout has occurred, or
              the received message.

              See _M_o_d_u_l_e_:_h_a_n_d_l_e___c_a_l_l_/_3 for a description of the other
              arguments and possible return values.

       MMoodduullee::tteerrmmiinnaattee((RReeaassoonn,, SSttaattee))

              Types:

                 Reason = normal | shutdown | {shutdown,term()} | term()
                 State = term()

              This function is called by a gen_server when it is about to
              terminate. It should be the opposite of _M_o_d_u_l_e_:_i_n_i_t_/_1 and do any
              necessary cleaning up. When it returns, the gen_server
              terminates with _R_e_a_s_o_n. The return value is ignored.

              _R_e_a_s_o_n is a term denoting the stop reason and _S_t_a_t_e is the
              internal state of the gen_server.

              _R_e_a_s_o_n depends on why the gen_server is terminating. If it is
              because another callback function has returned a stop tuple
              _{_s_t_o_p_,_._._}, _R_e_a_s_o_n will have the value specified in that tuple.
              If it is due to a failure, _R_e_a_s_o_n is the error reason.

              If the gen_server is part of a supervision tree and is ordered
              by its supervisor to terminate, this function will be called
              with _R_e_a_s_o_n_=_s_h_u_t_d_o_w_n if the following conditions apply:

                * the gen_server has been set to trap exit signals, and

                * the shutdown strategy as defined in the supervisor's child
                  specification is an integer timeout value, not _b_r_u_t_a_l___k_i_l_l.

              Even if the gen_server is _n_o_t part of a supervision tree, this
              function will be called if it receives an _'_E_X_I_T_' message from
              its parent. _R_e_a_s_o_n will be the same as in the _'_E_X_I_T_' message.

              Otherwise, the gen_server will be immediately terminated.

              Note that for any other reason than _n_o_r_m_a_l, _s_h_u_t_d_o_w_n, or
              _{_s_h_u_t_d_o_w_n_,_T_e_r_m_} the gen_server is assumed to terminate due to an
              error and an error report is issued using eerrrroorr__llooggggeerr::ffoorrmmaatt//22.

       MMoodduullee::ccooddee__cchhaannggee((OOllddVVssnn,, SSttaattee,, EExxttrraa)) -->> {{ookk,, NNeewwSSttaattee}} || {{eerrrroorr,,
       RReeaassoonn}}

              Types:

                 OldVsn = Vsn | {down, Vsn}
                  Vsn = term()
                 State = NewState = term()
                 Extra = term()
                 Reason = term()

              This function is called by a gen_server when it should update
              its internal state during a release upgrade/downgrade, i.e. when
              the instruction _{_u_p_d_a_t_e_,_M_o_d_u_l_e_,_C_h_a_n_g_e_,_._._._} where
              _C_h_a_n_g_e_=_{_a_d_v_a_n_c_e_d_,_E_x_t_r_a_} is given in the _a_p_p_u_p file. See OOTTPP
              DDeessiiggnn PPrriinncciipplleess for more information.

              In the case of an upgrade, _O_l_d_V_s_n is _V_s_n, and in the case of a
              downgrade, _O_l_d_V_s_n is _{_d_o_w_n_,_V_s_n_}. _V_s_n is defined by the _v_s_n
              attribute(s) of the old version of the callback module _M_o_d_u_l_e.
              If no such attribute is defined, the version is the checksum of
              the BEAM file.

              _S_t_a_t_e is the internal state of the gen_server.

              _E_x_t_r_a is passed as-is from the _{_a_d_v_a_n_c_e_d_,_E_x_t_r_a_} part of the
              update instruction.

              If successful, the function shall return the updated internal
              state.

              If the function returns _{_e_r_r_o_r_,_R_e_a_s_o_n_}, the ongoing upgrade will
              fail and roll back to the old release.

       MMoodduullee::ffoorrmmaatt__ssttaattuuss((OOpptt,, [[PPDDiicctt,, SSttaattee]])) -->> SSttaattuuss

              Types:

                 Opt = normal | terminate
                 PDict = [{Key, Value}]
                 State = term()
                 Status = term()

          NNoottee::
              This callback is optional, so callback modules need not export
              it. The gen_server module provides a default implementation of
              this function that returns the callback module state.


              This function is called by a gen_server process when:

                * One of ssyyss::ggeett__ssttaattuuss//11,,22 is invoked to get the gen_server
                  status. _O_p_t is set to the atom _n_o_r_m_a_l for this case.

                * The gen_server terminates abnormally and logs an error. _O_p_t
                  is set to the atom _t_e_r_m_i_n_a_t_e for this case.

              This function is useful for customising the form and appearance
              of the gen_server status for these cases. A callback module
              wishing to customise the _s_y_s_:_g_e_t___s_t_a_t_u_s_/_1_,_2 return value as well
              as how its status appears in termination error logs exports an
              instance of _f_o_r_m_a_t___s_t_a_t_u_s_/_2 that returns a term describing the
              current status of the gen_server.

              _P_D_i_c_t is the current value of the gen_server's process
              dictionary.

              _S_t_a_t_e is the internal state of the gen_server.

              The function should return _S_t_a_t_u_s, a term that customises the
              details of the current state and status of the gen_server. There
              are no restrictions on the form _S_t_a_t_u_s can take, but for the
              _s_y_s_:_g_e_t___s_t_a_t_u_s_/_1_,_2 case (when _O_p_t is _n_o_r_m_a_l), the recommended
              form for the _S_t_a_t_u_s value is _[_{_d_a_t_a_, _[_{_"_S_t_a_t_e_"_, _T_e_r_m_}_]_}_] where
              _T_e_r_m provides relevant details of the gen_server state.
              Following this recommendation isn't required, but doing so will
              make the callback module status consistent with the rest of the
              _s_y_s_:_g_e_t___s_t_a_t_u_s_/_1_,_2 return value.

              One use for this function is to return compact alternative state
              representations to avoid having large state terms printed in
              logfiles.

SSEEEE AALLSSOO
       ggeenn__eevveenntt((33)), ggeenn__ffssmm((33)), ssuuppeerrvviissoorr((33)), pprroocc__lliibb((33)), ssyyss((33))



Ericsson AB                      stdlib 1.18.2                   gen_server(3)
