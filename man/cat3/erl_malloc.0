erl_malloc(3)                 C Library Functions                erl_malloc(3)



NNAAMMEE
       erl_malloc - Memory Allocation Functions

DDEESSCCRRIIPPTTIIOONN
       This module provides functions for allocating and deallocating memory.

EEXXPPOORRTTSS
       EETTEERRMM **eerrll__aalllloocc__eetteerrmm((eettyyppee))

              Types:

                 unsigned char etype;

              This function allocates an _(_E_T_E_R_M_) structure. Specify _e_t_y_p_e as
              one of the following constants:

                * ERL_INTEGER

                * ERL_U_INTEGER _/_* _u_n_s_i_g_n_e_d _i_n_t_e_g_e_r _*_/

                * ERL_ATOM

                * ERL_PID _/_* _E_r_l_a_n_g _p_r_o_c_e_s_s _i_d_e_n_t_i_f_i_e_r _*_/

                * ERL_PORT

                * ERL_REF _/_* _E_r_l_a_n_g _r_e_f_e_r_e_n_c_e _*_/

                * ERL_LIST

                * ERL_EMPTY_LIST

                * ERL_TUPLE

                * ERL_BINARY

                * ERL_FLOAT

                * ERL_VARIABLE

                * ERL_SMALL_BIG _/_* _b_i_g_n_u_m _*_/

                * ERL_U_SMALL_BIG _/_* _b_i_g_n_u_m _*_/

              _E_R_L___S_M_A_L_L___B_I_G and _E_R_L___U___S_M_A_L_L___B_I_G are for creating Erlang
              _b_i_g_n_u_m_s, which can contain integers of arbitrary size. The size
              of an integer in Erlang is machine dependent, but in general any
              integer larger than 2^28 requires a bignum.

       vvooiidd eerrll__eetteerrmm__rreelleeaassee((vvooiidd))

              Clears the freelist, where blocks are placed when they are
              released by _e_r_l___f_r_e_e___t_e_r_m_(_) and _e_r_l___f_r_e_e___c_o_m_p_o_u_n_d_(_).

       vvooiidd eerrll__eetteerrmm__ssttaattiissttiiccss((aallllooccaatteedd,, ffrreeeedd))

              Types:

                 long *allocated;
                 long *freed;

              _a_l_l_o_c_a_t_e_d and _f_r_e_e_d are initialized to contain information about
              the fix-allocator used to allocate ETERM components. _a_l_l_o_c_a_t_e_d
              is the number of blocks currently allocated to ETERM objects.
              _f_r_e_e_d is the length of the freelist, where blocks are placed
              when they are released by _e_r_l___f_r_e_e___t_e_r_m_(_) and
              _e_r_l___f_r_e_e___c_o_m_p_o_u_n_d_(_).

       vvooiidd eerrll__ffrreeee__aarrrraayy((aarrrraayy,, ssiizzee))

              Types:

                 ETERM **array;
                 int size;

              This function frees an array of Erlang terms.

              _a_r_r_a_y is an array of ETERM* objects.

              _s_i_z_e is the number of terms in the array.

       vvooiidd eerrll__ffrreeee__tteerrmm((tt))

              Types:

                 ETERM *t;

              Use this function to free an Erlang term.

       vvooiidd eerrll__ffrreeee__ccoommppoouunndd((tt))

              Types:

                 ETERM *t;

              Normally it is the programmer's responsibility to free each
              Erlang term that has been returned from any of the _e_r_l___i_n_t_e_r_f_a_c_e
              functions. However since many of the functions that build new
              Erlang terms in fact share objects with other existing terms, it
              may be difficult for the programmer to maintain pointers to all
              such terms in order to free them individually.

              _e_r_l___f_r_e_e___c_o_m_p_o_u_n_d_(_) will recursively free all of the sub-terms
              associated with a given Erlang term, regardless of whether we
              are still holding pointers to the sub-terms.

              There is an example in the User Manual under "Building Terms and
              Patterns"

       vvooiidd eerrll__mmaalllloocc((ssiizzee))

              Types:

                 long size;

              This function calls the standard _m_a_l_l_o_c_(_) function.

       vvooiidd eerrll__ffrreeee((ppttrr))

              Types:

                 void *ptr;

              This function calls the standard _f_r_e_e_(_) function.



Ericsson AB                   erl_interface 3.7.8                erl_malloc(3)
