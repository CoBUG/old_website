rpc(3)                     Erlang Module Definition                     rpc(3)



NNAAMMEE
       rpc - Remote Procedure Call Services

DDEESSCCRRIIPPTTIIOONN
       This module contains services which are similar to remote procedure
       calls. It also contains broadcast facilities and parallel evaluators. A
       remote procedure call is a method to call a function on a remote node
       and collect the answer. It is used for collecting information on a
       remote node, or for running a function with some specific side effects
       on the remote node.

DDAATTAA TTYYPPEESS
       kkeeyy(())

              As returned by _a_s_y_n_c___c_a_l_l_/_4.

EEXXPPOORRTTSS
       ccaallll((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> RReess || {{bbaaddrrppcc,, RReeaassoonn}}

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Res = Reason = term()

              Evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) on the node _N_o_d_e and
              returns the corresponding value _R_e_s, or _{_b_a_d_r_p_c_, _R_e_a_s_o_n_} if the
              call fails.

       ccaallll((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss,, TTiimmeeoouutt)) -->>
               RReess || {{bbaaddrrppcc,, RReeaassoonn}}

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Res = Reason = term()
                 Timeout = timeout()

              Evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) on the node _N_o_d_e and
              returns the corresponding value _R_e_s, or _{_b_a_d_r_p_c_, _R_e_a_s_o_n_} if the
              call fails. _T_i_m_e_o_u_t is a timeout value in milliseconds. If the
              call times out, _R_e_a_s_o_n is _t_i_m_e_o_u_t.

              If the reply arrives after the call times out, no message will
              contaminate the caller's message queue, since this function
              spawns off a middleman process to act as (a void) destination
              for such an orphan reply. This feature also makes this function
              more expensive than _c_a_l_l_/_4 at the caller's end.

       bblloocckk__ccaallll((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> RReess || {{bbaaddrrppcc,, RReeaassoonn}}

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Res = Reason = term()

              Like _c_a_l_l_/_4, but the RPC server at _N_o_d_e does not create a
              separate process to handle the call. Thus, this function can be
              used if the intention of the call is to block the RPC server
              from any other incoming requests until the request has been
              handled. The function can also be used for efficiency reasons
              when very small fast functions are evaluated, for example BIFs
              that are guaranteed not to suspend.

       bblloocckk__ccaallll((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss,, TTiimmeeoouutt)) -->>
                     RReess || {{bbaaddrrppcc,, RReeaassoonn}}

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Res = Reason = term()
                 Timeout = timeout()

              Like _b_l_o_c_k___c_a_l_l_/_4, but with a timeout value in the same manner
              as _c_a_l_l_/_5.

       aassyynncc__ccaallll((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> KKeeyy

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Key = kkeeyy(())

              Implements _c_a_l_l _s_t_r_e_a_m_s _w_i_t_h _p_r_o_m_i_s_e_s, a type of RPC which does
              not suspend the caller until the result is finished. Instead, a
              key is returned which can be used at a later stage to collect
              the value. The key can be viewed as a promise to deliver the
              answer.

              In this case, the key _K_e_y is returned, which can be used in a
              subsequent call to _y_i_e_l_d_/_1 or _n_b___y_i_e_l_d_/_1_,_2 to retrieve the value
              of evaluating _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) on the node _N_o_d_e.

       yyiieelldd((KKeeyy)) -->> RReess || {{bbaaddrrppcc,, RReeaassoonn}}

              Types:

                 Key = kkeeyy(())
                 Res = Reason = term()

              Returns the promised answer from a previous _a_s_y_n_c___c_a_l_l_/_4. If the
              answer is available, it is returned immediately. Otherwise, the
              calling process is suspended until the answer arrives from _N_o_d_e.

       nnbb__yyiieelldd((KKeeyy)) -->> {{vvaalluuee,, VVaall}} || ttiimmeeoouutt

              Types:

                 Key = kkeeyy(())
                 Val = (Res :: term()) | {badrpc, Reason :: term()}

              Equivalent to _n_b___y_i_e_l_d_(_K_e_y_, _0_).

       nnbb__yyiieelldd((KKeeyy,, TTiimmeeoouutt)) -->> {{vvaalluuee,, VVaall}} || ttiimmeeoouutt

              Types:

                 Key = kkeeyy(())
                 Timeout = timeout()
                 Val = (Res :: term()) | {badrpc, Reason :: term()}

              This is a non-blocking version of _y_i_e_l_d_/_1. It returns the tuple
              _{_v_a_l_u_e_, _V_a_l_} when the computation has finished, or _t_i_m_e_o_u_t when
              _T_i_m_e_o_u_t milliseconds has elapsed.

       mmuullttiiccaallll((MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> {{RReessLL,, BBaaddNNooddeess}}

              Types:

                 Module = module()
                 Function = atom()
                 Args = ResL = [term()]
                 BadNodes = [node()]

              Equivalent to _m_u_l_t_i_c_a_l_l_(_[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_]_, _M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_,
              _A_r_g_s_, _i_n_f_i_n_i_t_y_).

       mmuullttiiccaallll((NNooddeess,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> {{RReessLL,, BBaaddNNooddeess}}

              Types:

                 Nodes = [node()]
                 Module = module()
                 Function = atom()
                 Args = ResL = [term()]
                 BadNodes = [node()]

              Equivalent to _m_u_l_t_i_c_a_l_l_(_N_o_d_e_s_, _M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_,
              _i_n_f_i_n_i_t_y_).

       mmuullttiiccaallll((MMoodduullee,, FFuunnccttiioonn,, AArrggss,, TTiimmeeoouutt)) -->> {{RReessLL,, BBaaddNNooddeess}}

              Types:

                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Timeout = timeout()
                 ResL = [term()]
                 BadNodes = [node()]

              Equivalent to _m_u_l_t_i_c_a_l_l_(_[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_]_, _M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_,
              _A_r_g_s_, _T_i_m_e_o_u_t_).

       mmuullttiiccaallll((NNooddeess,, MMoodduullee,, FFuunnccttiioonn,, AArrggss,, TTiimmeeoouutt)) -->>
                    {{RReessLL,, BBaaddNNooddeess}}

              Types:

                 Nodes = [node()]
                 Module = module()
                 Function = atom()
                 Args = [term()]
                 Timeout = timeout()
                 ResL = [term()]
                 BadNodes = [node()]

              In contrast to an RPC, a multicall is an RPC which is sent
              concurrently from one client to multiple servers. This is useful
              for collecting some information from a set of nodes, or for
              calling a function on a set of nodes to achieve some side
              effects. It is semantically the same as iteratively making a
              series of RPCs on all the nodes, but the multicall is faster as
              all the requests are sent at the same time and are collected one
              by one as they come back.

              The function evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) on the
              specified nodes and collects the answers. It returns _{_R_e_s_L_,
              _B_a_d_N_o_d_e_s_}, where _B_a_d_N_o_d_e_s is a list of the nodes that terminated
              or timed out during computation, and _R_e_s_L is a list of the
              return values. _T_i_m_e_o_u_t is a time (integer) in milliseconds, or
              _i_n_f_i_n_i_t_y.

              The following example is useful when new object code is to be
              loaded on all nodes in the network, and also indicates some side
              effects RPCs may produce:

              %% Find object code for module Mod
              {Mod, Bin, File} = code:get_object_code(Mod),

              %% and load it on all nodes including this one
              {ResL, _} = rpc:multicall(code, load_binary, [Mod, Bin, File,]),

              %% and then maybe check the ResL list.

       ccaasstt((NNooddee,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> ttrruuee

              Types:

                 Node = node()
                 Module = module()
                 Function = atom()
                 Args = [term()]

              Evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) on the node _N_o_d_e. No
              response is delivered and the calling process is not suspended
              until the evaluation is complete, as is the case with _c_a_l_l_/_4_,_5.

       eevvaall__eevveerryywwhheerree((MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> aabbccaasstt

              Types:

                 Module = module()
                 Function = atom()
                 Args = [term()]

              Equivalent to _e_v_a_l___e_v_e_r_y_w_h_e_r_e_(_[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_]_, _M_o_d_u_l_e_,
              _F_u_n_c_t_i_o_n_, _A_r_g_s_).

       eevvaall__eevveerryywwhheerree((NNooddeess,, MMoodduullee,, FFuunnccttiioonn,, AArrggss)) -->> aabbccaasstt

              Types:

                 Nodes = [node()]
                 Module = module()
                 Function = atom()
                 Args = [term()]

              Evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _A_r_g_s_) on the specified nodes.
              No answers are collected.

       aabbccaasstt((NNaammee,, MMssgg)) -->> aabbccaasstt

              Types:

                 Name = atom()
                 Msg = term()

              Equivalent to _a_b_c_a_s_t_(_[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_]_, _N_a_m_e_, _M_s_g_).

       aabbccaasstt((NNooddeess,, NNaammee,, MMssgg)) -->> aabbccaasstt

              Types:

                 Nodes = [node()]
                 Name = atom()
                 Msg = term()

              Broadcasts the message _M_s_g asynchronously to the registered
              process _N_a_m_e on the specified nodes.

       ssbbccaasstt((NNaammee,, MMssgg)) -->> {{GGooooddNNooddeess,, BBaaddNNooddeess}}

              Types:

                 Name = atom()
                 Msg = term()
                 GoodNodes = BadNodes = [node()]

              Equivalent to _s_b_c_a_s_t_(_[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_]_, _N_a_m_e_, _M_s_g_).

       ssbbccaasstt((NNooddeess,, NNaammee,, MMssgg)) -->> {{GGooooddNNooddeess,, BBaaddNNooddeess}}

              Types:

                 Name = atom()
                 Msg = term()
                 Nodes = GoodNodes = BadNodes = [node()]

              Broadcasts the message _M_s_g synchronously to the registered
              process _N_a_m_e on the specified nodes.

              Returns _{_G_o_o_d_N_o_d_e_s_, _B_a_d_N_o_d_e_s_}, where _G_o_o_d_N_o_d_e_s is the list of
              nodes which have _N_a_m_e as a registered process.

              The function is synchronous in the sense that it is known that
              all servers have received the message when the call returns. It
              is not possible to know that the servers have actually processed
              the message.

              Any further messages sent to the servers, after this function
              has returned, will be received by all servers after this
              message.

       sseerrvveerr__ccaallll((NNooddee,, NNaammee,, RReeppllyyWWrraappppeerr,, MMssgg)) -->>
                      RReeppllyy || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Node = node()
                 Name = atom()
                 ReplyWrapper = Msg = Reply = term()
                 Reason = nodedown

              This function can be used when interacting with a server called
              _N_a_m_e at node _N_o_d_e. It is assumed that the server receives
              messages in the format _{_F_r_o_m_, _M_s_g_} and replies using _F_r_o_m _!
              _{_R_e_p_l_y_W_r_a_p_p_e_r_, _N_o_d_e_, _R_e_p_l_y_}. This function makes such a server
              call and ensures that the entire call is packed into an atomic
              transaction which either succeeds or fails. It never hangs,
              unless the server itself hangs.

              The function returns the answer _R_e_p_l_y as produced by the server
              _N_a_m_e, or _{_e_r_r_o_r_, _R_e_a_s_o_n_}.

       mmuullttii__sseerrvveerr__ccaallll((NNaammee,, MMssgg)) -->> {{RReepplliieess,, BBaaddNNooddeess}}

              Types:

                 Name = atom()
                 Msg = term()
                 Replies = [Reply :: term()]
                 BadNodes = [node()]

              Equivalent to _m_u_l_t_i___s_e_r_v_e_r___c_a_l_l_(_[_n_o_d_e_(_)_|_n_o_d_e_s_(_)_]_, _N_a_m_e_, _M_s_g_).

       mmuullttii__sseerrvveerr__ccaallll((NNooddeess,, NNaammee,, MMssgg)) -->> {{RReepplliieess,, BBaaddNNooddeess}}

              Types:

                 Nodes = [node()]
                 Name = atom()
                 Msg = term()
                 Replies = [Reply :: term()]
                 BadNodes = [node()]

              This function can be used when interacting with servers called
              _N_a_m_e on the specified nodes. It is assumed that the servers
              receive messages in the format _{_F_r_o_m_, _M_s_g_} and reply using _F_r_o_m
              _! _{_N_a_m_e_, _N_o_d_e_, _R_e_p_l_y_}, where _N_o_d_e is the name of the node where
              the server is located. The function returns _{_R_e_p_l_i_e_s_, _B_a_d_N_o_d_e_s_},
              where _R_e_p_l_i_e_s is a list of all _R_e_p_l_y values and _B_a_d_N_o_d_e_s is a
              list of the nodes which did not exist, or where the server did
              not exist, or where the server terminated before sending any
              reply.

       ssaaffee__mmuullttii__sseerrvveerr__ccaallll((NNaammee,, MMssgg)) -->> {{RReepplliieess,, BBaaddNNooddeess}}

       ssaaffee__mmuullttii__sseerrvveerr__ccaallll((NNooddeess,, NNaammee,, MMssgg)) -->> {{RReepplliieess,, BBaaddNNooddeess}}

              Types:

                 Nodes = [node()]
                 Name = atom()
                 Msg = term()
                 Replies = [Reply :: term()]
                 BadNodes = [node()]

          WWaarrnniinngg::
              This function is deprecated. Use _m_u_l_t_i___s_e_r_v_e_r___c_a_l_l_/_2_,_3 instead.


              In Erlang/OTP R6B and earlier releases, _m_u_l_t_i___s_e_r_v_e_r___c_a_l_l_/_2_,_3
              could not handle the case where the remote node exists, but
              there is no server called _N_a_m_e. Instead this function had to be
              used. In Erlang/OTP R7B and later releases, however, the
              functions are equivalent, except for this function being
              slightly slower.

       ppaarraalllleell__eevvaall((FFuunnccCCaallllss)) -->> RReessLL

              Types:

                 FuncCalls = [{Module, Function, Args}]
                 Module = module()
                 Function = atom()
                 Args = ResL = [term()]

              For every tuple in _F_u_n_c_C_a_l_l_s, evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_,
              _A_r_g_s_) on some node in the network. Returns the list of return
              values, in the same order as in _F_u_n_c_C_a_l_l_s.

       ppmmaapp((FFuunnccSSppeecc,, EExxttrraaAArrggss,, LLiisstt11)) -->> LLiisstt22

              Types:

                 FuncSpec = {Module, Function}
                 Module = module()
                 Function = atom()
                 ExtraArgs = [term()]
                 List1 = [Elem :: term()]
                 List2 = [term()]

              Evaluates _a_p_p_l_y_(_M_o_d_u_l_e_, _F_u_n_c_t_i_o_n_, _[_E_l_e_m_|_E_x_t_r_a_A_r_g_s_]_), for every
              element _E_l_e_m in _L_i_s_t_1, in parallel. Returns the list of return
              values, in the same order as in _L_i_s_t_1.

       ppiinnffoo((PPiidd)) -->> [[{{IItteemm,, IInnffoo}}]] || uunnddeeffiinneedd

              Types:

                 Pid = pid()
                 Item = atom()
                 Info = term()

              Location transparent version of the BIF _p_r_o_c_e_s_s___i_n_f_o_/_1.

       ppiinnffoo((PPiidd,, IItteemm)) -->> {{IItteemm,, IInnffoo}} || uunnddeeffiinneedd || [[]]

              Types:

                 Pid = pid()
                 Item = atom()
                 Info = term()

              Location transparent version of the BIF _p_r_o_c_e_s_s___i_n_f_o_/_2.



Ericsson AB                      kernel 2.15.2                          rpc(3)
