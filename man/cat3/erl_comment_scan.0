erl_comment_scan(3)        Erlang Module Definition        erl_comment_scan(3)



NNAAMMEE
       erl_comment_scan - Functions for reading comment lines from Erlang
       source code.

DDEESSCCRRIIPPTTIIOONN
       Functions for reading comment lines from Erlang source code.

DDAATTAA TTYYPPEESS
         _c_o_m_m_e_n_t_(_) _= _{_i_n_t_e_g_e_r_(_)_, _i_n_t_e_g_e_r_(_)_, _i_n_t_e_g_e_r_(_)_, _[_s_t_r_i_n_g_(_)_]_}:


EEXXPPOORRTTSS
       ffiillee((FFiilleeNNaammee::::ffiilleennaammee(()) ((sseeee mmoodduullee ffiillee)))) -->> [[CCoommmmeenntt]]

              Types:

                 Comment = {Line, Column, Indentation, Text}
                 Line = integer()
                 Column = integer()
                 Indentation = integer()
                 Text = [string()]

              Extracts comments from an Erlang source code file. Returns a
              list of entries representing _m_u_l_t_i_-_l_i_n_e comments, listed in
              order of increasing line-numbers. For each entry, _T_e_x_t is a list
              of strings representing the consecutive comment lines in top-
              down order; the strings contain _a_l_l characters following (but
              not including) the first comment-introducing _% character on the
              line, up to (but not including) the line-terminating newline.

              Furthermore, _L_i_n_e is the line number and _C_o_l_u_m_n the left column
              of the comment (i.e., the column of the comment-introducing _%
              character). _I_n_d_e_n_t is the indentation (or padding), measured in
              character positions between the last non-whitespace character
              before the comment (or the left margin), and the left column of
              the comment. _L_i_n_e and _C_o_l_u_m_n are always positive integers, and
              _I_n_d_e_n_t_a_t_i_o_n is a nonnegative integer.

              Evaluation exits with reason _{_r_e_a_d_, _R_e_a_s_o_n_} if a read error
              occurred, where _R_e_a_s_o_n is an atom corresponding to a Posix error
              code; see the module ffiillee((33)) for details.

       jjooiinn__lliinneess((LLiinneess::::[[CCoommmmeennttLLiinnee]])) -->> [[CCoommmmeenntt]]

              Types:

                 CommentLine = {Line, Column, Indent, string()}
                 Line = integer()
                 Column = integer()
                 Indent = integer()
                 Comment = {Line, Column, Indent, Text}
                 Text = [string()]

              Joins individual comment lines into multi-line comments. The
              input is a list of entries representing individual comment
              lines, _i_n _o_r_d_e_r _o_f _d_e_c_r_e_a_s_i_n_g _l_i_n_e_-_n_u_m_b_e_r_s; see ssccaann__lliinneess//11 for
              details. The result is a list of entries representing _m_u_l_t_i_-_l_i_n_e
              comments, _s_t_i_l_l _l_i_s_t_e_d _i_n _o_r_d_e_r _o_f _d_e_c_r_e_a_s_i_n_g _l_i_n_e_-_n_u_m_b_e_r_s, but
              where for each entry, _T_e_x_t is a list of consecutive comment
              lines in order of _i_n_c_r_e_a_s_i_n_g line-numbers (i.e., top-down).

              _S_e_e _a_l_s_o_: ssccaann__lliinneess//11.

       ssccaann__lliinneess((TTeexxtt::::ssttrriinngg(()))) -->> [[CCoommmmeennttLLiinnee]]

              Types:

                 CommentLine = {Line, Column, Indent, Text}
                 Line = integer()
                 Column = integer()
                 Indent = integer()
                 Text = string()

              Extracts individual comment lines from a source code string.
              Returns a list of comment lines found in the text, listed in
              order of _d_e_c_r_e_a_s_i_n_g line-numbers, i.e., the last comment line in
              the input is first in the resulting list. _T_e_x_t is a single
              string, containing all characters following (but not including)
              the first comment-introducing _% character on the line, up to
              (but not including) the line-terminating newline. For details on
              _L_i_n_e, _C_o_l_u_m_n and _I_n_d_e_n_t, see ffiillee//11.

       ssttrriinngg((TTeexxtt::::ssttrriinngg(()))) -->> [[CCoommmmeenntt]]

              Types:

                 Comment = {Line, Column, Indentation, Text}
                 Line = integer()
                 Column = integer()
                 Indentation = integer()
                 Text = [string()]

              Extracts comments from a string containing Erlang source code.
              Except for reading directly from a string, the behaviour is the
              same as for ffiillee//11.

              _S_e_e _a_l_s_o_: ffiillee//11.

AAUUTTHHOORRSS
       Richard Carlsson _<_c_a_r_l_s_s_o_n_._r_i_c_h_a_r_d_@_g_m_a_i_l_._c_o_m_>



                              syntax_tools 1.6.9           erl_comment_scan(3)
