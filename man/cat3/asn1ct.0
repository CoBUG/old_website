asn1ct(3)                  Erlang Module Definition                  asn1ct(3)



NNAAMMEE
       asn1ct - ASN.1 compiler and compile-time support functions

DDEESSCCRRIIPPTTIIOONN
       The ASN.1 compiler takes an ASN.1 module as input and generates a
       corresponding Erlang module which can encode and decode the data-types
       specified. Alternatively the compiler takes a specification module (se
       below) specifying all input modules and generates one module with
       encode/decode functions. There are also some generic functions which
       can be used in during development of applications which handles ASN.1
       data (encoded as BER or PER).

EEXXPPOORRTTSS
       ccoommppiillee((AAssnn11mmoodduullee)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}
       ccoommppiillee((AAssnn11mmoodduullee,, OOppttiioonnss)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Asn1module = atom() | string()
                 Options = [Option| OldOption]
                 Option = ber_bin | per_bin | uper_bin | der |
                 compact_bit_string | noobj | {n2n, EnumTypeName} |{outdir,
                 Dir} | {i, IncludeDir} | optimize | nif | asn1config |
                 undec_rest | {inline, OutputName} | inline |
                 {macro_name_prefix, Prefix} | {record_name_prefix, Prefix} |
                 verbose | warnings_as_errors
                 OldOption = ber | per
                 Reason = term()
                 Prefix = string()

              Compiles the ASN.1 module _A_s_n_1_m_o_d_u_l_e and generates an Erlang
              module _A_s_n_1_m_o_d_u_l_e_._e_r_l with encode and decode functions for the
              types defined in _A_s_n_1_m_o_d_u_l_e. For each ASN.1 value defined in the
              module an Erlang function which returns the value in Erlang
              representation is generated.

              If _A_s_n_1_m_o_d_u_l_e is a filename without extension first _"_._a_s_n_1_" is
              assumed, then _"_._a_s_n_" and finally _"_._p_y_" (to be compatible with
              the old ASN.1 compiler). Of course _A_s_n_1_m_o_d_u_l_e can be a full
              pathname (relative or absolute) including filename with (or
              without) extension.

              If one wishes to compile a set of Asn1 modules into one Erlang
              file with encode/decode functions one has to list all involved
              files in a configuration file. This configuration file must have
              a double extension ".set.asn", (".asn" can alternatively be
              ".asn1" or ".py"). The input files' names must be listed, within
              quotation marks (""), one at each row in the file. If the input
              files are _F_i_l_e_1_._a_s_n, _F_i_l_e_2_._a_s_n and _F_i_l_e_3_._a_s_n the configuration
              file shall look like:

              File1.asn
              File2.asn
              File3.asn

              The output files will in this case get their names from the
              configuration file. If the configuration file has the name
              _S_e_t_O_f_F_i_l_e_s_._s_e_t_._a_s_n the name of the output files will be
              _S_e_t_O_f_F_i_l_e_s_._h_r_l_, _S_e_t_O_f_F_i_l_e_s_._e_r_l _a_n_d _S_e_t_O_f_F_i_l_e_s_._a_s_n_1_d_b.

              Sometimes in a system of ASN.1 modules there are different
              default tag modes, e.g. AUTOMATIC, IMPLICIT or EXPLICIT. The
              multi file compilation resolves the default tagging as if the
              modules were compiled separately.

              Another unwanted effect that may occur in multi file compilation
              is name collisions. The compiler solves this problem in two
              ways: If the definitions are identical then the output module
              keeps only one definition with the original name. But if
              definitions only have same name and differs in the definition,
              then they will be renamed. The new names will be the definition
              name and the original module name concatenated.

              If any name collision have occurred the compiler reports a
              "NOTICE: ..." message that tells if a definition was renamed,
              and the new name that must be used to encode/decode data.

              _O_p_t_i_o_n_s is a list with options specific for the asn1 compiler
              and options that are applied to the Erlang compiler. The latter
              are those that not is recognized as asn1 specific. For _p_r_e_f_e_r_r_e_d
              _o_p_t_i_o_n _u_s_e see PPrreeffeerrrreedd OOppttiioonn UUssee sseeccttiioonn iinn uusseerrss gguuiiddee.
              Available options are:

                _b_e_r _| _b_e_r___b_i_n _| _p_e_r _| _p_e_r___b_i_n _| _u_p_e_r___b_i_n:
                  The encoding rule to be used. The supported encoding rules
                  are BER (Basic Encoding Rules), PER aligned (Packed Encoding
                  Rules) and PER unaligned. If the encoding rule option is
                  omitted _b_e_r is the default. The _p_e_r___b_i_n option means the
                  aligned variant. To use the unaligned variant the _u_p_e_r___b_i_n
                  option has to be used.

                  The generated Erlang module always gets the same name as the
                  ASN.1 module and as a consequence of this only one encoding
                  rule per ASN.1 module can be used at runtime.

                  The _b_e_r___b_i_n and _p_e_r___b_i_n options are equivalent with the
                  _O_l_d_O_p_t_i_o_n_s _b_e_r and _p_e_r with the difference that the
                  generated encoding/decoding functions take advantage of the
                  bit syntax, which in most cases increases the performance
                  considerably. The result from encoding is a binary or an
                  iolist.

                _d_e_r:
                  By this option the Distinguished Encoding Rules (DER) is
                  chosen. DER is regarded as a specialized variant of the BER
                  encoding rule, therefore the _d_e_r option only makes sense
                  together with the _b_e_r or _b_e_r___b_i_n option. This option
                  sometimes adds sorting and value checks when encoding, which
                  implies a slower encoding. The decoding routines are the
                  same as for _b_e_r.

                _c_o_m_p_a_c_t___b_i_t___s_t_r_i_n_g:
                  Makes it possible to use a compact notation for values of
                  the BIT STRING type in Erlang. The notation:

                BitString = {Unused, Binary},
                Unused = integer(),
                Binary = binary()


                  _U_n_u_s_e_d must be a number in the range 0 to 7. It tells how
                  many bits in the least significant byte in _B_i_n_a_r_y that is
                  unused. For details see  BBIITT SSTTRRIINNGG ttyyppee sseeccttiioonn iinn uusseerrss
                  gguuiiddee .

                _{_n_2_n_, _E_n_u_m_T_y_p_e_N_a_m_e_}:
                  Tells the compiler to generate functions for conversion
                  between names (as atoms) and numbers and vice versa for the
                  EnumTypeName specified. There can be multiple occurrences of
                  this option in order to specify several type names. The type
                  names must be declared as ENUMERATIONS in the ASN.1 spec. If
                  the EnumTypeName does not exist in the ASN.1 spec the
                  compilation will stop with an error code. The generated
                  conversion functions are named _n_a_m_e_2_n_u_m___E_n_u_m_T_y_p_e_N_a_m_e_/_1 and
                  _n_u_m_2_n_a_m_e___E_n_u_m_T_y_p_e_N_a_m_e_/_1.

                _n_o_o_b_j:
                  Do not compile (i.e do not produce object code) the
                  generated _._e_r_l file. If this option is omitted the generated
                  Erlang module will be compiled.

                _{_i_, _I_n_c_l_u_d_e_D_i_r_}:
                  Adds _I_n_c_l_u_d_e_D_i_r to the search-path for _._a_s_n_1_d_b and asn1
                  source files. The compiler tries to open a _._a_s_n_1_d_b file when
                  a module imports definitions from another ASN.1 module. If
                  no _._a_s_n_1_d_b file is found the asn1 source file is parsed.
                  Several _{_i_, _I_n_c_l_u_d_e_D_i_r_} can be given.

                _{_o_u_t_d_i_r_, _D_i_r_}:
                  Specifies the directory _D_i_r where all generated files shall
                  be placed. If omitted the files are placed in the current
                  directory.

                _o_p_t_i_m_i_z_e:
                  This option is only valid together with one of the _p_e_r___b_i_n
                  or _b_e_r___b_i_n option. It gives time optimized code generated
                  and it uses another runtime module and in the _p_e_r___b_i_n case a
                  nif. The result in the _p_e_r___b_i_n case from an encode when
                  compiled with this option will be a binary.

                _d_r_i_v_e_r:
                  As of R15B this means the same as the _n_i_f option. Kept for
                  backwards compatability reasons.

                _n_i_f:
                  Option valid together with _b_e_r___b_i_n and _o_p_t_i_m_i_z_e options. It
                  enables the use of several nifs that gives faster encode and
                  decode. Nifs are only enabled by the explicit use of the
                  option _n_i_f

                _a_s_n_1_c_o_n_f_i_g:
                  When one of the specialized decodes, exclusive or selective
                  decode, is wanted one has to give instructions in a
                  configuration file. The option _a_s_n_1_c_o_n_f_i_g enables
                  specialized decodes and takes the configuration file, which
                  has the same name as the ASN.1 spec but with extension
                  _._a_s_n_1_c_o_n_f_i_g, in concern.

                  The instructions for exclusive decode must follow the
                  iinnssttrruuccttiioonn aanndd ggrraammmmaarr iinn tthhee UUsseerr''ss GGuuiiddee.

                  You can also find the instructions for selective decode in
                  the UUsseerr''ss GGuuiiddee.

                _u_n_d_e_c___r_e_s_t:
                  A buffer that holds a message, being decoded may also have
                  some following bytes. Now it is possible to get those
                  following bytes returned together with the decoded value. If
                  an asn1 spec is compiled with this option a tuple _{_o_k_,
                  _V_a_l_u_e_, _R_e_s_t_} is returned. _R_e_s_t may be a list or a binary.
                  Earlier versions of the compiler ignored those following
                  bytes.

                _{_i_n_l_i_n_e_, _O_u_t_p_u_t_N_a_m_e_}:
                  Compiling with this option gives one output module
                  containing all asn1 run-time functionality. The asn1 specs
                  are provided in a target module Module.set.asn as described
                  aabboovvee. The name of the resulting module containing generated
                  encode/decode functions and in-lined run-time functions will
                  be _O_u_t_p_u_t_N_a_m_e_._e_r_l. The merging/in-lining of code is done by
                  the _i_g_o_r module of _s_y_n_t_a_x___t_o_o_l_s. By default the functions
                  generated from the first asn1 spec in the _._s_e_t_._a_s_n are
                  exported, unless a _{_e_x_p_o_r_t_, _[_a_t_o_m_(_)_]_} or _{_e_x_p_o_r_t___a_l_l_, _t_r_u_e_}
                  option are provided. The list of atoms are names of chosen
                  asn1 specs from the _._s_e_t_._a_s_n file.

                  When used together with _n_i_f for _b_e_r___b_i_n, the asn1 nifs will
                  be used if the _a_s_n_1_r_t___n_i_f module is available. If it is not
                  available, a slower erlang fallback will be used.

                _i_n_l_i_n_e:
                  It is also possible to use the sole argument _i_n_l_i_n_e. It is
                  as _{_i_n_l_i_n_e_, _O_u_t_p_u_t_N_a_m_e_}, but the output file gets the
                  default name of the source _._s_e_t_._a_s_n file.

                _{_m_a_c_r_o___n_a_m_e___p_r_e_f_i_x_, _P_r_e_f_i_x_}:
                  All macro names generated by the compiler are prefixed with
                  _P_r_e_f_i_x. This is useful when multiple protocols that contains
                  macros with identical names are included in a single module.

                _{_r_e_c_o_r_d___n_a_m_e___p_r_e_f_i_x_, _P_r_e_f_i_x_}:
                  All record names generated by the compiler are prefixed with
                  _P_r_e_f_i_x. This is useful when multiple protocols that contains
                  records with identical names are included in a single
                  module.

                _v_e_r_b_o_s_e:
                  Causes more verbose information from the compiler describing
                  what it is doing.

                _w_a_r_n_i_n_g_s___a_s___e_r_r_o_r_s:
                  Causes warnings to be treated as errors.

              Any additional option that is applied will be passed to the
              final step when the generated .erl file is compiled.

              The compiler generates the following files:

                * _A_s_n_1_m_o_d_u_l_e_._h_r_l (if any SET or SEQUENCE is defined)

                * _A_s_n_1_m_o_d_u_l_e_._e_r_l the Erlang module with encode, decode and
                  value functions.

                * _A_s_n_1_m_o_d_u_l_e_._a_s_n_1_d_b intermediate format used by the compiler
                  when modules IMPORTS definitions from each other.

       eennccooddee((MMoodduullee,, TTyyppee,, VVaalluuee))-->> {{ookk,, BByytteess}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Module = Type = atom()
                 Value = term()
                 Bytes = [Int] when integer(Int), Int >= 0, Int =< 255
                 Reason = term()

              Encodes _V_a_l_u_e of _T_y_p_e defined in the ASN.1 module _M_o_d_u_l_e.
              Returns a list of bytes if successful. To get as fast execution
              as possible the encode function only performs rudimentary tests
              that the input _V_a_l_u_e is a correct instance of _T_y_p_e. The length
              of strings is for example not always checked. Returns _{_o_k_,
              _B_y_t_e_s_} if successful or _{_e_r_r_o_r_, _R_e_a_s_o_n_} if an error occurred.

       ddeeccooddee((MMoodduullee,, TTyyppee,, BByytteess)) -->> {{ookk,, VVaalluuee}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Module = Type = atom()
                 Value = Reason = term()
                 Bytes = [Int] when integer(Int), Int >= 0, Int =< 255

              Decodes _T_y_p_e from _M_o_d_u_l_e from the list of bytes _B_y_t_e_s. Returns
              _{_o_k_, _V_a_l_u_e_} if successful.

       vvaalluuee((MMoodduullee,, TTyyppee)) -->> {{ookk,, VVaalluuee}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Module = Type = atom()
                 Value = term()
                 Reason = term()

              Returns an Erlang term which is an example of a valid Erlang
              representation of a value of the ASN.1 type _T_y_p_e. The value is a
              random value and subsequent calls to this function will for most
              types return different values.

       tteesstt((MMoodduullee)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}
       tteesstt((MMoodduullee,, TTyyppee || OOppttiioonnss)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}
       tteesstt((MMoodduullee,, TTyyppee,, VVaalluuee || OOppttiioonnss)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Module = Type = atom()
                 Value = term()
                 Options = [{i, IncludeDir}]
                 Reason = term()

              Performs a test of encode and decode of types in _M_o_d_u_l_e. The
              generated functions are called by this function. This function
              is useful during test to secure that the generated encode and
              decode functions and the general runtime support work as
              expected.

                * _t_e_s_t_/_1 iterates over all types in _M_o_d_u_l_e.

                * _t_e_s_t_/_2 tests type _T_y_p_e with a random value.

                * _t_e_s_t_/_3 tests type _T_y_p_e with _V_a_l_u_e.

              Schematically the following happens for each type in the module:

              {ok, Value} = asn1ct:value(Module, Type),
              {ok, Bytes} = asn1ct:encode(Module, Type, Value),
              {ok, Value} = asn1ct:decode(Module, Type, Bytes).

              The _t_e_s_t functions utilizes the _*_._a_s_n_1_d_b files for all included
              modules. If they are located in a different directory than the
              current working directory, use the include option to add paths.
              This is only needed when automatically generating values. For
              static values using _V_a_l_u_e no options are needed.



Ericsson AB                        asn1 1.8                          asn1ct(3)
