erl_prettypr(3)            Erlang Module Definition            erl_prettypr(3)



NNAAMMEE
       erl_prettypr - Pretty printing of abstract Erlang syntax trees.

DDEESSCCRRIIPPTTIIOONN
       Pretty printing of abstract Erlang syntax trees.

       This module is a front end to the pretty-printing library module
       _p_r_e_t_t_y_p_r, for text formatting of abstract syntax trees defined by the
       module _e_r_l___s_y_n_t_a_x.

DDAATTAA TTYYPPEESS
         _c_o_n_t_e_x_t_(_):


           A representation of the current context of the pretty-printer. Can
           be accessed in hook functions.

         _h_o_o_k_(_) _= _(_s_y_n_t_a_x_T_r_e_e_(_)_, _c_o_n_t_e_x_t_(_)_, _C_o_n_t_i_n_u_a_t_i_o_n_) _-_> _d_o_c_u_m_e_n_t_(_):


           * _C_o_n_t_i_n_u_a_t_i_o_n _= _(_s_y_n_t_a_x_T_r_e_e_(_)_, _c_o_n_t_e_x_t_(_)_) _-_> _d_o_c_u_m_e_n_t_(_)

           A call-back function for user-controlled formatting. See ffoorrmmaatt//22.

EEXXPPOORRTTSS
       bbeesstt((TTrreeee::::ssyynnttaaxxTTrreeee(()))) -->> eemmppttyy || ddooccuummeenntt(())

              Equivalent to bbeesstt((TTrreeee,, [[]])).

       bbeesstt((TTrreeee::::ssyynnttaaxxTTrreeee(()),, OOppttiioonnss::::[[tteerrmm(())]])) -->> eemmppttyy || ddooccuummeenntt(())

              Creates a fixed "best" abstract layout for a syntax tree. This
              is similar to the _l_a_y_o_u_t_/_2 function, except that here, the final
              layout has been selected with respect to the given options. The
              atom _e_m_p_t_y is returned if no such layout could be produced. For
              information on the options, see the _f_o_r_m_a_t_/_2 function.

              _S_e_e _a_l_s_o_: bbeesstt//11, ffoorrmmaatt//22, llaayyoouutt//22, pprreettttyypprr::bbeesstt//33.

       ffoorrmmaatt((TTrreeee::::ssyynnttaaxxTTrreeee(()))) -->> ssttrriinngg(())

              Equivalent to ffoorrmmaatt((TTrreeee,, [[]])).

       ffoorrmmaatt((TTrreeee::::ssyynnttaaxxTTrreeee(()),, OOppttiioonnss::::[[tteerrmm(())]])) -->> ssttrriinngg(())

              Types:

                 syntaxTree() (see module erl_syntax)

              Prettyprint-formats an abstract Erlang syntax tree as text. For
              example, if you have a _._b_e_a_m file that has been compiled with
              _d_e_b_u_g___i_n_f_o, the following should print the source code for the
              module (as it looks in the debug info representation):

                   {ok,{_,[{abstract_code,{_,AC}}]}} =
                           beam_lib:chunks("myfile.beam",[abstract_code]),
                   io:put_chars(erl_prettypr:format(erl_syntax:form_list(AC)))

              Available options:

                {{hhooookk,, nnoonnee || hhooookk(())}:
                  Unless the value is _n_o_n_e, the given function is called for
                  each node whose list of annotations is not empty; see below
                  for details. The default value is _n_o_n_e.

                {{ppaappeerr,, iinntteeggeerr(())}}::
                  Specifies the preferred maximum number of characters on any
                  line, including indentation. The default value is 80.

                {{rriibbbboonn,, iinntteeggeerr(())}}::
                  Specifies the preferred maximum number of characters on any
                  line, not counting indentation. The default value is 65.

                {{uusseerr,, tteerrmm(())}}::
                  User-specific data for use in hook functions. The default
                  value is _u_n_d_e_f_i_n_e_d.

              A hook function (cf. the hhooookk(()) type) is passed the current
              syntax tree node, the context, and a continuation. The context
              can be examined and manipulated by functions such as
              _g_e_t___c_t_x_t___u_s_e_r_/_1 and _s_e_t___c_t_x_t___u_s_e_r_/_2. The hook must return a
              "document" data structure (see llaayyoouutt//22 and bbeesstt//22); this may be
              constructed in part or in whole by applying the continuation
              function. For example, the following is a trivial hook:

                    fun (Node, Ctxt, Cont) -> Cont(Node, Ctxt) end

              which yields the same result as if no hook was given. The
              following, however:

                    fun (Node, Ctxt, Cont) ->
                        Doc = Cont(Node, Ctxt),
                        prettypr:beside(prettypr:text("<b>"),
                                        prettypr:beside(Doc,
                                                        prettypr:text("</b>")))
                    end

              will place the text of any annotated node (regardless of the
              annotation data) between HTML "boldface begin" and "boldface
              end" tags.

              _S_e_e _a_l_s_o_: eerrll__ssyynnttaaxx, bbeesstt//22, ffoorrmmaatt//11, ggeett__ccttxxtt__uusseerr//11,
              llaayyoouutt//22, sseett__ccttxxtt__uusseerr//22.

       ggeett__ccttxxtt__hhooookk((CCttxxtt::::ccoonntteexxtt(()))) -->> hhooookk(())

              Returns the hook function field of the prettyprinter context.

              _S_e_e _a_l_s_o_: sseett__ccttxxtt__hhooookk//22.

       ggeett__ccttxxtt__lliinneewwiiddtthh((CCttxxtt::::ccoonntteexxtt(()))) -->> iinntteeggeerr(())

              Returns the line widh field of the prettyprinter context.

              _S_e_e _a_l_s_o_: sseett__ccttxxtt__lliinneewwiiddtthh//22.

       ggeett__ccttxxtt__ppaappeerrwwiiddtthh((CCttxxtt::::ccoonntteexxtt(()))) -->> iinntteeggeerr(())

              Returns the paper widh field of the prettyprinter context.

              _S_e_e _a_l_s_o_: sseett__ccttxxtt__ppaappeerrwwiiddtthh//22.

       ggeett__ccttxxtt__pprreecceeddeennccee((CCttxxtt::::ccoonntteexxtt(()))) -->> iinntteeggeerr(())

              Returns the operator precedence field of the prettyprinter
              context.

              _S_e_e _a_l_s_o_: sseett__ccttxxtt__pprreecceeddeennccee//22.

       ggeett__ccttxxtt__uusseerr((CCttxxtt::::ccoonntteexxtt(()))) -->> tteerrmm(())

              Returns the user data field of the prettyprinter context.

              _S_e_e _a_l_s_o_: sseett__ccttxxtt__uusseerr//22.

       llaayyoouutt((TTrreeee::::ssyynnttaaxxTTrreeee(()))) -->> ddooccuummeenntt(())

              Equivalent to llaayyoouutt((TTrreeee,, [[]])).

       llaayyoouutt((TTrreeee::::ssyynnttaaxxTTrreeee(()),, OOppttiioonnss::::[[tteerrmm(())]])) -->> ddooccuummeenntt(())

              Types:

                 document() (see module prettypr)

              Creates an abstract document layout for a syntax tree. The
              result represents a set of possible layouts (cf. module
              _p_r_e_t_t_y_p_r). For information on the options, see ffoorrmmaatt//22; note,
              however, that the _p_a_p_e_r and _r_i_b_b_o_n options are ignored by this
              function.

              This function provides a low-level interface to the pretty
              printer, returning a flexible representation of possible
              layouts, independent of the paper width eventually to be used
              for formatting. This can be included as part of another document
              and/or further processed directly by the functions in the
              _p_r_e_t_t_y_p_r module, or used in a hook function (see _f_o_r_m_a_t_/_2 for
              details).

              _S_e_e _a_l_s_o_: pprreettttyypprr, ffoorrmmaatt//22, llaayyoouutt//11.

       sseett__ccttxxtt__hhooookk((CCttxxtt::::ccoonntteexxtt(()),, HHooookk::::hhooookk(()))) -->> ccoonntteexxtt(())

              Updates the hook function field of the prettyprinter context.

              _S_e_e _a_l_s_o_: ggeett__ccttxxtt__hhooookk//11.

       sseett__ccttxxtt__lliinneewwiiddtthh((CCttxxtt::::ccoonntteexxtt(()),, WW::::iinntteeggeerr(()))) -->> ccoonntteexxtt(())

              Updates the line widh field of the prettyprinter context.

              Note: changing this value (and passing the resulting context to
              a continuation function) does not affect the normal formatting,
              but may affect user-defined behaviour in hook functions.

              _S_e_e _a_l_s_o_: ggeett__ccttxxtt__lliinneewwiiddtthh//11.

       sseett__ccttxxtt__ppaappeerrwwiiddtthh((CCttxxtt::::ccoonntteexxtt(()),, WW::::iinntteeggeerr(()))) -->> ccoonntteexxtt(())

              Updates the paper widh field of the prettyprinter context.

              Note: changing this value (and passing the resulting context to
              a continuation function) does not affect the normal formatting,
              but may affect user-defined behaviour in hook functions.

              _S_e_e _a_l_s_o_: ggeett__ccttxxtt__ppaappeerrwwiiddtthh//11.

       sseett__ccttxxtt__pprreecceeddeennccee((CCttxxtt::::ccoonntteexxtt(()),, PPrreecc::::iinntteeggeerr(()))) -->> ccoonntteexxtt(())

              Updates the operator precedence field of the prettyprinter
              context. See the eerrll__ppaarrssee((33)) module for operator precedences.

              _S_e_e _a_l_s_o_: eerrll__ppaarrssee((33)), ggeett__ccttxxtt__pprreecceeddeennccee//11.

       sseett__ccttxxtt__uusseerr((CCttxxtt::::ccoonntteexxtt(()),, XX::::tteerrmm(()))) -->> ccoonntteexxtt(())

              Updates the user data field of the prettyprinter context.

              _S_e_e _a_l_s_o_: ggeett__ccttxxtt__uusseerr//11.

AAUUTTHHOORRSS
       Richard Carlsson _<_c_a_r_l_s_s_o_n_._r_i_c_h_a_r_d_@_g_m_a_i_l_._c_o_m_>



                              syntax_tools 1.6.9               erl_prettypr(3)
