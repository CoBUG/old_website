ct_telnet(3)               Erlang Module Definition               ct_telnet(3)



NNAAMMEE
       ct_telnet - Common Test specific layer on top of telnet client
       ct_telnet_client.erl.

DDEESSCCRRIIPPTTIIOONN
       Common Test specific layer on top of telnet client ct_telnet_client.erl

       Use this module to set up telnet connections, send commands and perform
       string matching on the result. See the _u_n_i_x___t_e_l_n_e_t manual page for
       information about how to use ct_telnet, and configure connections,
       specifically for unix hosts.

       The following default values are defined in ct_telnet:

          Connection timeout = 10 sec (time to wait for connection)
          Command timeout = 10 sec (time to wait for a command to return)
          Max no of reconnection attempts = 3
          Reconnection interval = 5 sek (time to wait in between reconnection attempts)
          Keep alive = true (will send NOP to the server every 10 sec if connection is idle)

       These parameters can be altered by the user with the following
       configuration term:

          {telnet_settings, [{connect_timeout,Millisec},
                             {command_timeout,Millisec},
                             {reconnection_attempts,N},
                             {reconnection_interval,Millisec},
                             {keep_alive,Bool}]}.

       _M_i_l_l_i_s_e_c _= _i_n_t_e_g_e_r_(_)_, _N _= _i_n_t_e_g_e_r_(_)

       Enter the _t_e_l_n_e_t___s_e_t_t_i_n_g_s term in a configuration file included in the
       test and ct_telnet will retrieve the information automatically. Note
       that _k_e_e_p___a_l_i_v_e may be specified per connection if required. See
       _u_n_i_x___t_e_l_n_e_t for details.

DDAATTAA TTYYPPEESS
         _c_o_n_n_e_c_t_i_o_n_(_) _= _h_a_n_d_l_e_(_) _| _{_t_a_r_g_e_t___n_a_m_e_(_) _(_s_e_e _m_o_d_u_l_e _c_t_)_,
         _c_o_n_n_e_c_t_i_o_n___t_y_p_e_(_)_} _| _t_a_r_g_e_t___n_a_m_e_(_) _(_s_e_e _m_o_d_u_l_e _c_t_):


         _c_o_n_n_e_c_t_i_o_n___t_y_p_e_(_) _= _t_e_l_n_e_t _| _t_s_1 _| _t_s_2:


         _h_a_n_d_l_e_(_) _= _h_a_n_d_l_e_(_) _(_s_e_e _m_o_d_u_l_e _c_t___g_e_n___c_o_n_n_):


           Handle for a specific telnet connection.

         _p_r_o_m_p_t___r_e_g_e_x_p_(_) _= _s_t_r_i_n_g_(_):


           A regular expression which matches all possible prompts for a
           specific type of target. The regexp must not have any groups i.e.
           when matching, re:run/3 shall return a list with one single
           element.

EEXXPPOORRTTSS
       cclloossee((CCoonnnneeccttiioonn)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)

              Close the telnet connection and stop the process managing it.

              A connection may be associated with a target name and/or a
              handle. If _C_o_n_n_e_c_t_i_o_n has no associated target name, it may only
              be closed with the handle value (see the _o_p_e_n_/_4 function).

       ccmmdd((CCoonnnneeccttiioonn,, CCmmdd)) -->> {{ookk,, DDaattaa}} || {{eerrrroorr,, RReeaassoonn}}

              Equivalent to ccmmdd((CCoonnnneeccttiioonn,, CCmmdd,, DDeeffaauullttTTiimmeeoouutt)).

       ccmmdd((CCoonnnneeccttiioonn,, CCmmdd,, TTiimmeeoouutt)) -->> {{ookk,, DDaattaa}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)
                 Cmd = string()
                 Timeout = integer()
                 Data = [string()]

              Send a command via telnet and wait for prompt.

       ccmmddff((CCoonnnneeccttiioonn,, CCmmddFFoorrmmaatt,, AArrggss)) -->> {{ookk,, DDaattaa}} || {{eerrrroorr,, RReeaassoonn}}

              Equivalent to ccmmddff((CCoonnnneeccttiioonn,, CCmmddFFoorrmmaatt,, AArrggss,, DDeeffaauullttTTiimmeeoouutt)).

       ccmmddff((CCoonnnneeccttiioonn,, CCmmddFFoorrmmaatt,, AArrggss,, TTiimmeeoouutt)) -->> {{ookk,, DDaattaa}} || {{eerrrroorr,,
       RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)
                 CmdFormat = string()
                 Args = list()
                 Timeout = integer()
                 Data = [string()]

              Send a telnet command and wait for prompt (uses a format string
              and list of arguments to build the command).

       ccoonntt__lloogg((SSttrr,, AArrggss)) -->> tteerrmm(())

       eenndd__lloogg(()) -->> tteerrmm(())

       eexxppeecctt((CCoonnnneeccttiioonn,, PPaatttteerrnnss)) -->> tteerrmm(())

              Equivalent to eexxppeecctt((CCoonnnneeccttiioonnss,, PPaatttteerrnnss,, [[]])).

       eexxppeecctt((CCoonnnneeccttiioonn,, PPaatttteerrnnss,, OOppttss)) -->> {{ookk,, MMaattcchh}} || {{ookk,, MMaattcchhLLiisstt,,
       HHaallttRReeaassoonn}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)
                 Patterns = Pattern | [Pattern]
                 Pattern = string() | {Tag, string()} | prompt | {prompt,
                 Prompt}
                 Prompt = string()
                 Tag = term()
                 Opts = [Opt]
                 Opt = {timeout, Timeout} | repeat | {repeat, N} | sequence |
                 {halt, HaltPatterns} | ignore_prompt
                 Timeout = integer()
                 N = integer()
                 HaltPatterns = Patterns
                 MatchList = [Match]
                 Match = RxMatch | {Tag, RxMatch} | {prompt, Prompt}
                 RxMatch = [string()]
                 HaltReason = done | Match
                 Reason = timeout | {prompt, Prompt}

              Get data from telnet and wait for the expected pattern.

              _P_a_t_t_e_r_n can be a POSIX regular expression. If more than one
              pattern is given, the function returns when the first match is
              found.

              _R_x_M_a_t_c_h is a list of matched strings. It looks like this:
              _[_F_u_l_l_M_a_t_c_h_, _S_u_b_M_a_t_c_h_1_, _S_u_b_M_a_t_c_h_2_, _._._._] where _F_u_l_l_M_a_t_c_h is the
              string matched by the whole regular expression and _S_u_b_M_a_t_c_h_N is
              the string that matched subexpression no _N. Subexpressions are
              denoted with '(' ')' in the regular expression

              If a _T_a_g is given, the returned _M_a_t_c_h will also include the
              matched _T_a_g. Else, only _R_x_M_a_t_c_h is returned.

              The function will always return when a prompt is found, unless
              the _i_g_n_o_r_e___p_r_o_m_p_t options is used.

              The _t_i_m_e_o_u_t option indicates that the function shall return if
              the telnet client is idle (i.e. if no data is received) for more
              than _T_i_m_e_o_u_t milliseconds. Default timeout is 10 seconds.

              The _r_e_p_e_a_t option indicates that the pattern(s) shall be matched
              multiple times. If _N is given, the pattern(s) will be matched _N
              times, and the function will return with _H_a_l_t_R_e_a_s_o_n _= _d_o_n_e.

              The _s_e_q_u_e_n_c_e option indicates that all patterns shall be matched
              in a sequence. A match will not be concluded untill all patterns
              are matched.

              Both _r_e_p_e_a_t and _s_e_q_u_e_n_c_e can be interrupted by one or more
              _H_a_l_t_P_a_t_t_e_r_n_s. When _s_e_q_u_e_n_c_e or _r_e_p_e_a_t is used, there will always
              be a _M_a_t_c_h_L_i_s_t returned, i.e. a list of _M_a_t_c_h instead of only
              one _M_a_t_c_h. There will also be a _H_a_l_t_R_e_a_s_o_n returned.

              _E_x_a_m_p_l_e_s_:
              _e_x_p_e_c_t_(_C_o_n_n_e_c_t_i_o_n_,_[_{_a_b_c_,_"_A_B_C_"_}_,_{_x_y_z_,_"_X_Y_Z_"_}_]_,
              _[_s_e_q_u_e_n_c_e_,_{_h_a_l_t_,_[_{_n_n_n_,_"_N_N_N_"_}_]_}_]_)_.
              will try to match "ABC" first and then "XYZ", but if "NNN"
              appears the function will return _{_e_r_r_o_r_,_{_n_n_n_,_[_"_N_N_N_"_]_}_}. If both
              "ABC" and "XYZ" are matched, the function will return
              _{_o_k_,_[_A_b_c_M_a_t_c_h_,_X_y_z_M_a_t_c_h_]_}.

              _e_x_p_e_c_t_(_C_o_n_n_e_c_t_i_o_n_,_[_{_a_b_c_,_"_A_B_C_"_}_,_{_x_y_z_,_"_X_Y_Z_"_}_]_,
              _[_{_r_e_p_e_a_t_,_2_}_,_{_h_a_l_t_,_[_{_n_n_n_,_"_N_N_N_"_}_]_}_]_)_.
              will try to match "ABC" or "XYZ" twice. If "NNN" appears the
              function will return with _H_a_l_t_R_e_a_s_o_n _= _{_n_n_n_,_[_"_N_N_N_"_]_}.

              The _r_e_p_e_a_t and _s_e_q_u_e_n_c_e options can be combined in order to
              match a sequence multiple times.

       ggeett__ddaattaa((CCoonnnneeccttiioonn)) -->> {{ookk,, DDaattaa}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)
                 Data = [string()]

              Get all data which has been received by the telnet client since
              last command was sent.

       ooppeenn((NNaammee)) -->> {{ookk,, HHaannddllee}} || {{eerrrroorr,, RReeaassoonn}}

              Equivalent to ooppeenn((NNaammee,, tteellnneett)).

       ooppeenn((NNaammee,, CCoonnnnTTyyppee)) -->> {{ookk,, HHaannddllee}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Name = target_name()
                 ConnType = connection_type() (see module ct_telnet)
                 Handle = handle() (see module ct_telnet)

              Open a telnet connection to the specified target host.

       ooppeenn((KKeeyyOOrrNNaammee,, CCoonnnnTTyyppee,, TTaarrggeettMMoodd)) -->> {{ookk,, HHaannddllee}} || {{eerrrroorr,, RReeaassoonn}}

              Equivalent to ooppeenn((KKeeyyOOrrNNaammee,, CCoonnnnTTyyppee,, TTaarrggeettMMoodd,, [[]])).

       ooppeenn((KKeeyyOOrrNNaammee,, CCoonnnnTTyyppee,, TTaarrggeettMMoodd,, EExxttrraa)) -->> {{ookk,, HHaannddllee}} || {{eerrrroorr,,
       RReeaassoonn}}

              Types:

                 KeyOrName = Key | Name
                 Key = atom()
                 Name = target_name() (see module ct)
                 ConnType = connection_type()
                 TargetMod = atom()
                 Extra = term()
                 Handle = handle()

              Open a telnet connection to the specified target host.

              The target data must exist in a configuration file. The
              connection may be associated with either _N_a_m_e and/or the
              returned _H_a_n_d_l_e. To allocate a name for the target, use
              _c_t_:_r_e_q_u_i_r_e_/_2 in a test case, or use a _r_e_q_u_i_r_e statement in the
              suite info function (_s_u_i_t_e_/_0), or in a test case info function.
              If you want the connection to be associated with _H_a_n_d_l_e only (in
              case you need to open multiple connections to a host for
              example), simply use _K_e_y, the configuration variable name, to
              specify the target. Note that a connection that has no
              associated target name can only be closed with the handle value.

              _T_a_r_g_e_t_M_o_d is a module which exports the functions
              _c_o_n_n_e_c_t_(_I_p_,_P_o_r_t_,_K_e_e_p_A_l_i_v_e_,_E_x_t_r_a_) and _g_e_t___p_r_o_m_p_t___r_e_g_e_x_p_(_) for the
              given _T_a_r_g_e_t_T_y_p_e (e.g. _u_n_i_x___t_e_l_n_e_t).

              _S_e_e _a_l_s_o_: cctt::rreeqquuiirree//22.

       sseenndd((CCoonnnneeccttiioonn,, CCmmdd)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)
                 Cmd = string()

              Send a telnet command and return immediately.

              The resulting output from the command can be read with
              _g_e_t___d_a_t_a_/_1 or _e_x_p_e_c_t_/_2_/_3.

       sseennddff((CCoonnnneeccttiioonn,, CCmmddFFoorrmmaatt,, AArrggss)) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Connection = connection() (see module ct_telnet)
                 CmdFormat = string()
                 Args = list()

              Send a telnet command and return immediately (uses a format
              string and a list of arguments to build the command).

SSEEEE AALLSSOO
       uunniixx__tteellnneett

AAUUTTHHOORRSS
       _<_>



                               common_test 1.6.2                  ct_telnet(3)
