prettypr(3)                Erlang Module Definition                prettypr(3)



NNAAMMEE
       prettypr - A generic pretty printer library.

DDEESSCCRRIIPPTTIIOONN
       A generic pretty printer library. This module uses a strict-style
       context passing implementation of John Hughes algorithm, described in
       "The design of a Pretty-printing Library". The paragraph-style
       formatting, empty documents, floating documents, and null strings are
       my own additions to the algorithm.

       To get started, you should read about the ddooccuummeenntt(()) data type; the
       main constructor functions: tteexxtt//11, aabboovvee//22, bbeessiiddee//22, nneesstt//22, sseepp//11,
       and ppaarr//22; and the main layout function ffoorrmmaatt//33.

       If you simply want to format a paragraph of plain text, you probably
       want to use the tteexxtt__ppaarr//22 function, as in the following example:

         prettypr:format(prettypr:text_par("Lorem ipsum dolor sit amet"), 20)

DDAATTAA TTYYPPEESS
         _d_o_c_u_m_e_n_t_(_):


           An abstract character-based "document" representing a number of
           possible layouts, which can be processed to produce a single
           concrete layout. A concrete layout can then be rendered as a
           sequence of characters containing linebreaks, which can be passed
           to a printer or terminal that uses a fixed-width font.

           For example, a document _s_e_p_(_[_t_e_x_t_(_"_f_o_o_"_)_, _t_e_x_t_(_"_b_a_r_"_)_]_) represents
           the two layouts

              foo bar

           and

              foo
              bar

           Which layout is chosen depends on the available horizontal space.
           When processing a document, the main parameters are the _p_a_p_e_r _w_i_d_t_h
           and the _l_i_n_e _w_i_d_t_h (also known as the "ribbon width"). In the
           resulting layout, no text should be printed beyond the paper width
           (which by default is 80 characters) as long as it can be avoided,
           and each single line of text (its indentation not counted, hence
           "ribbon") should preferably be no wider than the specified line
           width (which by default is 65).

           Documents can be joined into a single new document using the
           constructor functions of this module. Note that the new document
           often represents a larger number of possible layouts than just the
           sum of the components.

EEXXPPOORRTTSS
       aabboovvee((DD11::::ddooccuummeenntt(()),, DD22::::ddooccuummeenntt(()))) -->> ddooccuummeenntt(())

              Concatenates documents vertically. Returns a document
              representing the concatenation of the documents _D_1 and _D_2 such
              that the first line of _D_2 follows directly below the last line
              of _D_1, and the first character of _D_2 is in the same horizontal
              column as the first character of _D_1, in all possible layouts.

              Examples:

                   ab  cd  =>  ab
                               cd

                                  abc
                   abc   fgh  =>   de
                    de    ij      fgh
                                   ij

       bbeessiiddee((DD11::::ddooccuummeenntt(()),, DD22::::ddooccuummeenntt(()))) -->> ddooccuummeenntt(())

              Concatenates documents horizontally. Returns a document
              representing the concatenation of the documents _D_1 and _D_2 such
              that the last character of _D_1 is horizontally adjacent to the
              first character of _D_2, in all possible layouts. (Note: any
              indentation of _D_2 is lost.)

              Examples:

                   ab  cd  =>  abcd

                   ab  ef      ab
                   cd  gh  =>  cdef
                                 gh

       bbeesstt((DD::::ddooccuummeenntt(()),, PPaappeerrWWiiddtthh::::iinntteeggeerr(()),, LLiinneeWWiiddtthh::::iinntteeggeerr(()))) -->>
       eemmppttyy || ddooccuummeenntt(())

              Selects a "best" layout for a document, creating a corresponding
              fixed-layout document. If no layout could be produced, the atom
              _e_m_p_t_y is returned instead. For details about _P_a_p_e_r_W_i_d_t_h and
              _L_i_n_e_W_i_d_t_h, see ffoorrmmaatt//33. The function is idempotent.

              One possible use of this function is to compute a fixed layout
              for a document, which can then be included as part of a larger
              document. For example:

                   above(text("Example:"), nest(8, best(D, W - 12, L - 6)))

              will format _D as a displayed-text example indented by 8, whose
              right margin is indented by 4 relative to the paper width _W of
              the surrounding document, and whose maximum individual line
              length is shorter by 6 than the line length _L of the surrounding
              document.

              This function is used by the ffoorrmmaatt//33 function to prepare a
              document before being laid out as text.

       bbrreeaakk((DD::::ddooccuummeenntt(()))) -->> ddooccuummeenntt(())

              Forces a line break at the end of the given document. This is a
              utility function; see eemmppttyy//00 for details.

       eemmppttyy(()) -->> ddooccuummeenntt(())

              Yields the empty document, which has neither height nor width.
              (_e_m_p_t_y is thus different from an empty tteexxtt string, which has
              zero width but height 1.)

              Empty documents are occasionally useful; in particular, they
              have the property that _a_b_o_v_e_(_X_, _e_m_p_t_y_(_)_) will force a new line
              after _X without leaving an empty line below it; since this is a
              common idiom, the utility function bbrreeaakk//11 will place a given
              document in such a context.

              _S_e_e _a_l_s_o_: tteexxtt//11.

       ffllooaattiinngg((DD::::ddooccuummeenntt(()))) -->> ddooccuummeenntt(())

              Equivalent to ffllooaattiinngg((DD,, 00,, 00)).

       ffllooaattiinngg((DD::::ddooccuummeenntt(()),, HHpp::::iinntteeggeerr(()),, VVpp::::iinntteeggeerr(()))) -->> ddooccuummeenntt(())

              Creates a "floating" document. The result represents the same
              set of layouts as _D; however, a floating document may be moved
              relative to other floating documents immediately beside or above
              it, according to their relative horizontal and vertical
              priorities. These priorities are set with the _H_p and _V_p
              parameters; if omitted, both default to zero.

              Notes: Floating documents appear to work well, but are currently
              less general than you might wish, losing effect when embedded in
              certain contexts. It is possible to nest floating-operators
              (even with different priorities), but the effects may be
              difficult to predict. In any case, note that the way the
              algorithm reorders floating documents amounts to a "bubblesort",
              so don't expect it to be able to sort large sequences of
              floating documents quickly.

       ffoollllooww((DD11::::ddooccuummeenntt(()),, DD22::::ddooccuummeenntt(()))) -->> ddooccuummeenntt(())

              Equivalent to ffoollllooww((DD11,, DD22,, 00)).

       ffoollllooww((DD11::::ddooccuummeenntt(()),, DD22::::ddooccuummeenntt(()),, OOffffsseett::::iinntteeggeerr(()))) -->> ddooccuummeenntt(())

              Separates two documents by either a single space, or a line
              break and intentation. In other words, one of the layouts

                   abc def

              or

                   abc
                    def

              will be generated, using the optional offset in the latter case.
              This is often useful for typesetting programming language
              constructs.

              This is a utility function; see ppaarr//22 for further details.

              _S_e_e _a_l_s_o_: ffoollllooww//22.

       ffoorrmmaatt((DD::::ddooccuummeenntt(()))) -->> ssttrriinngg(())

              Equivalent to ffoorrmmaatt((DD,, 8800)).

       ffoorrmmaatt((DD::::ddooccuummeenntt(()),, PPaappeerrWWiiddtthh::::iinntteeggeerr(()))) -->> ssttrriinngg(())

              Equivalent to ffoorrmmaatt((DD,, PPaappeerrWWiiddtthh,, 6655)).

       ffoorrmmaatt((DD::::ddooccuummeenntt(()),, PPaappeerrWWiiddtthh::::iinntteeggeerr(()),, LLiinneeWWiiddtthh::::iinntteeggeerr(()))) -->>
       ssttrriinngg(())

              Computes a layout for a document and returns the corresponding
              text. See ddooccuummeenntt(()) for further information. Throws _n_o___l_a_y_o_u_t
              if no layout could be selected.

              _P_a_p_e_r_W_i_d_t_h specifies the total width (in character positions) of
              the field for which the text is to be laid out. _L_i_n_e_W_i_d_t_h
              specifies the desired maximum width (in number of characters) of
              the text printed on any single line, disregarding leading and
              trailing white space. These parameters need to be properly
              balanced in order to produce good layouts. By default,
              _P_a_p_e_r_W_i_d_t_h is 80 and _L_i_n_e_W_i_d_t_h is 65.

              _S_e_e _a_l_s_o_: bbeesstt//33.

       nneesstt((NN::::iinntteeggeerr(()),, DD::::ddooccuummeenntt(()))) -->> ddooccuummeenntt(())

              Indents a document a number of character positions to the right.
              Note that _N may be negative, shifting the text to the left, or
              zero, in which case _D is returned unchanged.

       nnuullll__tteexxtt((CChhaarraacctteerrss::::ssttrriinngg(()))) -->> ddooccuummeenntt(())

              Similar to tteexxtt//11, but the result is treated as having zero
              width. This is regardless of the actual length of the string.
              Null text is typically used for markup, which is supposed to
              have no effect on the actual layout.

              The standard example is when formatting source code as HTML to
              be placed within _<_p_r_e_>_._._._<_/_p_r_e_> markup, and using e.g. _<_i_> and
              _<_b_> to make parts of the source code stand out. In this case,
              the markup does not add to the width of the text when viewed in
              an HTML browser, so the layout engine should simply pretend that
              the markup has zero width.

              _S_e_e _a_l_s_o_: eemmppttyy//00, tteexxtt//11.

       ppaarr((DDooccss::::[[ddooccuummeenntt(())]])) -->> ddooccuummeenntt(())

              Equivalent to ppaarr((DDss,, 00)).

       ppaarr((DDooccss::::[[ddooccuummeenntt(())]],, OOffffsseett::::iinntteeggeerr(()))) -->> ddooccuummeenntt(())

              Arranges documents in a paragraph-like layout. Returns a
              document representing all possible left-aligned paragraph-like
              layouts of the (nonempty) sequence _D_o_c_s of documents. Elements
              in _D_o_c_s are separated horizontally by a single space character
              and vertically with a single line break. All lines following the
              first (if any) are indented to the same left column, whose
              indentation is specified by the optional _O_f_f_s_e_t parameter
              relative to the position of the first element in _D_o_c_s. For
              example, with an offset of -4, the following layout can be
              produced, for a list of documents representing the numbers 0 to
              15:

                       0 1 2 3
                   4 5 6 7 8 9
                   10 11 12 13
                   14 15

              or with an offset of +2:

                   0 1 2 3 4 5 6
                     7 8 9 10 11
                     12 13 14 15

              The utility function tteexxtt__ppaarr//22 can be used to easily transform
              a string of text into a _p_a_r representation by splitting it into
              words.

              Note that whenever a document in _D_o_c_s contains a line break, it
              will be placed on a separate line. Thus, neither a layout such
              as

                   ab cd
                      ef

              nor

                   ab
                   cd ef

              will be generated. However, a useful idiom for making the former
              variant possible (when wanted) is _b_e_s_i_d_e_(_p_a_r_(_[_D_1_, _t_e_x_t_(_"_"_)_]_, _N_)_,
              _D_2_) for two documents _D_1 and _D_2. This will break the line
              between _D_1 and _D_2 if _D_1 contains a line break (or if otherwise
              necessary), and optionally further indent _D_2 by _N character
              positions. The utility function ffoollllooww//33 creates this context
              for two documents _D_1 and _D_2, and an optional integer _N.

              _S_e_e _a_l_s_o_: ppaarr//11, tteexxtt__ppaarr//22.

       sseepp((DDooccss::::[[ddooccuummeenntt(())]])) -->> ddooccuummeenntt(())

              Arranges documents horizontally or vertically, separated by
              whitespace. Returns a document representing two alternative
              layouts of the (nonempty) sequence _D_o_c_s of documents, such that
              either all elements in _D_o_c_s are concatenated horizontally, and
              separated by a space character, or all elements are concatenated
              vertically (without extra separation).

              Note: If some document in _D_o_c_s contains a line break, the
              vertical layout will always be selected.

              Examples:

                                                ab
                   ab  cd  ef  =>  ab cd ef  |  cd
                                                ef

                   ab           ab
                   cd  ef  =>   cd
                                ef

              _S_e_e _a_l_s_o_: ppaarr//22.

       tteexxtt((CChhaarraacctteerrss::::ssttrriinngg(()))) -->> ddooccuummeenntt(())

              Yields a document representing a fixed, unbreakable sequence of
              characters. The string should contain only _p_r_i_n_t_a_b_l_e characters
              (tabs allowed but not recommended), and _n_o_t newline, line feed,
              vertical tab, etc. A tab character (_\_t) is interpreted as
              padding of 1-8 space characters to the next column of 8
              characters _w_i_t_h_i_n _t_h_e _s_t_r_i_n_g.

              _S_e_e _a_l_s_o_: eemmppttyy//00, nnuullll__tteexxtt//11, tteexxtt__ppaarr//22.

       tteexxtt__ppaarr((TTeexxtt::::ssttrriinngg(()))) -->> ddooccuummeenntt(())

              Equivalent to tteexxtt__ppaarr((TTeexxtt,, 00)).

       tteexxtt__ppaarr((TTeexxtt::::ssttrriinngg(()),, IInnddeennttaattiioonn::::iinntteeggeerr(()))) -->> ddooccuummeenntt(())

              Yields a document representing paragraph-formatted plain text.
              The optional _I_n_d_e_n_t_a_t_i_o_n parameter specifies the extra
              indentation of the first line of the paragraph. For example,
              _t_e_x_t___p_a_r_(_"_L_o_r_e_m _i_p_s_u_m _d_o_l_o_r _s_i_t _a_m_e_t_"_, _N_) could represent

                   Lorem ipsum dolor
                   sit amet

              if _N = 0, or

                     Lorem ipsum
                   dolor sit amet

              if _N = 2, or

                   Lorem ipsum dolor
                     sit amet

              if _N = -2.

              (The sign of the indentation is thus reversed compared to the
              ppaarr//22 function, and the behaviour varies slightly depending on
              the sign in order to match the expected layout of a paragraph of
              text.)

              Note that this is just a utility function, which does all the
              work of splitting the given string into words separated by
              whitespace and setting up a ppaarr with the proper indentation,
              containing a list of tteexxtt elements.

              _S_e_e _a_l_s_o_: ppaarr//22, tteexxtt//11, tteexxtt__ppaarr//11.

AAUUTTHHOORRSS
       Richard Carlsson _<_c_a_r_l_s_s_o_n_._r_i_c_h_a_r_d_@_g_m_a_i_l_._c_o_m_>



                              syntax_tools 1.6.9                   prettypr(3)
