dyntrace(3)                Erlang Module Definition                dyntrace(3)



NNAAMMEE
       dyntrace - Interface to dynamic tracing

DDEESSCCRRIIPPTTIIOONN
       This module implements interfaces to dynamic tracing, should such be
       compiled into the virtual machine. For a standard and/or commercial
       build, no dynamic tracing is available, in which case none of the
       functions in this module is usable or give any effect.

       Should dynamic tracing be enabled in the current build, either by
       configuring with _._/_c_o_n_f_i_g_u_r_e _-_-_w_i_t_h_-_d_y_n_a_m_i_c_-_t_r_a_c_e_=_d_t_r_a_c_e or with
       _._/_c_o_n_f_i_g_u_r_e _-_-_w_i_t_h_-_d_y_n_a_m_i_c_-_t_r_a_c_e_=_s_y_s_t_e_m_t_a_p, the module can be used for
       two things:

         * Trigger the user-probe _u_s_e_r___t_r_a_c_e___i_4_s_4 in the NIF library
           _d_y_n_t_r_a_c_e_._s_o by calling _d_y_n_t_r_a_c_e_:_p_/_{_1_,_2_,_3_,_4_,_5_,_6_,_7_,_8_}.

         * Set a user specified tag that will be present in the trace messages
           of both the _e_f_i_l_e___d_r_v and the user-probe mentioned above.

       Both building with dynamic trace probes and using them is experimental
       and unsupported by Erlang/OTP. It is included as an option for the
       developer to trace and debug performance issues in their systems.

       The original implementation is mostly done by Scott Lystiger Fritchie
       as an Open Source Contribution and it should be viewed as such even
       though the source for dynamic tracing as well as this module is
       included in the main distribution. However, the ability to use dynamic
       tracing of the virtual machine is a very valuable contribution which
       OTP has every intention to maintain as a tool for the developer.

       How to write _d programs or _s_y_s_t_e_m_t_a_p scripts can be learned from books
       and from a lot of pages on the Internet. This manual page does not
       include any documentation about using the dynamic trace tools of
       respective platform. The _e_x_a_m_p_l_e_s directory of the _r_u_n_t_i_m_e___t_o_o_l_s
       application however contains comprehensive examples of both _d and
       _s_y_s_t_e_m_t_a_p programs that will help you get started. Another source of
       information is the _R_E_A_D_M_E_._d_t_r_a_c_e_(_._m_d_) and _R_E_A_D_M_E_._s_y_s_t_e_m_t_a_p_(_._m_d_) files
       in the Erlang source top directory.

EEXXPPOORRTTSS
       aavvaaiillaabbllee(()) -->> bboooolleeaann(())

              This function uses the NIF library to determine if dynamic
              tracing is available. Usually calling eerrllaanngg::ssyysstteemm__iinnffoo//11 is a
              better indicator of the availability of dynamic tracing.

              The function will throw an exception if the _d_y_n_t_r_a_c_e NIF library
              could not be loaded by the on_load function of this module.

       pp(()) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message only containing the user tag and zeroes/empty strings in
              all other fields.

       pp((iinntteeggeerr(()) || ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer or string
              parameter in the first integer/string field.

       pp((iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr ||
       bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer() or string()
              parameters as the first fields of respective type. integer()
              parameters should be put before any string() parameters. I.e.
              _p_(_1_,_"_H_e_l_l_o_"_) is ok, as is _p_(_1_,_1_) and _p_(_"_H_e_l_l_o_"_,_"_A_g_a_i_n_"_), but not
              _p_(_"_H_e_l_l_o_"_,_1_).

       pp((iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()))) -->>
       ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer() or string()
              parameters as the first fields of respective type. integer()
              parameters should be put before any string() parameters, as in
              pp//22.

       pp((iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()),,
       iinntteeggeerr(()) || ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer() or string()
              parameters as the first fields of respective type. integer()
              parameters should be put before any string() parameters, as in
              pp//22.

       pp((iinntteeggeerr(()),, iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) ||
       ssttrriinngg(()),, ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer() or string()
              parameters as the first fields of respective type. integer()
              parameters should be put before any string() parameters, as in
              pp//22.

              There can be no more than four parameters of any type (integer()
              or string()), so the first parameter has to be an integer() and
              the last a string().

       pp((iinntteeggeerr(()),, iinntteeggeerr(()),, iinntteeggeerr(()) || ssttrriinngg(()),, iinntteeggeerr(()) || ssttrriinngg(()),,
       ssttrriinngg(()),, ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer() or string()
              parameters as the first fields of respective type. integer()
              parameters should be put before any string() parameters, as in
              pp//22.

              There can be no more than four parameters of any type (integer()
              or string()), so the first two parameters has to be integer()'s
              and the last two string()'s.

       pp((iinntteeggeerr(()),, iinntteeggeerr(()),, iinntteeggeerr(()),, iinntteeggeerr(()) || ssttrriinngg(()),, ssttrriinngg(()),,
       ssttrriinngg(()),, ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing the user tag and the integer() or string()
              parameters as the first fields of respective type. integer()
              parameters should be put before any string() parameters, as in
              pp//22.

              There can be no more than four parameters of any type (integer()
              or string()), so the first three parameters has to be
              integer()'s and the last three string()'s.

       pp((iinntteeggeerr(()),, iinntteeggeerr(()),, iinntteeggeerr(()),, iinntteeggeerr(()),, ssttrriinngg(()),, ssttrriinngg(()),,
       ssttrriinngg(()),, ssttrriinngg(()))) -->> ttrruuee || ffaallssee || eerrrroorr || bbaaddaarrgg

              Calling this function will trigger the "user" trace probe
              user_trace_i4s4 in the dyntrace NIF module, sending a trace
              message containing all the integer()'s and string()'s provided,
              as well as any user tag set in the current process.

       ggeett__ttaagg(()) -->> bbiinnaarryy(()) || uunnddeeffiinneedd

              This function returns the user tag set in the current process.
              If no tag is set or dynamic tracing is not available, it returns
              _u_n_d_e_f_i_n_e_d

       ggeett__ttaagg(()) -->> bbiinnaarryy(()) || uunnddeeffiinneedd

              This function returns the user tag set in the current process
              or, if no user tag is present, the last user tag sent to the
              process together with a message (in the same way as sseeqquueennttiiaall
              ttrraaccee ttookkeennss are spread to other processes together with
              messages. For an explanation of how user tags can be spread
              together with messages, see sspprreeaadd__ttaagg//11. If no tag is found or
              dynamic tracing is not available, it returns _u_n_d_e_f_i_n_e_d

       ppuutt__ttaagg((IItteemm)) -->> bbiinnaarryy(()) || uunnddeeffiinneedd

              Types:

                 Item = iodata()

              This function sets the user tag of the current process. The user
              tag is a binary(), but can be specified as any iodata(), which
              is automatically converted to a binary by this function.

              The user tag is provided to the user probes triggered by calls
              top _d_y_n_t_r_a_c_e_:_p_/_{_1_,_2_,_3_,_4_,_5_,_6_,_7_,_8_} as well as probes in the
              efile_driver. In the future, user tags might be added to more
              probes.

              The old user tag (if any) is returned, or _u_n_d_e_f_i_n_e_d if no user
              tag was present or dynamic tracing is not enabled.

       sspprreeaadd__ttaagg((bboooolleeaann(()))) -->> TTaaggDDaattaa

              Types:

                 TagData = opaque data that can be used as parameter to
                 rreessttoorree__ttaagg//11

              This function controls if user tags are to be spread to other
              processes with the next message. Spreading of user tags work
              like spreading of sequential trace tokens, so that a received
              user tag will be active in the process until the next message
              arrives (if that message does not also contain the user tag.

              This functionality is used when a client process communicates
              with a file i/o-server to spread the user tag to the I/O-server
              and then down to the efile_drv driver. By using _s_p_r_e_a_d___t_a_g_/_1 and
              _r_e_s_t_o_r_e___t_a_g_/_1, one can enable or disable spreading of user tags
              to other processes and then restore the previous state of the
              user tag. The TagData returned from this call contains all
              previous information so the state (including any previously
              spread user tags) will be completely restored by a later call to
              _r_e_s_t_o_r_e___t_a_g_/_1.

              The ffiillee module already spread's tags, so there is noo need to
              manually call these function to get user tags spread to the
              efile driver through that module.

              The most use of this function would be if one for example uses
              the iioo module to communicate with an I/O-server for a regular
              file, like in the following example:

              f() ->
                 {ok, F} = file:open("test.tst",[write]),
                 Saved = dyntrace:spread_tag(true),
                 io:format(F,"Hello world!",[]),
                 dyntrace:restore_tag(Saved),
                 file:close(F).


              In this example, any user tag set in the calling process will be
              spread to the I/O-server when the io:format call is done.

       rreessttoorree__ttaagg((TTaaggDDaattaa)) -->> ttrruuee

              Types:

                 TagData = opaque data returned by sspprreeaadd__ttaagg//11

              Restores the previous state of user tags and their spreading as
              it was before a call to sspprreeaadd__ttaagg//11. Note that the restoring is
              not limited to the same process, one can utilize this to turn
              off spreding in one process and restore it in a newly created,
              the one that actually is going to send messages:

              f() ->
                  TagData=dyntrace:spread_tag(false),
                  spawn(fun() ->
                           dyntrace:restore_tag(TagData),
                           do_something()
                        end),
                  do_something_else(),
                  dyntrace:restore_tag(TagData).


              Correctly handling user tags and their spreading might take some
              effort, as Erlang programs tend to send and receive messages so
              that sometimes the user tag gets lost due to various things,
              like double receives or communication with a port (ports do not
              handle user tags, in the same way as they do not handle regular
              sequential trace tokens).



Ericsson AB                   runtime_tools 1.8.9                  dyntrace(3)
