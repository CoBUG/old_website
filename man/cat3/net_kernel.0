net_kernel(3)              Erlang Module Definition              net_kernel(3)



NNAAMMEE
       net_kernel - Erlang Networking Kernel

DDEESSCCRRIIPPTTIIOONN
       The net kernel is a system process, registered as _n_e_t___k_e_r_n_e_l, which
       must be running for distributed Erlang to work. The purpose of this
       process is to implement parts of the BIFs _s_p_a_w_n_/_4 and _s_p_a_w_n___l_i_n_k_/_4, and
       to provide monitoring of the network.

       An Erlang node is started using the command line flag _-_n_a_m_e or _-_s_n_a_m_e:

       $ erl -sname foobar

       It is also possible to call _n_e_t___k_e_r_n_e_l_:_s_t_a_r_t_(_[_f_o_o_b_a_r_]_) directly from
       the normal Erlang shell prompt:

       1> net_kernel:start([foobar, shortnames]).
       {ok,<0.64.0>}
       (foobar@gringotts)2>

       If the node is started with the command line flag _-_s_n_a_m_e, the node name
       will be _f_o_o_b_a_r_@_H_o_s_t, where _H_o_s_t is the short name of the host (not the
       fully qualified domain name). If started with the _-_n_a_m_e flag, _H_o_s_t is
       the fully qualified domain name. See _e_r_l_(_1_).

       Normally, connections are established automatically when another node
       is referenced. This functionality can be disabled by setting the Kernel
       configuration parameter _d_i_s_t___a_u_t_o___c_o_n_n_e_c_t to _f_a_l_s_e, see kkeerrnneell((66)). In
       this case, connections must be established explicitly by calling
       _n_e_t___k_e_r_n_e_l_:_c_o_n_n_e_c_t___n_o_d_e_/_1.

       Which nodes are allowed to communicate with each other is handled by
       the magic cookie system, see DDiissttrriibbuutteedd EErrllaanngg in the Erlang Reference
       Manual.

EEXXPPOORRTTSS
       aallllooww((NNooddeess)) -->> ookk || eerrrroorr

              Types:

                 Nodes = [node()]

              Limits access to the specified set of nodes. Any access attempts
              made from (or to) nodes not in _N_o_d_e_s will be rejected.

              Returns _e_r_r_o_r if any element in _N_o_d_e_s is not an atom.

       ccoonnnneecctt__nnooddee((NNooddee)) -->> bboooolleeaann(()) || iiggnnoorreedd

              Types:

                 Node = node()

              Establishes a connection to _N_o_d_e. Returns _t_r_u_e if successful,
              _f_a_l_s_e if not, and _i_g_n_o_r_e_d if the local node is not alive.

       mmoonniittoorr__nnooddeess((FFllaagg)) -->> ookk || EErrrroorr

       mmoonniittoorr__nnooddeess((FFllaagg,, OOppttiioonnss)) -->> ookk || EErrrroorr

              Types:

                 Flag = boolean()
                 Options = [Option]
                 Option = {node_type, NodeType} | nodedown_reason
                 NodeType = visible | hidden | all
                 Error = error | {error, term()}

              The calling process subscribes or unsubscribes to node status
              change messages. A _n_o_d_e_u_p message is delivered to all
              subscribing process when a new node is connected, and a _n_o_d_e_d_o_w_n
              message is delivered when a node is disconnected.

              If _F_l_a_g is _t_r_u_e, a new subscription is started. If _F_l_a_g is
              _f_a_l_s_e, all previous subscriptions -- started with the same
              _O_p_t_i_o_n_s -- are stopped. Two option lists are considered the same
              if they contain the same set of options.

              As of _k_e_r_n_e_l version 2.11.4, and _e_r_t_s version 5.5.4, the
              following is guaranteed:

                * _n_o_d_e_u_p messages will be delivered before delivery of any
                  message from the remote node passed through the newly
                  established connection.

                * _n_o_d_e_d_o_w_n messages will not be delivered until all messages
                  from the remote node that have been passed through the
                  connection have been delivered.

              Note, that this is _n_o_t guaranteed for _k_e_r_n_e_l versions before
              2.11.4.

              As of _k_e_r_n_e_l version 2.11.4 subscriptions can also be made
              before the _n_e_t___k_e_r_n_e_l server has been started, i.e.,
              _n_e_t___k_e_r_n_e_l_:_m_o_n_i_t_o_r___n_o_d_e_s_/_[_1_,_2_] does not return _i_g_n_o_r_e_d.

              As of _k_e_r_n_e_l version 2.13, and _e_r_t_s version 5.7, the following
              is guaranteed:

                * _n_o_d_e_u_p messages will be delivered after the corresponding
                  node appears in results from _e_r_l_a_n_g_:_n_o_d_e_s_/_X.

                * _n_o_d_e_d_o_w_n messages will be delivered after the corresponding
                  node has disappeared in results from _e_r_l_a_n_g_:_n_o_d_e_s_/_X.

              Note, that this is _n_o_t guaranteed for _k_e_r_n_e_l versions before
              2.13.

              The format of the node status change messages depends on
              _O_p_t_i_o_n_s. If _O_p_t_i_o_n_s is [], which is the default, the format is:

              {nodeup, Node} | {nodedown, Node}
                Node = node()

              If _O_p_t_i_o_n_s _/_= _[_], the format is:

              {nodeup, Node, InfoList} | {nodedown, Node, InfoList}
                Node = node()
                InfoList = [{Tag, Val}]

              _I_n_f_o_L_i_s_t is a list of tuples. Its contents depends on _O_p_t_i_o_n_s,
              see below.

              Also, when _O_p_t_i_o_n_L_i_s_t _=_= _[_] only visible nodes, that is, nodes
              that appear in the result of nnooddeess//00, are monitored.

              _O_p_t_i_o_n can be any of the following:

                _{_n_o_d_e___t_y_p_e_, _N_o_d_e_T_y_p_e_}:
                  Currently valid values for _N_o_d_e_T_y_p_e are:

                  _v_i_s_i_b_l_e:
                    Subscribe to node status change messages for visible nodes
                    only. The tuple _{_n_o_d_e___t_y_p_e_, _v_i_s_i_b_l_e_} is included in
                    _I_n_f_o_L_i_s_t.

                  _h_i_d_d_e_n:
                    Subscribe to node status change messages for hidden nodes
                    only. The tuple _{_n_o_d_e___t_y_p_e_, _h_i_d_d_e_n_} is included in
                    _I_n_f_o_L_i_s_t.

                  _a_l_l:
                    Subscribe to node status change messages for both visible
                    and hidden nodes. The tuple _{_n_o_d_e___t_y_p_e_, _v_i_s_i_b_l_e _| _h_i_d_d_e_n_}
                    is included in _I_n_f_o_L_i_s_t.

                _n_o_d_e_d_o_w_n___r_e_a_s_o_n:
                  The tuple _{_n_o_d_e_d_o_w_n___r_e_a_s_o_n_, _R_e_a_s_o_n_} is included in _I_n_f_o_L_i_s_t
                  in _n_o_d_e_d_o_w_n messages. _R_e_a_s_o_n can be:

                  _c_o_n_n_e_c_t_i_o_n___s_e_t_u_p___f_a_i_l_e_d:
                    The connection setup failed (after _n_o_d_e_u_p messages had
                    been sent).

                  _n_o___n_e_t_w_o_r_k:
                    No network available.

                  _n_e_t___k_e_r_n_e_l___t_e_r_m_i_n_a_t_e_d:
                    The _n_e_t___k_e_r_n_e_l process terminated.

                  _s_h_u_t_d_o_w_n:
                    Unspecified connection shutdown.

                  _c_o_n_n_e_c_t_i_o_n___c_l_o_s_e_d:
                    The connection was closed.

                  _d_i_s_c_o_n_n_e_c_t:
                    The connection was disconnected (forced from the current
                    node).

                  _n_e_t___t_i_c_k___t_i_m_e_o_u_t:
                    Net tick timeout.

                  _s_e_n_d___n_e_t___t_i_c_k___f_a_i_l_e_d:
                    Failed to send net tick over the connection.

                  _g_e_t___s_t_a_t_u_s___f_a_i_l_e_d:
                    Status information retrieval from the _P_o_r_t holding the
                    connection failed.

       ggeett__nneett__ttiicckkttiimmee(()) -->> RReess

              Types:

                 Res = NetTicktime | {ongoing_change_to, NetTicktime} |
                 ignored
                 NetTicktime = integer() >= 1

              Gets _n_e_t___t_i_c_k_t_i_m_e (see kkeerrnneell((66))).

              Currently defined return values (_R_e_s):

                _N_e_t_T_i_c_k_t_i_m_e:
                  _n_e_t___t_i_c_k_t_i_m_e is _N_e_t_T_i_c_k_t_i_m_e seconds.

                _{_o_n_g_o_i_n_g___c_h_a_n_g_e___t_o_, _N_e_t_T_i_c_k_t_i_m_e_}:
                  _n_e_t___k_e_r_n_e_l is currently changing _n_e_t___t_i_c_k_t_i_m_e to _N_e_t_T_i_c_k_t_i_m_e
                  seconds.

                _i_g_n_o_r_e_d:
                  The local node is not alive.

       sseett__nneett__ttiicckkttiimmee((NNeettTTiicckkttiimmee)) -->> RReess

       sseett__nneett__ttiicckkttiimmee((NNeettTTiicckkttiimmee,, TTrraannssiittiioonnPPeerriioodd)) -->> RReess

              Types:

                 NetTicktime = integer() >= 1
                 TransitionPeriod = integer() >= 0
                 Res = unchanged
                     | change_initiated
                     | {ongoing_change_to, NewNetTicktime}
                 NewNetTicktime = integer() >= 1

              Sets _n_e_t___t_i_c_k_t_i_m_e (see kkeerrnneell((66))) to _N_e_t_T_i_c_k_t_i_m_e seconds.
              _T_r_a_n_s_i_t_i_o_n_P_e_r_i_o_d defaults to 60.

              Some definitions:

                TThhee mmiinniimmuumm ttrraannssiittiioonn ttrraaffffiicc iinntteerrvvaall ((_M_T_T_I):
                  _m_i_n_i_m_u_m_(_N_e_t_T_i_c_k_t_i_m_e_, _P_r_e_v_i_o_u_s_N_e_t_T_i_c_k_t_i_m_e_)_*_1_0_0_0 _d_i_v _4
                  milliseconds.

                TThhee ttrraannssiittiioonn ppeerriioodd::
                  The time of the least number of consecutive _M_T_T_Is to cover
                  _T_r_a_n_s_i_t_i_o_n_P_e_r_i_o_d seconds following the call to
                  _s_e_t___n_e_t___t_i_c_k_t_i_m_e_/_2 (i.e. ((_T_r_a_n_s_i_t_i_o_n_P_e_r_i_o_d_*_1_0_0_0 _- _1_) _d_i_v
                  _M_T_T_I _+ _1_)_*_M_T_T_I milliseconds).

              If _<_a_n_n_o_>_N_e_t_T_i_c_k_t_i_m_e_<_/_a_n_n_o_> _< _P_r_e_v_i_o_u_s_N_e_t_T_i_c_k_t_i_m_e, the actual
              _n_e_t___t_i_c_k_t_i_m_e change will be done at the end of the transition
              period; otherwise, at the beginning. During the transition
              period, _n_e_t___k_e_r_n_e_l will ensure that there will be outgoing
              traffic on all connections at least every _M_T_T_I millisecond.

          NNoottee::
              The _n_e_t___t_i_c_k_t_i_m_e changes have to be initiated on all nodes in
              the network (with the same _N_e_t_T_i_c_k_t_i_m_e) before the end of any
              transition period on any node; otherwise, connections may
              erroneously be disconnected.


              Returns one of the following:

                _u_n_c_h_a_n_g_e_d:
                  _n_e_t___t_i_c_k_t_i_m_e already had the value of _N_e_t_T_i_c_k_t_i_m_e and was
                  left unchanged.

                _c_h_a_n_g_e___i_n_i_t_i_a_t_e_d:
                  _n_e_t___k_e_r_n_e_l has initiated the change of _n_e_t___t_i_c_k_t_i_m_e to
                  _N_e_t_T_i_c_k_t_i_m_e seconds.

                _{_o_n_g_o_i_n_g___c_h_a_n_g_e___t_o_, _N_e_w_N_e_t_T_i_c_k_t_i_m_e_}:
                  The request was _i_g_n_o_r_e_d; because, _n_e_t___k_e_r_n_e_l was busy
                  changing _n_e_t___t_i_c_k_t_i_m_e to _N_e_w_N_e_t_T_i_c_k_t_i_m_e seconds.

       ssttaarrtt(([[NNaammee]])) -->> {{ookk,, ppiidd(())}} || {{eerrrroorr,, RReeaassoonn}}
       ssttaarrtt(([[NNaammee,, NNaammeeTTyyppee]])) -->> {{ookk,, ppiidd(())}} || {{eerrrroorr,, RReeaassoonn}}
       ssttaarrtt(([[NNaammee,, NNaammeeTTyyppee,, TTiicckkttiimmee]])) -->> {{ookk,, ppiidd(())}} || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Name = atom()
                 NameType = shortnames | longnames
                 Reason = {already_started, pid()} | term()

              Note that the argument is a list with exactly one, two or three
              arguments. _N_a_m_e_T_y_p_e defaults to _l_o_n_g_n_a_m_e_s and _T_i_c_k_t_i_m_e to 15000.

              Turns a non-distributed node into a distributed node by starting
              _n_e_t___k_e_r_n_e_l and other necessary processes.

       ssttoopp(()) -->> ookk || {{eerrrroorr,, RReeaassoonn}}

              Types:

                 Reason = not_allowed | not_found

              Turns a distributed node into a non-distributed node. For other
              nodes in the network, this is the same as the node going down.
              Only possible when the net kernel was started using _s_t_a_r_t_/_1,
              otherwise returns _{_e_r_r_o_r_, _n_o_t___a_l_l_o_w_e_d_}. Returns _{_e_r_r_o_r_,
              _n_o_t___f_o_u_n_d_} if the local node is not alive.



Ericsson AB                      kernel 2.15.2                   net_kernel(3)
