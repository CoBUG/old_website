calendar(3)                Erlang Module Definition                calendar(3)



NNAAMMEE
       calendar - Local and universal time, day-of-the-week, date and time
       conversions

DDEESSCCRRIIPPTTIIOONN
       This module provides computation of local and universal time, day-of-
       the-week, and several time conversion functions.

       Time is local when it is adjusted in accordance with the current time
       zone and daylight saving. Time is universal when it reflects the time
       at longitude zero, without any adjustment for daylight saving.
       Universal Coordinated Time (UTC) time is also called Greenwich Mean
       Time (GMT).

       The time functions _l_o_c_a_l___t_i_m_e_/_0 and _u_n_i_v_e_r_s_a_l___t_i_m_e_/_0 provided in this
       module both return date and time. The reason for this is that separate
       functions for date and time may result in a date/time combination which
       is displaced by 24 hours. This happens if one of the functions is
       called before midnight, and the other after midnight. This problem also
       applies to the Erlang BIFs _d_a_t_e_/_0 and _t_i_m_e_/_0, and their use is strongly
       discouraged if a reliable date/time stamp is required.

       All dates conform to the Gregorian calendar. This calendar was
       introduced by Pope Gregory XIII in 1582 and was used in all Catholic
       countries from this year. Protestant parts of Germany and the
       Netherlands adopted it in 1698, England followed in 1752, and Russia in
       1918 (the October revolution of 1917 took place in November according
       to the Gregorian calendar).

       The Gregorian calendar in this module is extended back to year 0. For a
       given date, the _g_r_e_g_o_r_i_a_n _d_a_y_s is the number of days up to and
       including the date specified. Similarly, the _g_r_e_g_o_r_i_a_n _s_e_c_o_n_d_s for a
       given date and time, is the the number of seconds up to and including
       the specified date and time.

       For computing differences between epochs in time, use the functions
       counting gregorian days or seconds. If epochs are given as local time,
       they must be converted to universal time, in order to get the correct
       value of the elapsed time between epochs. Use of the function
       _t_i_m_e___d_i_f_f_e_r_e_n_c_e_/_2 is discouraged.

       There exists different definitions for the week of the year. The
       calendar module contains a week of the year implementation which
       conforms to the ISO 8601 standard. Since the week number for a given
       date can fall on the previous, the current or on the next year it is
       important to provide the information which year is it together with the
       week number. The function _i_s_o___w_e_e_k___n_u_m_b_e_r_/_0 and _i_s_o___w_e_e_k___n_u_m_b_e_r_/_1
       returns a tuple of the year and the week number.

DDAATTAA TTYYPPEESS
       ddaatteettiimmee(()) = {ddaattee(()), ttiimmee(())}

       ddaatteettiimmee11997700(()) = {{yyeeaarr11997700(()), mmoonntthh(()), ddaayy(())}, ttiimmee(())}

       ddaattee(()) = {yyeeaarr(()), mmoonntthh(()), ddaayy(())}

       yyeeaarr(()) = integer() >= 0

              Year cannot be abbreviated. Example: 93 denotes year 93, not
              1993. Valid range depends on the underlying OS. The date tuple
              must denote a valid date.

       yyeeaarr11997700(()) = 1970..10000

       mmoonntthh(()) = 1..12

       ddaayy(()) = 1..31

       ttiimmee(()) = {hhoouurr(()), mmiinnuuttee(()), sseeccoonndd(())}

       hhoouurr(()) = 0..23

       mmiinnuuttee(()) = 0..59

       sseeccoonndd(()) = 0..59

       ddaayynnuumm(()) = 1..7

       llddoomm(()) = 28 | 29 | 30 | 31

       yyeeaarrwweeeekknnuumm(()) = {yyeeaarr(()), wweeeekknnuumm(())}

       wweeeekknnuumm(()) = 1..53

EEXXPPOORRTTSS
       ddaattee__ttoo__ggrreeggoorriiaann__ddaayyss((DDaattee)) -->> DDaayyss

       ddaattee__ttoo__ggrreeggoorriiaann__ddaayyss((YYeeaarr,, MMoonntthh,, DDaayy)) -->> DDaayyss

              Types:

                 Date = ddaattee(())
                 Year = yyeeaarr(())
                 Month = mmoonntthh(())
                 Day = ddaayy(())

              This function computes the number of gregorian days starting
              with year 0 and ending at the given date.

       ddaatteettiimmee__ttoo__ggrreeggoorriiaann__sseeccoonnddss((DDaatteeTTiimmee)) -->> SSeeccoonnddss

              Types:

                 DateTime = ddaatteettiimmee(())
                 Seconds = integer() >= 0

              This function computes the number of gregorian seconds starting
              with year 0 and ending at the given date and time.

       ddaayy__ooff__tthhee__wweeeekk((DDaattee)) -->> ddaayynnuumm(())

       ddaayy__ooff__tthhee__wweeeekk((YYeeaarr,, MMoonntthh,, DDaayy)) -->> ddaayynnuumm(())

              Types:

                 Date = ddaattee(())
                 Year = yyeeaarr(())
                 Month = mmoonntthh(())
                 Day = ddaayy(())

              This function computes the day of the week given _Y_e_a_r, _M_o_n_t_h and
              _D_a_y. The return value denotes the day of the week as _1: Monday,
              _2: Tuesday, and so on.

       ggrreeggoorriiaann__ddaayyss__ttoo__ddaattee((DDaayyss)) -->> ddaattee(())

              Types:

                 Days = integer() >= 0

              This function computes the date given the number of gregorian
              days.

       ggrreeggoorriiaann__sseeccoonnddss__ttoo__ddaatteettiimmee((SSeeccoonnddss)) -->> ddaatteettiimmee(())

              Types:

                 Seconds = integer() >= 0

              This function computes the date and time from the given number
              of gregorian seconds.

       iiss__lleeaapp__yyeeaarr((YYeeaarr)) -->> bboooolleeaann(())

              Types:

                 Year = yyeeaarr(())

              This function checks if a year is a leap year.

       iissoo__wweeeekk__nnuummbbeerr(()) -->> yyeeaarrwweeeekknnuumm(())

              This function returns the tuple {Year, WeekNum} representing the
              iso week number for the actual date. For determining the actual
              date, the function _l_o_c_a_l___t_i_m_e_/_0 is used.

       iissoo__wweeeekk__nnuummbbeerr((DDaattee)) -->> yyeeaarrwweeeekknnuumm(())

              Types:

                 Date = ddaattee(())

              This function returns the tuple {Year, WeekNum} representing the
              iso week number for the given date.

       llaasstt__ddaayy__ooff__tthhee__mmoonntthh((YYeeaarr,, MMoonntthh)) -->> LLaassttDDaayy

              Types:

                 Year = yyeeaarr(())
                 Month = mmoonntthh(())
                 LastDay = llddoomm(())

              This function computes the number of days in a month.

       llooccaall__ttiimmee(()) -->> ddaatteettiimmee(())

              This function returns the local time reported by the underlying
              operating system.

       llooccaall__ttiimmee__ttoo__uunniivveerrssaall__ttiimmee((DDaatteeTTiimmee11)) -->> DDaatteeTTiimmee22

              Types:

                 DateTime1 = DateTime2 = ddaatteettiimmee11997700(())

              This function converts from local time to Universal Coordinated
              Time (UTC). _D_a_t_e_T_i_m_e_1 must refer to a local date after Jan 1,
              1970.

          WWaarrnniinngg::
              This function is deprecated. Use
              _l_o_c_a_l___t_i_m_e___t_o___u_n_i_v_e_r_s_a_l___t_i_m_e___d_s_t_/_1 instead, as it gives a more
              correct and complete result. Especially for the period that does
              not exist since it gets skipped during the switch _t_o daylight
              saving time, this function still returns a result.


       llooccaall__ttiimmee__ttoo__uunniivveerrssaall__ttiimmee__ddsstt((DDaatteeTTiimmee11)) -->> [[DDaatteeTTiimmee]]

              Types:

                 DateTime1 = DateTime = ddaatteettiimmee11997700(())

              This function converts from local time to Universal Coordinated
              Time (UTC). _D_a_t_e_T_i_m_e_1 must refer to a local date after Jan 1,
              1970.

              The return value is a list of 0, 1 or 2 possible UTC times:

                _[_]:
                  For a local _{_D_a_t_e_1_, _T_i_m_e_1_} during the period that is skipped
                  when switching _t_o daylight saving time, there is no
                  corresponding UTC since the local time is illegal - it has
                  never happened.

                _[_D_s_t_D_a_t_e_T_i_m_e_U_T_C_, _D_a_t_e_T_i_m_e_U_T_C_]:
                  For a local _{_D_a_t_e_1_, _T_i_m_e_1_} during the period that is
                  repeated when switching _f_r_o_m daylight saving time, there are
                  two corresponding UTCs. One for the first instance of the
                  period when daylight saving time is still active, and one
                  for the second instance.

                _[_D_a_t_e_T_i_m_e_U_T_C_]:
                  For all other local times there is only one corresponding
                  UTC.

       nnooww__ttoo__llooccaall__ttiimmee((NNooww)) -->> ddaatteettiimmee11997700(())

              Types:

                 Now = eerrllaanngg::ttiimmeessttaammpp(())

              This function returns local date and time converted from the
              return value from _e_r_l_a_n_g_:_n_o_w_(_).

       nnooww__ttoo__uunniivveerrssaall__ttiimmee((NNooww)) -->> ddaatteettiimmee11997700(())

       nnooww__ttoo__ddaatteettiimmee((NNooww)) -->> ddaatteettiimmee11997700(())

              Types:

                 Now = eerrllaanngg::ttiimmeessttaammpp(())

              This function returns Universal Coordinated Time (UTC) converted
              from the return value from _e_r_l_a_n_g_:_n_o_w_(_).

       sseeccoonnddss__ttoo__ddaayyssttiimmee((SSeeccoonnddss)) -->> {{DDaayyss,, TTiimmee}}

              Types:

                 Seconds = Days = integer()
                 Time = ttiimmee(())

              This function transforms a given number of seconds into days,
              hours, minutes, and seconds. The _T_i_m_e part is always non-
              negative, but _D_a_y_s is negative if the argument _S_e_c_o_n_d_s is.

       sseeccoonnddss__ttoo__ttiimmee((SSeeccoonnddss)) -->> ttiimmee(())

              Types:

                 Seconds = sseeccss__ppeerr__ddaayy(())
                 sseeccss__ppeerr__ddaayy(()) = 0..86400

              This function computes the time from the given number of
              seconds. _S_e_c_o_n_d_s must be less than the number of seconds per day
              (86400).

       ttiimmee__ddiiffffeerreennccee((TT11,, TT22)) -->> {{DDaayyss,, TTiimmee}}

              Types:

                 T1 = T2 = ddaatteettiimmee(())
                 Days = integer()
                 Time = ttiimmee(())

              This function returns the difference between two _{_D_a_t_e_, _T_i_m_e_}
              tuples. _T_2 should refer to an epoch later than _T_1.

          WWaarrnniinngg::
              This function is obsolete. Use the conversion functions for
              gregorian days and seconds instead.


       ttiimmee__ttoo__sseeccoonnddss((TTiimmee)) -->> sseeccss__ppeerr__ddaayy(())

              Types:

                 Time = ttiimmee(())
                 sseeccss__ppeerr__ddaayy(()) = 0..86400

              This function computes the number of seconds since midnight up
              to the specified time.

       uunniivveerrssaall__ttiimmee(()) -->> ddaatteettiimmee(())

              This function returns the Universal Coordinated Time (UTC)
              reported by the underlying operating system. Local time is
              returned if universal time is not available.

       uunniivveerrssaall__ttiimmee__ttoo__llooccaall__ttiimmee((DDaatteeTTiimmee)) -->> ddaatteettiimmee(())

              Types:

                 DateTime = ddaatteettiimmee11997700(())

              This function converts from Universal Coordinated Time (UTC) to
              local time. _D_a_t_e_T_i_m_e must refer to a date after Jan 1, 1970.

       vvaalliidd__ddaattee((DDaattee)) -->> bboooolleeaann(())

       vvaalliidd__ddaattee((YYeeaarr,, MMoonntthh,, DDaayy)) -->> bboooolleeaann(())

              Types:

                 Date = ddaattee(())
                 Year = Month = Day = integer()

              This function checks if a date is a valid.

LLEEAAPP YYEEAARRSS
       The notion that every fourth year is a leap year is not completely
       true. By the Gregorian rule, a year Y is a leap year if either of the
       following rules is valid:

         * Y is divisible by 4, but not by 100; or

         * Y is divisible by 400.

       Accordingly, 1996 is a leap year, 1900 is not, but 2000 is.

DDAATTEE AANNDD TTIIMMEE SSOOUURRCCEE
       Local time is obtained from the Erlang BIF _l_o_c_a_l_t_i_m_e_/_0. Universal time
       is computed from the BIF _u_n_i_v_e_r_s_a_l_t_i_m_e_/_0.

       The following facts apply:

         * there are 86400 seconds in a day

         * there are 365 days in an ordinary year

         * there are 366 days in a leap year

         * there are 1461 days in a 4 year period

         * there are 36524 days in a 100 year period

         * there are 146097 days in a 400 year period

         * there are 719528 days between Jan 1, 0 and Jan 1, 1970.

Ericsson AB                      stdlib 1.18.2                     calendar(3)
